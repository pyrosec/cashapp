import "google/protobuf/any.proto";
syntax = "proto3";
package cashapp;
enum UiAliasType {
  option allow_alias = true;
  SMS = 1;
  EMAIL = 2;
  APP = 3;
}
message UiAlias {
  UiAliasType type = 1;
  string canonical_text = 2;
}
message NotificationPreference {
  UiAlias alias = 1;
  bool enabled = 2;
}
enum CashInstrumentType {
  option allow_alias = true;
  DEBIT_CARD = 1;
  BANK_ACCOUNT = 2;
  CREDIT_CARD = 3;
  CASH_BALANCE = 4;
  LINE_OF_CREDIT = 5;
}
enum InstrumentType {
  option allow_alias = true;
  UNKNOWN = 1;
  VISA = 2;
  MASTER_CARD = 3;
  AMERICAN_EXPRESS = 4;
  DISCOVER = 5;
  DISCOVER_DINERS = 6;
  JCB = 7;
  BALANCE = 8;
  UNION_PAY = 9;
  SQUARE_GIFT_CARD_V2 = 10;
  INTERAC = 11;
  SQUARE_CAPITAL_CARD = 12;
  PAYPAY = 13;
  AFTERPAY = 14;
  SQUARE_ACCOUNT_BALANCE = 15;
}
enum CurrencyCode {
  option allow_alias = true;
  AED = 0;
  AFN = 1;
  ALL = 2;
  AMD = 3;
  ANG = 4;
  AOA = 5;
  ARS = 6;
  AUD = 7;
  AWG = 8;
  AZN = 9;
  BAM = 10;
  BBD = 11;
  BDT = 12;
  BGN = 13;
  BHD = 14;
  BIF = 15;
  BMD = 16;
  BND = 17;
  BOB = 18;
  BOV = 19;
  BRL = 20;
  BSD = 21;
  BTN = 22;
  BWP = 23;
  BYR = 24;
  BZD = 25;
  CAD = 26;
  CDF = 27;
  CHE = 28;
  CHF = 29;
  CHW = 30;
  CLF = 31;
  CLP = 32;
  CNY = 33;
  COP = 34;
  COU = 35;
  CRC = 36;
  CUC = 37;
  CUP = 38;
  CVE = 39;
  CZK = 40;
  DJF = 41;
  DKK = 42;
  DOP = 43;
  DZD = 44;
  EGP = 45;
  ERN = 46;
  ETB = 47;
  EUR = 48;
  FJD = 49;
  FKP = 50;
  GBP = 51;
  GEL = 52;
  GHS = 53;
  GIP = 54;
  GMD = 55;
  GNF = 56;
  GTQ = 57;
  GYD = 58;
  HKD = 59;
  HNL = 60;
  HRK = 61;
  HTG = 62;
  HUF = 63;
  IDR = 64;
  ILS = 65;
  INR = 66;
  IQD = 67;
  IRR = 68;
  ISK = 69;
  JMD = 70;
  JOD = 71;
  JPY = 72;
  KES = 73;
  KGS = 74;
  KHR = 75;
  KMF = 76;
  KPW = 77;
  KRW = 78;
  KWD = 79;
  KYD = 80;
  KZT = 81;
  LAK = 82;
  LBP = 83;
  LKR = 84;
  LRD = 85;
  LSL = 86;
  LTL = 87;
  LVL = 88;
  LYD = 89;
  MAD = 90;
  MDL = 91;
  MGA = 92;
  MKD = 93;
  MMK = 94;
  MNT = 95;
  MOP = 96;
  MRO = 97;
  MUR = 98;
  MVR = 99;
  MWK = 100;
  MXN = 101;
  MXV = 102;
  MYR = 103;
  MZN = 104;
  NAD = 105;
  NGN = 106;
  NIO = 107;
  NOK = 108;
  NPR = 109;
  NZD = 110;
  OMR = 111;
  PAB = 112;
  PEN = 113;
  PGK = 114;
  PHP = 115;
  PKR = 116;
  PLN = 117;
  PYG = 118;
  QAR = 119;
  RON = 120;
  RSD = 121;
  RUB = 122;
  RWF = 123;
  SAR = 124;
  SBD = 125;
  SCR = 126;
  SDG = 127;
  SEK = 128;
  SGD = 129;
  SHP = 130;
  SLL = 131;
  SOS = 132;
  SRD = 133;
  SSP = 134;
  STD = 135;
  SVC = 136;
  SYP = 137;
  SZL = 138;
  THB = 139;
  TJS = 140;
  TMT = 141;
  TND = 142;
  TOP = 143;
  TRY = 144;
  TTD = 145;
  TWD = 146;
  TZS = 147;
  UAH = 148;
  UGX = 149;
  USD = 150;
  USN = 151;
  USS = 152;
  UYI = 153;
  UYU = 154;
  UZS = 155;
  VEF = 156;
  VND = 157;
  VUV = 158;
  WST = 159;
  XAF = 160;
  XAG = 161;
  XAU = 162;
  XBA = 163;
  XBB = 164;
  XBC = 165;
  XBD = 166;
  XCD = 167;
  XDR = 168;
  XOF = 169;
  XPD = 170;
  XPF = 171;
  XPT = 172;
  XTS = 173;
  XXX = 174;
  YER = 175;
  ZAR = 176;
  ZMK = 177;
  ZMW = 178;
  BTC = 179;
}
message Money {
  int64 amount = 2;
  CurrencyCode currency_code = 3;
}
message Instrument {
  string token = 1;
  CashInstrumentType cash_instrument_type = 2;
  InstrumentType card_brand = 3;
  string suffix = 4;
  string bank_name = 5;
  string icon_url = 6;
  Money available_balance = 7;
  int64 version = 8;
  string detail_icon_url = 10;
  string display_name = 11;
  string bank_short_name = 12;
  string wallet_address = 13;
  bool pending_verification = 15;
  string selection_icon_url = 16;
  int64 occurred_at = 19;
}
message RetryContext {
  int64 created_at = 1;
  int64 retry_attempt = 2;
  repeated Instrument instruments = 3;
  bool is_foreground = 4;
}
message EmailBlocker {
  string email = 1;
}
message PasscodeVerificationBlocker {
  InstrumentType brand = 1;
  string pan_suffix = 2;
  Instrument instrument = 3;
}
enum CardStatus {
  option allow_alias = true;
  VALID = 1;
  NOT_LINKED = 2;
  INVALID = 3;
  EXPIRED = 4;
  UNSUPPORTED_FOR_ROLE = 5;
  UNSUPPORTED_FOR_DEPOSIT_PREFERENCE = 6;
}
message CardBlocker {
  CardStatus card_status = 1;
  repeated CashInstrumentType supported_instrument_types = 2;
}
message IdentityVerificationBlocker {
  bool requires_birthdate = 1;
  bool requires_ssn = 2;
  bool requires_full_ssn = 3;
  bool requires_last_four_ssn = 4;
  bool requires_full_name = 5;
  bool requires_address = 6;
}
message PhoneNumberBlocker {}
message PhoneVerificationBlocker {
  string number = 1;
}
message ConfirmBlocker {
  bool requires_passcode = 1;
  InstrumentType brand = 7;
  string pan_suffix = 8;
  string suspected_duplicate_payment_token = 9;
  string instrument_token = 10;
  bool explicit_confirmation = 11;
}
message NameBlocker {}
enum RatePlan {
  option allow_alias = true;
  UNDECIDED = 1;
  UNDECIDED_DEFERRED = 2;
  UNDECIDED_GRANDFATHERED = 3;
  PERSONAL = 4;
  BUSINESS = 5;
  BUSINESS_0 = 6;
  BUSINESS_1_5 = 7;
  BUSINESS_1_9 = 8;
  BUSINESS_2_75 = 9;
  BUSINESS_NONPROFIT = 10;
  BUSINESS_MERCHANT = 11;
}
message RatePlanBlocker {
  repeated RatePlan available_rate_plans = 1;
}
message CashtagBlocker {
  string suggested_cashtag = 1;
  string main_text = 2;
}
message ResolveMergeBlocker {}
message EmailVerificationBlocker {
  string email = 1;
}
message RewardCodeBlocker {
  string suggested_code = 1;
  int32 minimum_code_length = 2;
}
message PasscodeCreationBlocker {
  bool requires_existing_passcode = 1;
  string instrument_token = 2;
}
message SupportRequiredBlocker {}
message AddressBlocker {
  bool requires_postal_code = 1;
  bool requires_street_address = 2;
  bool requires_city = 3;
  bool requires_state = 4;
}
enum SelectionBlockerIcon {
  option allow_alias = true;
  INSTANT = 1;
  ISSUED_CARD = 2;
  PHYSICAL_CARD = 3;
  PHYSICAL_CARD_UPSELL = 4;
  DIRECT_DEPOSIT = 5;
  PENDING = 6;
  SUCCESS = 7;
  FAILURE = 8;
  VERIFICATION_REQUIRED = 9;
  GOVERNMENT_ID = 10;
  EMERGENCY_CARD = 11;
}
enum ClientScenario {
  option allow_alias = true;
  ONBOARDING = 1;
  LOGIN = 2;
  PAYMENT_FLOW = 3;
  PROFILE = 4;
  ACTIVITY = 5;
  ENABLE_CASH_BALANCE = 6;
  DISABLE_CASH_BALANCE = 7;
  ENABLE_SECURITY_LOCK = 8;
  DISABLE_SECURITY_LOCK = 9;
  CREATE_PASSCODE = 10;
  CHANGE_PASSCODE = 11;
  RESET_PASSCODE = 12;
  TRANSFER_FUNDS = 13;
  GET_ISSUED_CARD = 14;
  ACTIVATE_ISSUED_CARD = 15;
  ENABLE_ISSUED_CARD = 16;
  DISABLE_ISSUED_CARD = 17;
  LOCK_ISSUED_CARD = 18;
  UNLOCK_ISSUED_CARD = 19;
  ENABLE_AUTO_CASH_OUT = 20;
  ENABLE_TRANSFER_INSTANTLY_WITH_FEE = 21;
  ENABLE_TRANSFER_SLOWLY_WITHOUT_FEE = 22;
  DEPOSIT_INSTANTLY_FROM_SLOW = 23;
  PROVISION_APPLE_PAY = 24;
  SUGGEST_MERGE = 25;
  REQUEST_PHYSICAL_CARD = 26;
  REQUEST_PHYSICAL_CARD_APP_MESSAGE = 27;
  ACTIVATE_PHYSICAL_CARD = 28;
  ACQUIRE_ALIAS = 29;
  ACTIVATE_DIRECT_DEPOSIT_ACCOUNT = 30;
  REPORT_LOST_CARD = 31;
  REPORT_MISSING_REWARD = 32;
  ENABLE_CRYPTOCURRENCY = 33;
  TRANSFER_CRYPTOCURRENCY = 34;
  EXCHANGE_CURRENCY = 35;
  ENABLE_CRYPTOCURRENCY_TRANSFER_IN = 36;
  ENABLE_CRYPTOCURRENCY_TRANSFER_OUT = 37;
  GET_REWARDS = 38;
  ADD_OR_UPDATE_REWARD = 39;
  REPORT_MISSING_BOOST = 40;
  ENABLE_SCHEDULED_RELOAD = 41;
  DISABLE_SCHEDULED_RELOAD = 42;
  UPDATE_SCHEDULED_RELOAD_AMOUNT = 43;
  UPDATE_SCHEDULED_RELOAD_FREQUENCY = 44;
  EXCHANGE_EQUITY = 45;
  ACQUIRE_ALIAS_FOR_MISSING_PAYMENT = 46;
  PROVISION_GOOGLE_PAY = 47;
  CHANGE_CARD_DESIGN = 48;
  RESOLVE_SUSPENSION = 49;
  REQUEST_EMERGENCY_CARD = 50;
  VERIFY_INSTRUMENT = 51;
  BITCOIN_DEPOSIT_REVERSAL = 52;
  LINK_BANK_ACCOUNT_USING_YODLEE = 53;
  RECOVER_ACCOUNT = 54;
  ADD_EMAIL_ALIAS = 55;
  CONFIRM_CLOSE_ACCOUNT = 56;
  CLOSE_ACCOUNT = 57;
  ADD_SMS_ALIAS = 58;
  INITIATE_LOAN = 59;
  INITIATE_LOAN_PAYMENT = 60;
  APPROVE_ACCOUNT_INTEGRATION = 61;
  RECOVER_ALIAS_ACCOUNT = 62;
  INVITE_FRIENDS = 63;
  SKIP_LOAN_PAYMENT = 64;
  ENABLE_SCHEDULED_INVESTMENT_BUY = 65;
  DISABLE_SCHEDULED_INVESTMENT_BUY = 66;
  UPDATE_SCHEDULED_INVESTMENT_BUY_AMOUNT = 67;
  UPDATE_SCHEDULED_INVESTMENT_BUY_FREQUENCY = 68;
  SEND_TAX_FORM_EMAIL = 69;
  AMEND_CARD_MAILING_ADDRESS = 70;
  INITIATE_REFUND_REQUEST = 71;
  REVIEW_REFUND_REQUEST = 72;
  OAUTH = 73;
  DEPOSIT_CHECK = 74;
  DDA_DETAILS = 75;
  GOVERNMENT_STIMULUS_1 = 76;
  GOVERNMENT_STIMULUS_2 = 77;
  GOVERNMENT_STIMULUS_3 = 78;
  GOVERNMENT_STIMULUS_4 = 79;
  GOVERNMENT_STIMULUS_5 = 80;
  DISPUTE_CARD_TRANSACTION = 81;
  ENABLE_LOAN_AUTOPAY = 82;
  DISABLE_LOAN_AUTOPAY = 83;
  INITIATE_CRYPTO_PAYMENT = 84;
  GET_DIRECT_DEPOSIT_FORM = 85;
  VERIFY_IDENTITY = 86;
  VIEW_DIRECT_DEPOSIT_FORM = 87;
  UNLOCK_BORROW = 88;
  REVIEW_BORROW_FEE_STATUS = 89;
  GOOGLE_PAY_PROVISIONING = 90;
  GET_EVENT_BASED_BOOST_DETAIL = 91;
  INITIATE_BANK_ACCOUNT_LINKING = 92;
  REPORT_SCAM = 93;
  ACCEPT_CRYPTO_PAYMENT = 94;
  UNLOCK_QR_CODE_BOOST = 95;
  DEEP_LINK_ACTIVATE_PHYSICAL_CARD = 96;
  ACCEPT_INVEST_PAYMENT = 97;
  SEND_INVEST_PAYMENT = 98;
  EDIT_PROFILE_BIO = 99;
  REPORT_PROFILE = 100;
  DECLINE_CRYPTO_PAYMENT = 101;
  UPGRADE_APP_VERSION_LENDING = 102;
  INITIATE_LENDING_FLOW_2 = 103;
  INITIATE_LENDING_FLOW_1 = 104;
  INITIATE_LENDING_FLOW_3 = 105;
  INITIATE_LENDING_FLOW_4 = 106;
  INITIATE_LENDING_FLOW_5 = 107;
  INITIATE_LENDING_FLOW_6 = 108;
  INITIATE_LENDING_FLOW_7 = 109;
  NEW_DEVICE_LOGIN = 110;
  ACTIVATE_PHYSICAL_CARD_FROM_NOTIFICATION = 111;
  DEPOSIT_PAPER_CASH = 112;
  GET_BANKING_INTERSTITIAL = 113;
  TRANSFER_FROM_BANKS = 114;
  REQUEST_SPONSORSHIP = 115;
  APPROVE_SPONSORSHIP = 116;
  INITIATE_TAX_UPGRADE = 117;
  DEPOSIT_PAPER_CASH_CONFIRMATION = 118;
  GET_INSTANT_PAYOUT = 119;
  UNLOCK_BANKING_DEPOSIT_OPTIONS = 120;
  INITIATE_CRYPTO_WITHDRAWAL = 121;
  ENTER_QR_MARKETING_EVENT = 122;
  CARD_EXPIRATION = 123;
  PLASMA = 124;
  ACCEPT_TERMS_OF_SERVICE_AGREEMENT = 125;
  ADD_CASH = 126;
  STANDALONE_IDV = 127;
  DIRECT_DEPOSIT_SWITCH_VIA_PAYROLL = 128;
  CARD_LSB_REORDER = 129;
  RESEND_SPONSORSHIP_REQUEST = 130;
  INITIATE_LIGHTNING_WITHDRAWAL = 131;
  LINK_PAYROLL_ACCOUNT = 132;
  GET_ESCHEATMENTS = 133;
  SEND_PRINT_CHECK = 134;
  RE_VERIFY_IDV = 135;
  DIRECT_DEPOSIT_SWITCH_VIA_PAYROLL_CONFIRMATION = 136;
  DD_SWITCH_UPSELL_CARD_ACTIVATED = 137;
  ACCEPT_GIFT_CARD_PAYMENT = 138;
  CANCEL_INVEST_PAYMENT = 139;
  INITIATE_BORROW_NULL_STATE_FLOW = 140;
  INITIATE_GLOBAL_PAYMENT = 141;
  CONVERT_GIFT_CARD_TO_CASH = 142;
  DIRECT_DEPOSIT_SWITCH_UPSELL = 143;
  FAMILY_ACCOUNT = 144;
  CANCEL_PENDING_ROUND_UP_EXECUTION = 145;
  SEND_GIFT_CARD_PAYMENT = 146;
  ACTIVATE_PHYSICAL_CARD_IN_POSTCARD = 147;
  INITIATE_BITCOIN_WITHDRAWAL = 148;
  GET_NON_RECOURSE_PAYOUT = 149;
  WIRE_TRANSFERS = 150;
  ENABLE_APP_LOCK = 151;
  DISABLE_APP_LOCK = 152;
  UNLOCK_APP = 153;
  BANK_AND_WIRE_TRANSFERS = 154;
}
enum SelectionOptionHint {
  option allow_alias = true;
  CANCEL_BUTTON = 0;
}
message SelectionOption {
  string label = 1;
  string action = 2;
  ClientScenario client_scenario = 3;
  SelectionOptionHint hint = 4;
}
enum SelectionBlockerDetailRowAction {
  option allow_alias = true;
  NONE = 1;
  OPEN_URL = 2;
  BLOCKER_ACTION = 3;
}
message BlockerActionConfirmationDialog {
  string title = 1;
  string message = 2;
  string confirm_button_text = 3;
  string cancel_button_text = 4;
}
enum BlockerActionEndFlowActionResult {
  option allow_alias = true;
  COMPLETE = 1;
  CANCELLED = 2;
}
message BlockerActionEndFlowAction {
  BlockerActionEndFlowActionResult result = 1;
  string notify_end_flow_id = 2;
}
message BlockerActionMenuAction {
  repeated BlockerAction actions = 1;
}
enum BlockerActionOpenURLActionBehavior {
  option allow_alias = true;
  DEFAULT = 0;
  REDIRECT = 1;
}
message BlockerActionOpenURLAction {
  string url = 1;
  bool end_flow = 2;
  BlockerActionOpenURLActionBehavior behavior = 3;
}
message BlockerActionSkipBlockerAction {}
enum BlockerActionSubmitActionAnimationDirection {
  option allow_alias = true;
  FORWARD = 1;
  BACKWARD = 2;
}
message BlockerActionSubmitAction {
  string id = 1;
  string loading_label = 2;
  BlockerActionSubmitActionAnimationDirection direction = 3;
}
message BlockerActionInternalNavigationActionSupport {
  string support_flow_node = 1;
}
message BlockerActionInternalNavigationActionClientRoute {
  string url = 1;
}
message BlockerActionInternalNavigationAction {
  BlockerActionInternalNavigationActionSupport support = 1;
  BlockerActionInternalNavigationActionClientRoute client_route = 2;
}
message BlockerActionSignOutAction {}
message BlockerActionShareFileActionEmailOption {
  string subject = 1;
  string body = 2;
}
message BlockerActionShareFileActionViewOption {}
message BlockerActionShareFileActionShareOption {
  BlockerActionShareFileActionEmailOption email = 1;
  BlockerActionShareFileActionViewOption view = 2;
}
message BlockerActionShareFileAction {
  string file_url = 1;
  repeated BlockerActionShareFileActionShareOption options = 2;
  string title = 3;
  string extension = 4;
  string loading_text = 5;
}
message BlockerActionViewFileAction {
  string file_url = 1;
  string title = 2;
  string extension = 3;
  string loading_text = 4;
}
enum BlockerActionDialogActionButtonStyle {
  option allow_alias = true;
  DEFAULT = 1;
  CANCEL = 2;
  DESTRUCTIVE = 3;
}
message BlockerActionDialogActionButton {
  string text = 1;
  BlockerAction action = 2;
  BlockerActionDialogActionButtonStyle style = 3;
}
message BlockerActionDialogAction {
  string title = 1;
  string message = 2;
  BlockerActionDialogActionButton primary_button = 3;
  BlockerActionDialogActionButton secondary_button = 4;
}
message BlockerActionCopyAction {
  string text = 1;
}
message BlockerActionBackNavigationAction {
  string redirect_url = 1;
}
message BlockerActionShareTextAction {
  string text_data = 1;
  string title = 2;
  string email_subject = 3;
}
message BlockerAction {
  string text = 1;
  BlockerActionConfirmationDialog confirmation_dialog = 2;
  BlockerActionEndFlowAction end_flow_action = 3;
  BlockerActionMenuAction menu_action = 4;
  BlockerActionOpenURLAction open_url_action = 5;
  BlockerActionSkipBlockerAction skip_blocker_action = 6;
  BlockerActionSubmitAction submit_action = 7;
  BlockerActionInternalNavigationAction internal_navigation_action = 8;
  BlockerActionSignOutAction sign_out_action = 9;
  BlockerActionShareFileAction share_action = 10;
  BlockerActionViewFileAction view_action = 11;
  BlockerActionDialogAction dialog_action = 12;
  BlockerActionCopyAction copy_action = 13;
  BlockerActionBackNavigationAction back_navigation_action = 14;
  BlockerActionShareTextAction share_text_action = 15;
}
message SelectionBlockerDetailRow {
  string label = 1;
  string value_ = 2;
  SelectionBlockerDetailRowAction label_action = 3;
  string label_action_url = 4;
  BlockerAction blocker_action = 5;
}
message SelectionBlocker {
  SelectionBlockerIcon icon = 1;
  string header_text = 2;
  string main_text = 3;
  SelectionOption primary_option = 4;
  SelectionOption secondary_option = 5;
  string footer_text = 6;
  repeated SelectionOption options = 7;
  bool icon_above_text = 8;
  Money amount = 9;
  repeated SelectionBlockerDetailRow detail_rows = 10;
}
enum HelpItemAction {
  option allow_alias = true;
  GET_SCENARIO_PLAN = 1;
  RESOLVE_MERGE_FALSE = 2;
  SKIP_BLOCKER = 3;
  OPEN_URL = 4;
  SELECT_OPTION = 5;
  SIGN_OUT = 6;
  START_SUPPORT_FLOW = 7;
  START_CLIENT_SCENARIO = 8;
  SHOW_MESSAGE = 9;
  BLOCKER_ACTION = 10;
}
message HelpItem {
  string text = 1;
  HelpItemAction action = 2;
  string url = 3;
  string select_option_action = 4;
  string confirm_dialog_text = 5;
  string support_node_token = 6;
  string client_scenario = 7;
  string message_title = 8;
  string message_text = 9;
  BlockerAction blocker_action = 10;
}
enum FormBlockerElementButtonElementStyle {
  option allow_alias = true;
  PRIMARY = 1;
  SECONDARY = 2;
  TERTIARY = 3;
}
message FormBlockerElementButtonElement {
  BlockerAction action = 1;
  FormBlockerElementButtonElementStyle style = 2;
}
enum FormBlockerElementLocalImageElementIcon {
  option allow_alias = true;
  INSTANT = 1;
  SUCCESS = 2;
  FAILURE = 3;
  PENDING = 4;
  ACTION_REQUIRED = 5;
  LOCKED = 6;
  RECURRING = 7;
  BORROW = 8;
  DEPOSIT = 9;
  VERIFICATION = 10;
  VERIFYING = 11;
  DOCUMENT = 12;
  SCRIBBLE = 13;
  QR_CODE = 14;
  CVV = 15;
  CARD_MAILER_HERO = 16;
  CARD_CVV_LOCATION_HERO = 17;
  CARD = 18;
  BANK = 19;
  SECURITY_WARNING = 20;
  CALENDAR = 21;
  CHECK_DEPOSIT_ENDORSEMENT_HERO = 22;
  ENVELOPE = 23;
  LOGOMARK = 24;
  CAMERA = 25;
  VERIFICATION_FAILED = 26;
  INVESTING_ROUND_UPS = 27;
  INVESTING_ROUND_UPS_INTRO_ILLUSTRATION = 28;
  UNLOCK = 29;
  FAMILY = 30;
  PERSON = 31;
  INVESTING = 32;
}
message FormBlockerElementLocalImageElement {
  FormBlockerElementLocalImageElementIcon icon = 1;
}
enum FormBlockerElementRemoteImageElementHorizontalAlignment {
  option allow_alias = true;
  START = 1;
  CENTER = 2;
  END = 3;
}

message UiImage {
  string light_url = 1;
  string dark_url = 2;
}
message ImageFill {
  string asset_url = 1;
  UiImage image_asset = 2;
}
message ImageInset {
  string asset_url = 1;
  UiImage image_asset = 2;
}
message ImageFixed {
  string asset_url = 1;
  int32 width = 2;
  int32 height = 3;
  UiImage image_asset = 4;
}
message Image {
  ImageFill image_fill = 1;
  ImageInset image_inset = 2;
  ImageFixed image_fixed = 3;
}
message FormBlockerElementRemoteImageElement {
  string url = 1;
  int32 width = 2;
  int32 height = 3;
  FormBlockerElementRemoteImageElementHorizontalAlignment alignment = 4;
  Image image = 5;
}
message FormBlockerElementMoneyElement {
  Money amount = 1;
}
message FormBlockerElementSpacerElement {
  int32 proportion = 1;
}
enum FormBlockerElementTextElementSize {
  option allow_alias = true;
  SMALL = 1;
  MEDIUM = 2;
  LARGE = 3;
}
enum FormBlockerElementTextElementHorizontalAlignment {
  option allow_alias = true;
  START = 1;
  CENTER = 2;
  END = 3;
}
enum FormBlockerElementTextElementTextColor {
  option allow_alias = true;
  DEFAULT = 0;
  WARNING = 1;
}
message FormBlockerElementTextElement {
  string text = 1;
  FormBlockerElementTextElementSize size = 2;
  FormBlockerElementTextElementHorizontalAlignment alignment = 3;
  FormBlockerElementTextElementTextColor text_color = 4;
}
enum CardThemeIdentifier {
  option allow_alias = true;
  BLACK = 1;
  WHITE = 2;
}
enum CardThemeGradient {
  option allow_alias = true;
  DIAGONAL_DARK = 1;
  DIAGONAL_LIGHT = 2;
}
enum CardThemeBackgroundImage {
  option allow_alias = true;
  HOOD_BY_AIR = 1;
  HUNDRED_THIEVES = 2;
  METAL_OIL_SLICK = 3;
  METAL_BLACK = 4;
  SHANTELL_MARTIN = 5;
  SLIMEGUY = 6;
  TAP_DEVICE_TRIAL = 7;
  DREAM = 8;
}
message CardThemeCardCustomizationMargin {
  string color = 1;
  float alpha = 2;
  float size = 3;
}
enum CardThemeFont {
  option allow_alias = true;
  CASH_MARKET_LIGHT = 1;
  SHANTELL_SANS = 2;
  CASH_MARKET_REGULAR = 3;
}
message CardTheme {
  string token = 1;
  string title = 2;
  string card_image_url = 3;
  string selector_image_url = 4;
  string selector_foreground_color = 5;
  string ink_color = 6;
  string card_color = 7;
  string card_highlight_color = 8;
  string selector_border_color = 9;
  string border_color = 10;
  CardThemeIdentifier id = 11;
  CardThemeGradient gradient_style = 12;
  CardThemeBackgroundImage background_image = 13;
  string card_info_text_color = 14;
  string mag_stripe_color = 15;
  string back_ink_color = 16;
  string help_link_color = 17;
  CardThemeCardCustomizationMargin card_customization_margin = 18;
  string group_name = 19;
  CardThemeFont font = 20;
}
message TouchDataPoint {
  float x_coordinate = 1;
  float y_coordinate = 2;
  int64 created_at = 3;
}
message TouchDataStroke {
  repeated TouchDataPoint points = 1;
}
message TouchDataStampCustomization {
  string identifier = 1;
  TouchDataPoint center = 2;
  float width = 3;
  float height = 4;
  float rotation = 5;
}
message TouchData {
  float width = 1;
  float height = 2;
  repeated TouchDataStroke strokes = 3;
  repeated TouchDataStampCustomization stamps = 4;
}
enum CardCustomizationDataCustomizationArea {
  option allow_alias = true;
  LEGACY = 0;
  FULL_FACE = 1;
}
enum CardPresentationStyle {
  option allow_alias = true;
  PSEUDO_3D = 0;
  TRUE_3D = 1;
  LEGACY_2D = 2;
}
message CardCustomizationData {
  CardTheme card_theme = 1;
  TouchData touch_data = 2;
  bool show_cashtag = 3;
  CardCustomizationDataCustomizationArea customization_area = 4;
  bool is_2d = 5;
  CardPresentationStyle card_presentation_style = 6;
  string formatted_cashtag = 7;
}
message FormBlockerElementCustomizedCardElement {
  CardCustomizationData card_customization = 1;
}
enum Country {
  option allow_alias = true;
  US = 0;
  AD = 1;
  AE = 2;
  AF = 3;
  AG = 4;
  AI = 5;
  AL = 6;
  AM = 7;
  AO = 8;
  AQ = 9;
  AR = 10;
  AS = 11;
  AT = 12;
  AU = 13;
  AW = 14;
  AX = 15;
  AZ = 16;
  BA = 17;
  BB = 18;
  BD = 19;
  BE = 20;
  BF = 21;
  BG = 22;
  BH = 23;
  BI = 24;
  BJ = 25;
  BL = 26;
  BM = 27;
  BN = 28;
  BO = 29;
  BQ = 30;
  BR = 31;
  BS = 32;
  BT = 33;
  BV = 34;
  BW = 35;
  BY = 36;
  BZ = 37;
  CA = 38;
  CC = 39;
  CD = 40;
  CF = 41;
  CG = 42;
  CH = 43;
  CI = 44;
  CK = 45;
  CL = 46;
  CM = 47;
  CN = 48;
  CO = 49;
  CR = 50;
  CU = 51;
  CV = 52;
  CW = 53;
  CX = 54;
  CY = 55;
  CZ = 56;
  DE = 57;
  DJ = 58;
  DK = 59;
  DM = 60;
  DO = 61;
  DZ = 62;
  EC = 63;
  EE = 64;
  EG = 65;
  EH = 66;
  ER = 67;
  ES = 68;
  ET = 69;
  FI = 70;
  FJ = 71;
  FK = 72;
  FM = 73;
  FO = 74;
  FR = 75;
  GA = 76;
  GB = 77;
  GD = 78;
  GE = 79;
  GF = 80;
  GG = 81;
  GH = 82;
  GI = 83;
  GL = 84;
  GM = 85;
  GN = 86;
  GP = 87;
  GQ = 88;
  GR = 89;
  GS = 90;
  GT = 91;
  GU = 92;
  GW = 93;
  GY = 94;
  HK = 95;
  HM = 96;
  HN = 97;
  HR = 98;
  HT = 99;
  HU = 100;
  ID = 101;
  IE = 102;
  IL = 103;
  IM = 104;
  IN = 105;
  IO = 106;
  IQ = 107;
  IR = 108;
  IS = 109;
  IT = 110;
  JE = 111;
  JM = 112;
  JO = 113;
  JP = 114;
  KE = 115;
  KG = 116;
  KH = 117;
  KI = 118;
  KM = 119;
  KN = 120;
  KP = 121;
  KR = 122;
  KW = 123;
  KY = 124;
  KZ = 125;
  LA = 126;
  LB = 127;
  LC = 128;
  LI = 129;
  LK = 130;
  LR = 131;
  LS = 132;
  LT = 133;
  LU = 134;
  LV = 135;
  LY = 136;
  MA = 137;
  MC = 138;
  MD = 139;
  ME = 140;
  MF = 141;
  MG = 142;
  MH = 143;
  MK = 144;
  ML = 145;
  MM = 146;
  MN = 147;
  MO = 148;
  MP = 149;
  MQ = 150;
  MR = 151;
  MS = 152;
  MT = 153;
  MU = 154;
  MV = 155;
  MW = 156;
  MX = 157;
  MY = 158;
  MZ = 159;
  NA = 160;
  NC = 161;
  NE = 162;
  NF = 163;
  NG = 164;
  NI = 165;
  NL = 166;
  NO = 167;
  NP = 168;
  NR = 169;
  NU = 170;
  NZ = 171;
  OM = 172;
  PA = 173;
  PE = 174;
  PF = 175;
  PG = 176;
  PH = 177;
  PK = 178;
  PL = 179;
  PM = 180;
  PN = 181;
  PR = 182;
  PS = 183;
  PT = 184;
  PW = 185;
  PY = 186;
  QA = 187;
  RE = 188;
  RO = 189;
  RS = 190;
  RU = 191;
  RW = 192;
  SA = 193;
  SB = 194;
  SC = 195;
  SD = 196;
  SE = 197;
  SG = 198;
  SH = 199;
  SI = 200;
  SJ = 201;
  SK = 202;
  SL = 203;
  SM = 204;
  SN = 205;
  SO = 206;
  SR = 207;
  SS = 208;
  ST = 209;
  SV = 210;
  SX = 211;
  SY = 212;
  SZ = 213;
  TC = 214;
  TD = 215;
  TF = 216;
  TG = 217;
  TH = 218;
  TJ = 219;
  TK = 220;
  TL = 221;
  TM = 222;
  TN = 223;
  TO = 224;
  TR = 225;
  TT = 226;
  TV = 227;
  TW = 228;
  TZ = 229;
  UA = 230;
  UG = 231;
  UM = 232;
  UY = 233;
  UZ = 234;
  VA = 235;
  VC = 236;
  VE = 237;
  VG = 238;
  VI = 239;
  VN = 240;
  VU = 241;
  WF = 242;
  WS = 243;
  XT = 244;
  YE = 245;
  YT = 246;
  ZA = 247;
  ZM = 248;
  ZW = 249;
  ZZ = 250;
}
message Coordinates {
  double latitude = 1;
  double longitude = 2;
  double altitude = 3;
  double geographic_accuracy = 4;
  double altitudinal_accuracy = 5;
  double heading = 6;
  double speed = 7;
}
message GlobalAddress {
  string address_line_1 = 1;
  string address_line_2 = 2;
  string address_line_3 = 3;
  string address_line_4 = 4;
  string address_line_5 = 5;
  string locality = 6;
  string sublocality = 7;
  string sublocality_1 = 8;
  string sublocality_2 = 9;
  string sublocality_3 = 10;
  string sublocality_4 = 11;
  string sublocality_5 = 12;
  string administrative_district_level_1 = 13;
  string administrative_district_level_2 = 14;
  string administrative_district_level_3 = 15;
  string postal_code = 16;
  Country country_code = 17;
  Coordinates address_coordinates = 18;
}
message FormBlockerElementAddressElement {
  GlobalAddress prefill_address = 1;
  Country country_code = 2;
  bool autocomplete = 3;
}
enum FormBlockerElementTextInputElementKeyboardType {
  option allow_alias = true;
  DEFAULT = 0;
  NUMBER_PAD = 1;
  NUMBER_PAD_WITH_DECIMAL = 2;
  NUMBER_PAD_WITH_ABC = 3;
  EMAIL = 4;
}
enum FormBlockerElementTextInputElementSecurity {
  option allow_alias = true;
  CLEAR_TEXT = 1;
  SECURE = 2;
}
message FormBlockerElementTextInputElementTemplate {
  string template = 1;
  string template_placeholder_character = 2;
  string user_insertable_format_characters = 3;
}
message FormBlockerElementTextInputElementValidation {
  string regex = 1;
  FormBlockerElementTextInputElementTemplate template = 2;
}
enum FormBlockerElementTextInputElementInputFieldSecureFieldAccessory {
  option allow_alias = true;
  NONE = 1;
  LOCK = 2;
  SHOW_HIDE = 3;
}
message FormBlockerElementTextInputElementInputField {
  string hint_text = 1;
  string prefill_text = 2;
  FormBlockerElementTextInputElementKeyboardType keyboardType = 3;
  FormBlockerElementTextInputElementSecurity security = 4;
  repeated FormBlockerElementTextInputElementValidation validations = 5;
  FormBlockerElementTextInputElementInputFieldSecureFieldAccessory secure_field_accessory = 7;
}
message FormBlockerElementTextInputElement {
  repeated FormBlockerElementTextInputElementInputField input_fields = 1;
  string security_text = 2;
}
message FormBlockerElementOptionPickerElementOptionConfirmationDialog {
  string title = 1;
  string message = 2;
  string confirm_button_text = 3;
  string cancel_button_text = 4;
}
message FormBlockerElementOptionPickerElementOptionSelectable {
  FormBlockerElementOptionPickerElementOptionConfirmationDialog confirmation_dialog = 1;
}
message FormBlockerElementOptionPickerElementOptionUnselectable {
  string message = 1;
}
enum FormBlockerElementOptionPickerElementOptionTextColor {
  option allow_alias = true;
  DEFAULT = 0;
  WARNING = 1;
}
message FormBlockerElementOptionPickerElementOption {
  string id = 1;
  string value_ = 2;
  string subtitle = 3;
  FormBlockerElementOptionPickerElementOptionSelectable selectable = 4;
  FormBlockerElementOptionPickerElementOptionUnselectable unselectable = 5;
  FormBlockerElementOptionPickerElementOptionTextColor subtitle_color = 6;
}
message FormBlockerElementOptionPickerElement {
  repeated FormBlockerElementOptionPickerElementOption options = 2;
  int32 selected_option = 3;
  bool is_optional = 4;
}
message FormBlockerElementDetailRowElement {
  string title = 1;
  string detail_text = 2;
  string subtitle = 3;
  BlockerAction title_action = 4;
}
message FormBlockerElementCashtagElement {
  string prefix_symbol = 1;
  string hint_text = 2;
  string prefill_text = 3;
}
message ColorModeVariant {
  string srgb = 1;
  string p3 = 2;
  string high_contrast_srgb = 3;
  string high_contrast_p3 = 4;
}
message Color {
  ColorModeVariant light = 1;
  ColorModeVariant dark = 2;
}
enum FormBlockerElementAvatarElementAvatarBadgeShape {
  option allow_alias = true;
  CIRCULAR = 1;
  CARD = 2;
}
message FormBlockerElementAvatarElementAvatar {
  string accent_color = 1;
  string monogram_text = 2;
  string photo_url = 3;
  string accessibility_value = 4;
  Color background_color = 5;
  Image image = 6;
  bool is_template_avatar = 7;
  Image badge_image = 8;
  FormBlockerElementAvatarElementAvatarBadgeShape badge_shape = 9;
}
enum FormBlockerElementAvatarElementBadge {
  option allow_alias = true;
  CHECKMARK = 0;
}
message FormBlockerElementAvatarElement {
  repeated FormBlockerElementAvatarElementAvatar avatars = 1;
  FormBlockerElementAvatarElementBadge badge = 2;
  Color badge_background_color = 3;
}
enum FormBlockerElementSelectableRowElementIcon {
  option allow_alias = true;
  KEYPAD = 1;
  CARD = 2;
  UP_AND_DOWN_ARROWS = 3;
  LOCK = 4;
  TRUCK = 5;
  UNCHECKED_BOX = 6;
  CHECKED_BOX = 7;
  LIGHTNING = 8;
  CALENDAR = 9;
  INBOX = 10;
  CHECKMARK = 11;
  EXCLAMATION_MARK = 12;
  CLOCK = 13;
  DOLLAR = 14;
  INFORMATION = 15;
  NUMBER_ONE = 16;
  NUMBER_TWO = 17;
  NUMBER_THREE = 18;
  NUMBER_FOUR = 19;
  NUMBER_FIVE = 20;
  NUMBER_SIX = 21;
  NUMBER_SEVEN = 22;
  NUMBER_EIGHT = 23;
  NUMBER_NINE = 24;
  BANK = 25;
  SHIELD_CHECKMARK = 26;
  DOCUMENT = 27;
  PERSON = 28;
  ENCIRCLED_PLUS = 29;
  GLOBE = 30;
  CONTACTLESS = 31;
  LOCATION = 32;
  MOBILE_DEVICE = 33;
  GIFT_CARD = 34;
  PRICE_TAG = 35;
  HEART = 36;
  BULLET = 37;
  FDIC_INSURED = 38;
  FAMILY = 39;
  PRIVACY = 40;
  UPPER_LIMIT = 41;
  CASH_APP = 42;
  INVESTING = 43;
  CAPITOL = 44;
  ZERO_CROSSED = 45;
  HAPPY_FACE = 46;
}
enum FormBlockerElementSelectableRowElementAppearance {
  option allow_alias = true;
  STANDARD = 1;
  DISABLED = 2;
  TINTED = 3;
}
message FormBlockerElementSelectableRowElementAction {
  string label = 1;
  BlockerAction action = 2;
}
message FormBlockerElementSelectableRowElement {
  string title = 1;
  string subtitle = 2;
  string detail_text = 3;
  string accessibility_text = 4;
  BlockerAction action = 5;
  FormBlockerElementSelectableRowElementIcon icon = 6;
  FormBlockerElementSelectableRowElementAppearance appearance = 7;
  FormBlockerElementSelectableRowElementAction row_action = 10;
  Image remote_image = 11;
}
enum FormBlockerElementTimelineElementEventIcon {
  option allow_alias = true;
  NORMAL = 0;
  HIGHLIGHT = 1;
  ALERT = 2;
  COMPLETED = 3;
  SKIPPED = 4;
  MISSED = 5;
  HIGHLIGHT_COMPLETED = 6;
  FAILED = 7;
}
enum FormBlockerElementTimelineElementEventInlineTextFormat {
  option allow_alias = true;
  PRIMARY = 0;
  SECONDARY = 1;
}
message FormBlockerElementTimelineElementEvent {
  FormBlockerElementTimelineElementEventIcon icon = 1;
  string title = 2;
  string detail_text = 3;
  string inline_description_text = 4;
  FormBlockerElementTimelineElementEventInlineTextFormat inline_description_text_format = 5;
}
message FormBlockerElementTimelineElement {
  repeated FormBlockerElementTimelineElementEvent events = 1;
}
message FormBlockerElementMultilineTextInputElement {
  string hint_text = 1;
  string prefill_text = 2;
  int32 max_character_count = 3;
  bool disallow_newlines = 4;
  bool collapse_whitespace = 5;
  bool is_required = 6;
}
enum FormBlockerElementDividerElementDividerStyle {
  option allow_alias = true;
  HAIRLINE = 0;
  ELEMENT = 1;
  SECTION = 2;
}
message FormBlockerElementDividerElement {
  FormBlockerElementDividerElementDividerStyle style = 1;
}
message FormBlockerElementLegalTextElement {
  string text = 1;
}
message FormBlockerElementCallToActionElement {
  string title = 1;
  string subtitle = 2;
  BlockerAction button_action = 3;
  Color accent_color = 4;
  Image image = 5;
  int32 image_width = 6;
  int32 image_height = 7;
}
message FormBlockerElementCaptionedTileElement {
  Image icon = 1;
  Color background_color = 2;
  string caption = 3;
  string accessibility_text = 4;
}
message FormBlockerElementDateInputElement {
  string minimum_date = 1;
  string maximum_date = 2;
  string accessibility_text = 3;
  bool is_optional = 4;
  string default_value = 5;
}
message AnimationFill {
  UiImage lottie_asset = 1;
}
message AnimationInset {
  UiImage lottie_asset = 1;
}
message AnimationFixed {
  UiImage lottie_asset = 1;
  int32 width = 2;
  int32 height = 3;
}
message Animation {
  AnimationFill fill = 1;
  AnimationInset inset = 2;
  AnimationFixed fixed = 3;
}
message FormBlockerElementHeroElement {
  Animation animation = 1;
  string title = 2;
  string subtitle = 3;
  float animation_width_percentage = 4;
}
message FormBlockerElementGiftCardElement {
  string note = 1;
  Image card_logo = 2;
  string amount_text = 3;
  string caption_text = 4;
  string accessibility_label = 5;
  Image card = 6;
}
message FormBlockerElementCardElement {
  Image image = 1;
  int32 width = 2;
  int32 height = 3;
}
message FormBlockerElementCopyableElementGroupCopyableElement {
  string value_ = 1;
  string formatted_value = 2;
  string label = 3;
  string accessibility_text = 4;
}
message FormBlockerElementCopyableElementGroup {
  repeated FormBlockerElementCopyableElementGroupCopyableElement elements = 1;
}
message FormBlockerElementMoneyInputElement {
  CurrencyCode currency_code = 1;
  string hint_text = 2;
  Money prefill_amount = 3;
  Money minimum_amount = 4;
  Money maximum_amount = 5;
  bool is_optional = 6;
}
enum FormBlockerElementNoticeElementIcon {
  option allow_alias = true;
  PADLOCK = 0;
}
message FormBlockerElementNoticeElement {
  string text = 1;
  FormBlockerElementNoticeElementIcon icon = 2;
}
message FormBlockerElementEmojiPickerElementEmojiCategory {
  repeated string options = 1;
}
message FormBlockerElementEmojiPickerElementInitialSelection {}
message FormBlockerElementEmojiPickerElement {
  repeated FormBlockerElementEmojiPickerElementEmojiCategory categories = 1;
  FormBlockerElementEmojiPickerElementInitialSelection initial_selection = 2;
}
message FormBlockerElementFamilyUpsellElement {
  string title = 1;
  string subtitle = 2;
  int32 image_width = 3;
  int32 image_height = 4;
  Image image = 5;
}
message FormBlockerElement {
  FormBlockerElementButtonElement button_element = 1;
  FormBlockerElementLocalImageElement local_image_element = 2;
  FormBlockerElementRemoteImageElement remote_image_element = 3;
  FormBlockerElementMoneyElement money_element = 4;
  FormBlockerElementSpacerElement spacer_element = 5;
  FormBlockerElementTextElement text_element = 6;
  FormBlockerElementCustomizedCardElement customized_card_element = 7;
  string id = 8;
  FormBlockerElementAddressElement address_element = 9;
  FormBlockerElementTextInputElement text_input_element = 10;
  FormBlockerElementOptionPickerElement option_picker_element = 11;
  FormBlockerElementDetailRowElement detail_row_element = 12;
  FormBlockerElementCashtagElement cashtag_element = 14;
  FormBlockerElementAvatarElement avatar_element = 15;
  FormBlockerElementSelectableRowElement selectable_row_element = 16;
  FormBlockerElementTimelineElement timeline_element = 17;
  FormBlockerElementMultilineTextInputElement multiline_text_input_element = 18;
  FormBlockerElementDividerElement divider_element = 19;
  FormBlockerElementLegalTextElement legal_text_element = 20;
  FormBlockerElementCallToActionElement call_to_action_element = 21;
  FormBlockerElementCaptionedTileElement captioned_tile_element = 22;
  FormBlockerElementDateInputElement date_input_element = 23;
  FormBlockerElementHeroElement hero_element = 24;
  FormBlockerElementGiftCardElement gift_card_element = 25;
  FormBlockerElementCardElement card_element = 26;
  FormBlockerElementCopyableElementGroup copyable_element_group = 27;
  FormBlockerElementMoneyInputElement money_input_element = 28;
  FormBlockerElementNoticeElement notice_element = 29;
  FormBlockerElementEmojiPickerElement emoji_picker_element = 31;
  FormBlockerElementFamilyUpsellElement family_upsell_element = 32;
}
enum FormBlockerOnDisplayEffect {
  option allow_alias = true;
  NONE = 0;
  CONFETTI = 1;
}
message FormBlockerRemoteOnDisplayEffect {
  Animation animation = 1;
}
message FormBlocker {
  repeated FormBlockerElement elements = 1;
  BlockerAction primary_action = 2;
  BlockerAction secondary_action = 3;
  FormBlockerOnDisplayEffect on_display_effect = 4;
  bool requires_full_scroll = 5;
  FormBlockerElementButtonElementStyle secondary_action_style = 6;
  BlockerAction help_action = 7;
  FormBlockerRemoteOnDisplayEffect remote_on_display_effect = 8;
}
enum GovernmentIdBlockerFooterIcon {
  option allow_alias = true;
  LOCK = 0;
}
message GovernmentIdBlocker {
  repeated HelpItem help_items = 1;
  FormBlocker pre_license_blocker = 2;
  string front_title = 3;
  string back_title = 4;
  string footer_text = 5;
  GovernmentIdBlockerFooterIcon footer_icon = 6;
  string help_tips_title = 7;
  repeated string help_tips = 8;
}
message InstrumentVerificationBlocker {
  repeated CashInstrumentType instrument_type = 1;
}
message SignatureBlocker {}
message QrCodeBlocker {
  bool missing_qr_code_to_locate_cvv = 1;
}
message CardPasscodeAndExpirationBlocker {}
enum FileCategory {
  option allow_alias = true;
  SELFIE = 1;
  PAY_STUB_FRONT = 2;
  W2_FORM_FRONT = 3;
  SSN_CARD_FRONT = 4;
  SSN_CARD_BACK = 5;
  TAX_RETURN_FRONT = 6;
  PASSPORT_FRONT = 7;
  PASSPORT_CARD_FRONT = 8;
  PASSPORT_CARD_BACK = 9;
  DRIVERS_LICENSE_FRONT = 10;
  DRIVERS_LICENSE_BACK = 11;
  STATE_ID_FRONT = 12;
  STATE_ID_BACK = 13;
  LEXIS_FRONT = 14;
  TRANSUNION_FRONT = 15;
  MILITARY_ID_FRONT = 16;
  MILITARY_ID_BACK = 17;
  DEBIT_CARD_FRONT = 18;
  DEBIT_CARD_BACK = 19;
  GOVERNMENT_ISSUED_ID_FRONT = 20;
  GOVERNMENT_ISSUED_ID_BACK = 21;
  CREDIT_CARD_FRONT = 22;
  CREDIT_CARD_BACK = 23;
  DIVORCE_DECREE = 24;
  MARRIAGE_CERTIFICATE = 25;
  NAME_CHANGE_JUDGMENT = 26;
  NYC_ID_BACK = 27;
  NYC_ID_FRONT = 28;
  NYS_LEARNER_PERMIT_BACK = 29;
  NYS_LEARNER_PERMIT_FRONT = 30;
  NYS_NON_DRIVER_ID_BACK = 31;
  NYS_NON_DRIVER_ID_FRONT = 32;
  RESIDENCE_PERMIT_BACK = 33;
  RESIDENCE_PERMIT_FRONT = 34;
  STUDENT_ID_BACK = 35;
  STUDENT_ID_FRONT = 36;
  CREDIT_CARD_STATEMENT_BACK = 37;
  CREDIT_CARD_STATEMENT_FRONT = 38;
  GOVERNMENT_BENEFITS_CARD_BACK = 39;
  GOVERNMENT_BENEFITS_CARD_FRONT = 40;
  UTILITY_BILL_BACK = 41;
  UTILITY_BILL_FRONT = 42;
}
enum FileBlockerFooterIcon {
  option allow_alias = true;
  LOCK = 0;
}
message FileBlocker {
  FileCategory category = 1;
  string footer_text = 5;
  FileBlockerFooterIcon footer_icon = 6;
}
message ContactVerificationBlocker {}
message RegionBlocker {
  repeated Country suggested_countries = 1;
}
enum ScheduledTransactionPreferenceType {
  option allow_alias = true;
  CASH_IN = 1;
  BTC_BUY = 2;
  EQUITY_BUY = 3;
}
message ScheduledTransactionBlocker {
  bool requires_amount = 1;
  bool requires_frequency = 2;
  Money minimum_amount = 3;
  Money maximum_amount = 4;
  ScheduledTransactionPreferenceType type = 5;
  string investment_entity_token = 6;
}
message CashWaitingBlocker {}
enum InviteFriendsBlockerButtonOrder {
  option allow_alias = true;
  PRIMARY_BUTTON_FIRST = 1;
  SECONDARY_BUTTON_FIRST = 2;
}
message InviteFriendsOpportunityScreen {
  string treatment = 1;
  string header_text = 2;
  string body_text = 3;
  string skip_button_text = 4;
  string continue_button_text = 5;
  InviteFriendsBlockerButtonOrder button_order = 6;
}
message ContactAccessPreparationScreen {
  string treatment = 1;
  string header_text = 2;
  string body_text = 3;
  string skip_button_text = 4;
  string continue_button_text = 5;
  InviteFriendsBlockerButtonOrder button_order = 6;
}
message CountryText {
  Country country = 1;
  string text = 2;
}
message SharingContent {
  string default_text = 1;
  string direct_text = 2;
  string url = 3;
  string email_subject = 4;
}
message InviteFriendsEnableReferralText {
  string title = 1;
  string subtitle = 2;
  repeated string redemption_steps = 3;
  string footer = 4;
}
message InviteFriendsScreen {
  string treatment = 1;
  repeated CountryText sms_text_by_country = 2;
  string invite_contact_button_text = 3;
  string invited_contact_toast_subtitle = 4;
  string contact_access_request_text = 5;
  string contact_access_request_button_text = 6;
  string send_invite_button_text = 7;
  string header_text = 8;
  SharingContent sharing_content = 9;
  InviteFriendsBlockerButtonOrder button_order = 10;
  InviteFriendsEnableReferralText enable_referral_text = 11;
}
message InviteFriendsBlocker {
  InviteFriendsOpportunityScreen invite_friends_opportunity_screen = 1;
  ContactAccessPreparationScreen contact_access_preparation_screen = 2;
  InviteFriendsScreen invite_friends_screen = 3;
}
message GooglePayProvisioningBlocker {}
message CardCustomizationControlsTheme {
  string empty_customization_outline_color = 1;
  string filled_customization_outline_color = 2;
  string controls_tint_color = 3;
}
message CardCustomizationBlockerCardPreviewText {
  string title = 1;
  string body = 2;
  string customize_card_button_title = 3;
  string edit_customization_button_title = 4;
  string order_card_button_title = 5;
}
enum CardCustomizationBlockerCardOptionCustomizationArea {
  option allow_alias = true;
  LEGACY = 0;
  FULL_FACE = 1;
}
enum CardCustomizationBlockerCardOptionCashtagDisplay {
  option allow_alias = true;
  ALWAYS_HIDDEN = 0;
  OPTIONAL = 1;
  ALWAYS_SHOW = 2;
}
enum CardCustomizationBlockerCardOptionCardAvailability {
  option allow_alias = true;
  AVAILABLE = 0;
  UNAVAILABLE = 1;
}
message CardCustomizationBlockerCardOption {
  CardTheme card_theme = 1;
  CardCustomizationControlsTheme controls_theme = 2;
  string title = 3;
  string detail_text = 4;
  string accessibility_label = 5;
  bool cashtag_eligible = 6;
  bool customization_eligible = 7;
  string accessibility_text = 8;
  CardCustomizationBlockerCardPreviewText card_preview_text = 9;
  CardCustomizationBlockerCardOptionCustomizationArea customization_area = 10;
  CardCustomizationBlockerCardOptionCashtagDisplay cashtag_display = 11;
  CardPresentationStyle presentationStyle = 12;
  string intro_text = 13;
  CardCustomizationBlockerCardOptionCardAvailability card_availability = 14;
  string identifier = 15;
  string external_identifier = 16;
}
message CardCustomizationBlockerCardOptionSection {
  string header_text = 1;
  string short_title_text = 2;
  repeated CardCustomizationBlockerCardOption options = 3;
}
message CardCustomizationBlocker {
  string style_picker_title_text = 1;
  string style_picker_short_title_text = 2;
  string customization_prompt_text = 3;
  string cashtag_toggle_text = 4;
  string customization_title_text = 5;
  string stamp_added_text = 6;
  string return_to_draw_mode_text = 7;
  string too_much_ink_message = 8;
  float maximum_ink_coverage = 9;
  repeated CardCustomizationBlockerCardOptionSection card_option_sections = 10;
  CardCustomizationDataCustomizationArea customization_area = 11;
  string formatted_cashtag = 12;
  string selected_card_option_identifier = 13;
}
message DisclosureBlockerLineItem {
  string title_text = 1;
  string detail_text = 2;
}
message DisclosureBlocker {
  string headline_text = 1;
  repeated DisclosureBlockerLineItem line_items = 2;
  string description_text = 3;
  string scroll_button_text = 4;
  string accept_button_text = 5;
  string more_info_panel_collapsed_title = 6;
  string more_info_panel_expanded_title = 7;
  repeated DisclosureBlockerLineItem more_info_panel_line_items = 8;
  string more_info_panel_footer_text = 9;
  string footer_text = 10;
  string cancel_dialog_text = 11;
  string cancel_dialog_cancel_text = 12;
  string cancel_dialog_confirm_text = 13;
}
message NuDataBlocker {
  string threeds_token = 1;
  string threeds_proxy_url = 2;
}
enum AliasBlockerMode {
  option allow_alias = true;
  SMS_DEFAULT = 0;
  EMAIL_ONLY = 1;
  SMS_ONLY = 2;
}
message AliasBlocker {
  string main_text = 1;
  string sms_hint_text = 2;
  string email_hint_text = 3;
  string legal_agreement_text = 4;
  AliasBlockerMode mode = 5;
}
message CheckDepositBlockerAmountEntryData {
  string title = 1;
  string subtitle = 2;
  Money maximum_amount = 3;
  string primary_button_label = 4;
}
message CheckDepositBlockerPhotoCaptureDataEndorsementInstructionsFrontConfirmation {
  string title = 1;
  string message = 2;
  string customer_name_text = 3;
  string amount_template_text = 4;
  string verify_checkbox_label = 5;
  string button_title = 6;
}
message CheckDepositBlockerPhotoCaptureDataEndorsementInstructionsBackConfirmation {
  string title = 1;
  string message = 2;
  string signature_text = 3;
  string endorsement_text = 4;
  string verify_checkbox_label = 5;
  string button_title = 6;
}
message CheckDepositBlockerPhotoCaptureDataEndorsementInstructions {
  string title = 1;
  string message = 2;
  string button_title = 3;
  CheckDepositBlockerPhotoCaptureDataEndorsementInstructionsFrontConfirmation front_confirmation = 4;
  CheckDepositBlockerPhotoCaptureDataEndorsementInstructionsBackConfirmation back_confirmation = 5;
}
message CheckDepositBlockerPhotoCaptureDataControls {
  string label = 1;
  string button_title = 2;
  string capture_screen_header_label = 3;
  string capture_screen_footer_label = 4;
  string take_photo_button_title = 5;
  string retake_photo_label = 6;
}
message CheckDepositBlockerPhotoCaptureData {
  string title = 1;
  string description = 2;
  string primary_button_label = 3;
  CheckDepositBlockerPhotoCaptureDataEndorsementInstructions endorsement_instructions = 4;
  CheckDepositBlockerPhotoCaptureDataControls front_of_check_controls = 5;
  CheckDepositBlockerPhotoCaptureDataControls back_of_check_controls = 6;
}
message CheckDepositBlocker {
  CheckDepositBlockerAmountEntryData amount_entry_data = 1;
  CheckDepositBlockerPhotoCaptureData photo_capture_data = 2;
}
message ThreeDomainSecureRedirectUrl {
  string method = 1;
  string base_uri = 2;
}
message ThreeDomainSecureRedirectBlocker {
  string challenge_url = 1;
  string header_title = 2;
  string header_subtitle = 3;
  ThreeDomainSecureRedirectUrl redirect_url = 4;
  string spinner_message = 5;
  int64 spinner_message_delay_s = 6;
  string transaction_type = 7;
  string transaction_id = 8;
}
message AmountBlockerMoneyConfig {
  Money minimum_amount = 1;
  Money maximum_amount = 2;
  Money prefilled_amount = 3;
}
message ScientificNumber {
  int64 significand = 1;
  int32 magnitude = 2;
}
message AmountBlockerPercentageConfig {
  ScientificNumber minimum_amount = 1;
  ScientificNumber maximum_amount = 2;
}
message AmountBlocker {
  string title = 1;
  string subtitle = 2;
  AmountBlockerMoneyConfig money_config = 4;
  AmountBlockerPercentageConfig percentage_config = 5;
  string confirm_button_text = 6;
  BlockerAction help_action = 7;
}
message GooglePayCompleteProvisioningBlocker {}
message TransactionPickerBlocker {
  string title = 1;
}
enum PayWithCashAuthorizationBlockerBadge {
  option allow_alias = true;
  LINK = 0;
}
message PayWithCashAuthorizationBlockerAvatar {
  Color background_color = 1;
  string monogram_text = 2;
  Image image = 3;
  PayWithCashAuthorizationBlockerBadge badge = 4;
  Color badge_background_color = 5;
}
enum PayWithCashAuthorizationBlockerStatusIcon {
  option allow_alias = true;
  SUCCESS = 0;
}
message PayWithCashAuthorizationBlockerContentTextContent {
  string text = 1;
}
message PayWithCashAuthorizationBlockerContent {
  PayWithCashAuthorizationBlockerContentTextContent text_content = 1;
}
message PayWithCashAuthorizationBlockerFooterButtonFooter {
  BlockerAction primary_action = 1;
  BlockerAction secondary_action = 2;
}
message PayWithCashAuthorizationBlockerFooter {
  PayWithCashAuthorizationBlockerFooterButtonFooter button_footer = 1;
}
message PayWithCashAuthorizationBlockerInterstitialStatusInterstitial {
  PayWithCashAuthorizationBlockerStatusIcon icon = 1;
  string text = 2;
}
message PayWithCashAuthorizationBlockerInterstitial {
  PayWithCashAuthorizationBlockerInterstitialStatusInterstitial status_interstitial = 1;
}
message PayWithCashAuthorizationBlocker {
  PayWithCashAuthorizationBlockerAvatar avatar = 1;
  string title = 2;
  string subtitle = 3;
  PayWithCashAuthorizationBlockerStatusIcon icon = 4;
  PayWithCashAuthorizationBlockerContent content = 5;
  PayWithCashAuthorizationBlockerFooter footer = 6;
  BlockerAction auto_dismiss_action = 7;
  int64 auto_dismiss_delay_ms = 8;
  PayWithCashAuthorizationBlockerInterstitial on_display_interstitial = 9;
  FormBlockerElementMoneyElement money_element = 10;
  FormBlockerElementCallToActionElement call_to_action_element = 11;
}
enum ThreeDomainSecureV2AdyenEnvironment {
  option allow_alias = true;
  TEST = 1;
  EUROPE = 2;
  UNITED_STATES = 3;
  AUSTRALIA = 4;
  LIVE = 5;
}
message ThreeDomainSecureV2Blocker {
  string header_title = 1;
  string action_data = 2;
  string transaction_type = 3;
  string transaction_id = 4;
  ThreeDomainSecureV2AdyenEnvironment environment = 5;
}
enum PaperCashDepositBlockerTutorialCarouselPageIllustration {
  option allow_alias = true;
  FIND_A_LOCATION = 1;
  SHOW_THE_BARCODE = 2;
  GIVE_CASH_TO_CASHIER = 3;
}
message PaperCashDepositBlockerTutorialCarouselPage {
  PaperCashDepositBlockerTutorialCarouselPageIllustration illustration = 1;
  string title = 2;
  string description = 3;
}
message PaperCashDepositBlockerTutorialCarousel {
  repeated PaperCashDepositBlockerTutorialCarouselPage pages = 1;
  string next_page_button_text = 2;
  string submit_button_text = 3;
}
message PaperCashDepositBlockerMapScreen {
  string header_title = 1;
  string show_barcode_button_text = 2;
  string search_button_accessibility_label = 3;
  string tutorial_button_accessibility_label = 4;
  string search_header_title_prefix = 5;
  string no_nearby_locations_title_text = 6;
  string no_nearby_locations_detail_text = 7;
  string no_nearby_locations_button_text = 8;
  string location_disabled_title_text = 9;
  string location_disabled_detail_text = 10;
  string location_disabled_settings_text = 11;
  string location_disabled_ignore_text = 12;
}
message PaperCashDepositBlockerSearchScreen {
  string search_bar_placeholder = 1;
  string explanation_title_text = 2;
  string explanation_detail_text = 3;
  string recent_section_header_text = 4;
  string results_section_header_text = 5;
}
message PaperCashDepositBlockerMerchantOptions {
  string directions_button_text = 1;
  string show_barcode_button_text = 2;
  string copy_address_button_text = 3;
}
message PaperCashDepositBlockerBarcodeExpiredScreen {
  string title_text = 1;
  string detail_text = 2;
  string reload_barcode_button_text = 3;
}
message PaperCashDepositBlockerLimitsReachedDialog {
  string title_text = 1;
  string detail_text = 2;
  string dismiss_button_text = 3;
}
message PaperCashDepositBlocker {
  PaperCashDepositBlockerTutorialCarousel turorial_carousel = 1;
  PaperCashDepositBlockerMapScreen map_screen = 2;
  PaperCashDepositBlockerSearchScreen search_screen = 3;
  PaperCashDepositBlockerMerchantOptions merchant_options = 4;
  PaperCashDepositBlockerBarcodeExpiredScreen barcode_expired_screen = 5;
  PaperCashDepositBlockerLimitsReachedDialog limits_reached_dialog = 6;
}
message TaxWebViewBlocker {
  string url = 1;
  bool can_support_dark_mode = 2;
}
message SelectSponsorsBlocker {
  bool allow_only_cash_users = 1;
  string title = 3;
  string to_hint = 4;
}
message PinwheelLinkBlocker {
  string link_token = 1;
  bool hide_view = 2;
}
message PasswordCreationBlocker {
  string header_text = 1;
  string detail_text = 2;
  string password_placeholder = 3;
  BlockerAction help_action = 4;
}
message PasswordVerificationBlocker {
  string header_text = 1;
  string detail_text = 2;
  string password_placeholder = 3;
  BlockerAction help_action = 4;
  bool should_suppress_password_token_storage = 5;
}
enum TutorialBlockerPageIllustration {
  option allow_alias = true;
  INSTANT_PAY_GET_PART_OF_YOUR_PAY_NOW = 1;
  INSTANT_PAY_GET_THE_REST_ON_PAYDAY = 2;
  INSTANT_PAY_AND_ITS_FREE = 3;
  INSTANT_PAY_YOURE_APPROVED = 4;
}
message TutorialBlockerPage {
  TutorialBlockerPageIllustration illustration = 1;
  string title = 2;
  string description = 3;
}
message TutorialBlocker {
  repeated TutorialBlockerPage pages = 1;
  string next_page_button_text = 2;
  string submit_button_text = 3;
}
enum PayrollVendor {
  option allow_alias = true;
  UNKNOWN = 1;
  PINWHEEL = 2;
}
enum PayrollProviderType {
  option allow_alias = true;
  EMPLOYER = 1;
  PLATFORM = 2;
}
message SourceIdentifier {
  PayrollVendor source_vendor = 1;
  string source_id = 2;
  PayrollProviderType payroll_provider_type = 3;
}
message Employer {
  string token = 1;
  string canonical_name = 2;
  SourceIdentifier source_id = 3;
}
enum Platform {
  option allow_alias = true;
  UNKNOWN = 1;
  ANDROID = 2;
  IOS = 3;
  WEB = 4;
}
message PayrollProviderUiAvatar {
  Image avatar_url = 1;
  Color avatar_accent_color = 2;
}
message PayrollProviderUiSpecification {
  PayrollProviderUiAvatar avatar = 1;
  string title = 2;
}
enum TaskType {
  option allow_alias = true;
  PAYSTUBS = 1;
  INCOME = 2;
  EMPLOYMENT = 3;
  SHIFTS = 4;
  DIRECT_DEPOSIT_SWITCH = 5;
  DIRECT_DEPOSIT_PAYMENT = 6;
  DIRECT_DEPOSIT_ALLOCATIONS = 7;
  IDENTITY = 8;
  TAX_FORMS = 9;
}
message DirectDepositInfo {
  bool amount_supported = 1;
  bool fractional_amount_supported = 2;
  int64 max_amount_cents = 3;
  int64 min_amount_cents = 4;
}
message PayrollProvider {
  Employer employer = 1;
  Platform platform = 2;
  PayrollProviderUiSpecification ui_specification = 3;
  repeated TaskType supported_tasks = 4;
  DirectDepositInfo direct_deposit_info = 5;
}
message FallbackSearchResult {
  PayrollProviderUiAvatar avatar = 1;
  string alternative_text = 2;
}
enum PlatformType {
  option allow_alias = true;
  PAYROLL = 1;
  TIME_AND_ATTENDANCE = 2;
}
message PayrollProviderSearchBlocker {
  string search_bar_placeholder_text = 1;
  string platforms_section_header_text = 2;
  string employers_section_header_text = 3;
  string initial_footer_text = 4;
  string search_result_header_text = 5;
  string empty_result_footer_text = 6;
  repeated PayrollProvider popular_platforms = 7;
  repeated PayrollProvider popular_employers = 8;
  FallbackSearchResult fallback_search_result = 9;
  repeated TaskType required_task_types = 10;
  PayrollProviderType filter_on_payroll_provider_type = 11;
  string title_header_text = 12;
  FallbackSearchResult fallback_popular_platforms = 13;
  PlatformType filter_on_platform_type = 14;
}
message InstantPayAutoAdvanceBlockerScreenPhaseSleep {
  int64 duration_seconds = 1;
}
message InstantPayAutoAdvanceBlockerScreenPhase {
  string label = 1;
  InstantPayAutoAdvanceBlockerScreenPhaseSleep sleep = 2;
}
message InstantPayAutoAdvanceBlockerScreen {
  FormBlockerElementLocalImageElement local_image_element = 1;
  FormBlockerElementRemoteImageElement remote_image_element = 2;
  FormBlockerElementAvatarElement avatar_element = 3;
  string title = 4;
  string subtitle = 5;
  BlockerAction primary_action = 6;
  BlockerAction secondary_action = 7;
  repeated InstantPayAutoAdvanceBlockerScreenPhase phases = 8;
  string submit_button_text = 9;
}
message InstantPayAutoAdvanceBlockerPollingConfiguration {
  string payout_attempt_token = 1;
}
message InstantPayAutoAdvanceBlocker {
  InstantPayAutoAdvanceBlockerScreen screen = 1;
  InstantPayAutoAdvanceBlockerPollingConfiguration polling_configuration = 2;
}
message PersonaDidvBlocker {
  string template_id = 1;
  string template_version = 2;
  string reference_id = 3;
  string inquiry_id = 4;
  string session_token = 5;
  string country_code = 6;
  string region = 7;
  bool resolve_on_cancel = 8;
}
message RoundUpScreensOnboardingIntroInstruction {
  string title = 1;
  string description = 2;
}
message RoundUpScreensOnboardingIntro {
  string title = 1;
  string description = 2;
  repeated RoundUpScreensOnboardingIntroInstruction instructions = 3;
  string continue_button_label = 4;
  Image illustration = 5;
  int32 illustration_width = 6;
  int32 illustration_height = 7;
  string equity_fineprint_markdown = 8;
}
message RoundUpScreensDestinationSelector {
  string title = 1;
  string description = 2;
  string equity_button_label = 3;
  string bitcoin_button_label = 4;
  string equity_fineprint_markdown = 5;
}
message RoundUpScreensStockSelector {
  string title = 1;
  string search_bar_placeholder_text = 2;
  string next_screen_button_label = 3;
}
message RoundUpOnboardingBlocker {
  RoundUpScreensOnboardingIntro onboarding_intro_screen = 1;
  RoundUpScreensDestinationSelector destination_selector_screen = 2;
  RoundUpScreensStockSelector stock_selector_screen = 3;
}
message ChangeRoundUpDestinationBlocker {
  RoundUpScreensDestinationSelector destination_selector_screen = 1;
  RoundUpScreensStockSelector stock_selector_screen = 2;
}
message ActivityPickerBlocker {
  string title = 1;
  string include_token_regex = 2;
}
message ApplePayCompleteProvisioningBlocker {}
message FilesetUploadBlockerFileSummary {
  string file_token = 1;
  string name = 2;
  string mime_type = 3;
  int64 size_bytes = 4;
}
message FilesetUploadBlocker {
  repeated FilesetUploadBlockerFileSummary files = 1;
  BlockerAction primary_action = 2;
  BlockerAction secondary_action = 3;
  string title = 4;
  string detail_text = 5;
  int64 file_size_limit_bytes = 6;
  int32 file_count_limit = 7;
  string upload_context = 8;
}
message InstrumentSelectionBlockerInstrumentOptionNewLinkIcon {}
enum InstrumentSelectionBlockerOptionStyle {
  option allow_alias = true;
  NORMAL = 1;
  INELIGIBLE = 2;
}
message InstrumentSelectionBlockerInstrumentOptionEnabledStateSubmitInstrumentAction {}
message InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionDetailRow {
  string title = 1;
  string detail_text = 2;
  string info_dialog_text = 3;
  string info_dialog_dismiss_button_text = 4;
}
message InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionInstrumentDetailsDialog {
  string info_dialog_text = 1;
  string info_dialog_dismiss_button_text = 2;
}
message InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionDetail {
  string text = 1;
  InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionInstrumentDetailsDialog dialog = 2;
}
message InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionDetailListDetailRow {
  string label = 1;
  string value_ = 2;
  InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionInstrumentDetailsDialog dialog = 3;
}
message InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionDetailList {
  repeated InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionDetailListDetailRow detail_rows = 1;
}
message InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentAction {
  string selected_title = 1;
  string selected_subtitle_primary = 2;
  string selected_subtitle_suffix = 3;
  repeated InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionDetailRow detail_rows = 4;
  InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionDetail detail = 5;
  InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentActionDetailList detail_list = 6;
  string selected_accessibility_label = 7;
}
message InstrumentSelectionBlockerInstrumentOptionEnabledStateShowDialogAction {
  string title = 1;
  string body = 2;
  string submit_button_text = 3;
  string dismiss_button_text = 4;
}
message InstrumentSelectionBlockerInstrumentOptionEnabledState {
  bytes encoded_selected_option = 1;
  InstrumentSelectionBlockerInstrumentOptionEnabledStateSubmitInstrumentAction submit_instrument_action = 4;
  InstrumentSelectionBlockerInstrumentOptionEnabledStateSelectInstrumentAction select_instrument_action = 5;
  InstrumentSelectionBlockerInstrumentOptionEnabledStateShowDialogAction show_dialog_action = 6;
}
message InstrumentSelectionBlockerInstrumentOptionDisabledState {}
message InstrumentSelectionBlockerInstrumentOptionCardIcon {}
message InstrumentSelectionBlockerInstrumentOptionBankIcon {}
message InstrumentSelectionBlockerInstrumentOptionBalanceIcon {
  CurrencyCode currency_code = 1;
}
message InstrumentSelectionBlockerInstrumentOption {
  Image avatar = 1;
  InstrumentSelectionBlockerInstrumentOptionNewLinkIcon new_link_icon = 2;
  InstrumentSelectionBlockerOptionStyle option_style = 3;
  string list_title = 4;
  string list_subtitle_primary = 5;
  string list_subtitle_suffix = 6;
  string list_pill_text = 7;
  InstrumentSelectionBlockerInstrumentOptionEnabledState enabled_state = 8;
  InstrumentSelectionBlockerInstrumentOptionDisabledState disabled_state = 9;
  InstrumentSelectionBlockerInstrumentOptionCardIcon card_icon = 10;
  InstrumentSelectionBlockerInstrumentOptionBankIcon bank_icon = 11;
  string list_accessibility_label = 12;
  InstrumentSelectionBlockerInstrumentOptionBalanceIcon balance_icon = 13;
}
message InstrumentSelectionBlocker {
  string header_text = 1;
  string submit_button_title = 2;
  repeated InstrumentSelectionBlockerInstrumentOption options = 3;
  int32 preselected_option_index = 4;
  string selected_instrument_label = 5;
  string list_header_title = 6;
  string list_dismiss_button_text = 7;
}
message InstantPayDirectDepositSwitchBlockerSelectorOption {
  Money fixed_amount = 1;
  int32 percentage_bps = 2;
  Money payout_amount = 3;
}
message InstantPayDirectDepositSwitchBlockerEligibleData {
  repeated InstantPayDirectDepositSwitchBlockerSelectorOption selector_options = 1;
}
message InstantPayDirectDepositSwitchBlockerIneligibleData {
  repeated InstantPayDirectDepositSwitchBlockerSelectorOption selector_options = 1;
}
message InstantPayDirectDepositSwitchBlockerUnsupportedData {}
message InstantPayDirectDepositSwitchBlocker {
  InstantPayDirectDepositSwitchBlockerEligibleData eligible_data = 1;
  InstantPayDirectDepositSwitchBlockerIneligibleData ineligible_data = 2;
  InstantPayDirectDepositSwitchBlockerUnsupportedData unsupported_data = 3;
}
message WebviewBlockerCookieField {
  string name = 1;
  string value_ = 2;
  bool secure = 3;
  string path = 4;
  string domain = 5;
  int64 expires = 6;
}
message WebviewBlocker {
  string url = 1;
  string callback_url = 2;
  repeated WebviewBlockerCookieField cookie_fields = 3;
}
enum DirectDepositSetupBlockerBenefitsSheetIcon {
  option allow_alias = true;
  CARD = 1;
  FDIC = 2;
  LIGHTNING = 3;
}
message DirectDepositSetupBlockerBenefitsSheetItem {
  DirectDepositSetupBlockerBenefitsSheetIcon icon = 1;
  string label = 2;
}
message DirectDepositSetupBlockerBenefitsSheet {
  string title = 1;
  repeated DirectDepositSetupBlockerBenefitsSheetItem items = 2;
}
message DirectDepositSetupBlockerAutomaticSetupCard {
  string caption = 1;
  string title = 2;
  string description = 3;
  FormBlockerElementButtonElement button = 4;
}
message DirectDepositSetupBlockerManualSetupCardAccountAndRoutingData {}
message DirectDepositSetupBlockerManualSetupCard {
  string caption = 1;
  string title = 2;
  string description = 3;
  DirectDepositSetupBlockerManualSetupCardAccountAndRoutingData account_and_routing_data = 4;
  FormBlockerElementButtonElement button = 5;
}
enum DirectDepositSetupBlockerSource {
  option allow_alias = true;
  INSTANT_PAYCHECK = 0;
}
message DirectDepositSetupBlocker {
  string title = 1;
  string benefits_button_label = 2;
  DirectDepositSetupBlockerBenefitsSheet benefits_sheet = 3;
  DirectDepositSetupBlockerAutomaticSetupCard automatic_setup_card = 4;
  DirectDepositSetupBlockerManualSetupCard manual_setup_card = 5;
  string footer = 6;
  DirectDepositSetupBlockerSource source = 7;
}
message RemittanceAmountEntryBlocker {}
message Blockers {
  string url = 1;
  EmailBlocker email = 2;
  PasscodeVerificationBlocker passcode_verification = 3;
  CardBlocker card = 4;
  IdentityVerificationBlocker identity_verification = 7;
  PhoneNumberBlocker phone_number = 9;
  PhoneVerificationBlocker phone_verification = 10;
  ConfirmBlocker confirm = 11;
  NameBlocker name = 13;
  RatePlanBlocker rate_plan = 16;
  CashtagBlocker cashtag = 17;
  ResolveMergeBlocker resolve_merge = 18;
  EmailVerificationBlocker email_verification = 19;
  RewardCodeBlocker reward_code = 22;
  PasscodeCreationBlocker passcode_creation = 24;
  SupportRequiredBlocker support_required = 25;
  AddressBlocker address = 26;
  SelectionBlocker selection = 27;
  GovernmentIdBlocker government_id = 30;
  InstrumentVerificationBlocker instrument_verification = 32;
  SignatureBlocker signature = 35;
  QrCodeBlocker qr_code = 36;
  CardPasscodeAndExpirationBlocker card_passcode_and_expiration = 37;
  FileBlocker file_ = 39;
  ContactVerificationBlocker contact_verification = 40;
  RegionBlocker region = 41;
  ScheduledTransactionBlocker scheduled_transaction = 44;
  CashWaitingBlocker cash_waiting = 45;
  InviteFriendsBlocker invite_friends = 46;
  GooglePayProvisioningBlocker google_pay_provisioning = 47;
  CardCustomizationBlocker card_customization = 48;
  FormBlocker form = 51;
  DisclosureBlocker disclosure = 52;
  NuDataBlocker nudata_blocker = 54;
  AliasBlocker alias_blocker = 55;
  CheckDepositBlocker check_deposit_blocker = 56;
  ThreeDomainSecureRedirectBlocker three_domain_secure_redirect_blocker = 57;
  AmountBlocker amount_blocker = 58;
  GooglePayCompleteProvisioningBlocker google_pay_complete_provisioning_blocker = 59;
  TransactionPickerBlocker transaction_picker_blocker = 60;
  PayWithCashAuthorizationBlocker pay_with_cash_authorization_blocker = 61;
  ThreeDomainSecureV2Blocker three_domain_secure_v2_blocker = 62;
  PaperCashDepositBlocker paper_cash_deposit_blocker = 63;
  TaxWebViewBlocker tax_web_view_blocker = 64;
  SelectSponsorsBlocker select_sponsors_blocker = 65;
  PinwheelLinkBlocker pinwheel_link_blocker = 66;
  PasswordCreationBlocker password_creation_blocker = 67;
  PasswordVerificationBlocker password_verification_blocker = 68;
  TutorialBlocker tutorial_blocker = 69;
  PayrollProviderSearchBlocker payroll_provider_search_blocker = 70;
  InstantPayAutoAdvanceBlocker instant_pay_auto_advance_blocker = 71;
  PersonaDidvBlocker persona_didv_blocker = 72;
  RoundUpOnboardingBlocker round_up_onboarding_blocker = 73;
  ChangeRoundUpDestinationBlocker change_round_up_destination_blocker = 74;
  ActivityPickerBlocker activity_picker_blocker = 75;
  ApplePayCompleteProvisioningBlocker apple_pay_complete_provisioning_blocker = 76;
  FilesetUploadBlocker fileset_upload_blocker = 77;
  InstrumentSelectionBlocker instrument_selection_blocker = 78;
  InstantPayDirectDepositSwitchBlocker instant_pay_direct_deposit_switch_blocker = 79;
  WebviewBlocker webview_blocker = 80;
  DirectDepositSetupBlocker direct_deposit_setup_blocker = 81;
  RemittanceAmountEntryBlocker remittance_amount_entry_blocker = 82;
}
message NameBlockerSupplement {
  RatePlan rate_plan = 1;
  string main_text = 2;
  string name_prefill = 3;
  string hint_text = 4;
  int32 min_length = 5;
  int32 max_length = 6;
  string footer_text = 7;
}
message ResolveMergeBlockerSupplement {
  string confirm_message = 1;
  string skip_message = 2;
}
enum ConfirmRatePlanSectionIcon {
  option allow_alias = true;
  BUSINESS_ICON = 1;
  CIRCLE = 2;
}
message ConfirmRatePlanSection {
  string text = 1;
  ConfirmRatePlanSectionIcon icon = 2;
  string icon_text = 3;
}
message ConfirmRatePlanConfig {
  string title = 1;
  repeated ConfirmRatePlanSection confirm_rate_plan_sections = 2;
  string retreat_confirmation_text = 3;
}
message IntendedUsageItem {
  string intended_usage = 1;
  RatePlan rate_plan = 2;
  string display_text = 3;
  ConfirmRatePlanConfig confirm_rate_plan_config = 4;
}
message RatePlanConfig {
  string personal_title = 1;
  string personal_description = 2;
  string business_title = 3;
  string business_description = 4;
  int64 business_fee_bps = 5;
  string business_text1 = 6;
  string business_text2 = 7;
  string business_text3 = 8;
  string sample_cashtag = 9;
  repeated IntendedUsageItem intended_usage_items = 10;
}
message ForcedRatePlanConfig {
  string main_text = 1;
  string button_text = 2;
  string inline_button_title = 3;
  string inline_button_text = 4;
  string inline_button_url = 5;
  string title = 6;
}
message RatePlanBlockerSupplement {
  RatePlanConfig rate_plan_config = 1;
  ForcedRatePlanConfig forced_rate_plan_config = 2;
}
message MenuItem {
  string header_text = 1;
  string description_text = 2;
}
enum OAuthConfigFlowType {
  option allow_alias = true;
  PLAID_AUTH = 1;
  PLAID_RELINK = 2;
}
message OAuthConfig {
  string launch_url = 1;
  string success_url_regex = 2;
  string cancel_url_regex = 3;
  OAuthConfigFlowType flow_type = 4;
  string onload = 5;
  string skip_url_regex = 6;
  string start_url_regex = 7;
  string search_url_regex = 8;
  FormBlocker privacy_blocker = 9;
}
message PlaidLinkingConfig {
  bool use_update_mode = 1;
}
message BankAccountLinkingConfig {
  OAuthConfig bank_account_oauth_config = 25;
  bool yodlee_enabled = 26;
  bool manual_ach_enabled = 27;
  bool force_manual_ach = 28;
  PlaidLinkingConfig plaid_linking_config = 29;
}
enum CardBlockerSupplementLinkedCardInputVariant {
  option allow_alias = true;
  LEGACY = 0;
  MANUAL_ENTRY_ONLY = 1;
  MANUAL_ENTRY_WITH_SCAN_OPTION = 2;
  SCAN_FIRST = 3;
  SCAN_FIRST_MULTI_SCREEN = 4;
}
message CardBlockerSupplement {
  MenuItem menu_item_bank_account = 1;
  MenuItem menu_item_skip = 2;
  string main_text = 3;
  string card_number_hint_text = 4;
  BankAccountLinkingConfig bank_account_linking_config = 6;
  CardBlockerSupplementLinkedCardInputVariant linked_card_input_variant = 7;
  bool should_upload_ocr_payload = 8;
  string treatment = 9;
  bool should_upload_ocr_scan_image = 10;
}
message ConfirmBlockerSupplement {
  string main_text = 1;
  MenuItem menu_item_confirm_payment = 2;
  MenuItem menu_item_pay_duplicate = 3;
  string confirm_payment_button_title = 4;
  string pay_duplicate_button_title = 5;
}
message EmailBlockerSupplement {
  string main_text = 1;
  string headline = 2;
}
message AddressBlockerSupplement {
  string main_text = 1;
  GlobalAddress address_prefill = 2;
  string hint_text = 3;
  string footer_text = 4;
}
message PasscodeVerificationBlockerSupplement {
  string main_text = 1;
  bool suppress_forgot_passcode_button = 2;
  repeated HelpItem additional_help_items = 3;
}
message InstrumentVerificationBlockerSupplement {
  string main_text = 1;
  repeated HelpItem additional_help_items = 2;
  string input_hint_text = 3;
}
message EmailVerificationBlockerSupplement {
  string skip_message = 1;
  string main_text = 2;
  repeated HelpItem additional_help_items = 3;
  bool suppress_edit_email_address = 4;
  string headline = 5;
}
enum PhoneVerificationBlockerSupplementPhoneVerificationBlockerStatus {
  option allow_alias = true;
  PVBS_DO_NOT_USE = 0;
  SUCCESS = 1;
  INVALID = 2;
  INVALID_SMS_NUMBER = 3;
  TOO_MANY_REQUESTS = 4;
  DUPLICATE_SMS_NUMBER = 5;
  CUSTOMER_DOES_NOT_EXIST = 6;
  INVALID_VERIFICATION_CODE = 7;
  EXPIRED_VERIFICATION_CODE = 8;
  TOO_MANY_FAILED_ATTEMPTS = 9;
  NOT_ELIGIBLE = 10;
}
message PhoneVerificationBlockerSupplement {
  string skip_message = 1;
  string main_text = 2;
  repeated HelpItem additional_help_items = 3;
  bool suppress_edit_phone_number = 4;
  PhoneVerificationBlockerSupplementPhoneVerificationBlockerStatus status = 5;
}
message PasscodeCreationBlockerSupplement {
  string prompt_main_text = 1;
  string confirmation_main_text = 2;
  bool skippable = 3;
  string prompt_sub_text = 4;
  string confirmation_sub_text = 5;
}
message IdentityVerificationBlockerSupplement {
  string name_main_text = 1;
  repeated HelpItem additional_help_items = 2;
  string name_prefill = 3;
  string name_hint_text = 4;
  string ssn_main_text = 5;
  string birthdate_main_text = 6;
}
message CardPasscodeAndExpirationBlockerSupplement {
  string passcode_main_text = 1;
  string expiration_main_text = 2;
}
message SelectionBlockerSupplement {
  repeated HelpItem additional_help_items = 1;
}
message FileBlockerSupplement {
  string main_text = 1;
  repeated HelpItem help_items = 2;
  string confirmation_main_text = 3;
}
message DisplayCountry {
  Country country_code = 1;
  string icon_url = 2;
  string country_name = 3;
  bool supported = 4;
}
message RegionBlockerSupplement {
  repeated DisplayCountry display_countries = 1;
}
message PhoneNumberBlockerSupplement {
  string main_text = 1;
  string input_hint_text = 2;
}
message ContactVerificationBlockerSupplement {
  string main_text = 1;
  repeated HelpItem additional_help_items = 2;
}
message CashWaitingData {
  string photo_url = 1;
  string sender_text = 2;
  Money amount = 3;
  string main_text = 4;
  string button_text = 5;
  bool is_subject_to_fees = 6;
}
message CashWaitingBlockerSupplement {
  CashWaitingData cash_waiting_data = 1;
}
enum InvitationConfigInvitationTreatment {
  option allow_alias = true;
  BATCH_TEN = 1;
  BATCH_ONE = 2;
  COMPOSE_IMMEDIATELY = 3;
  ADDITIONAL_ALIAS = 4;
}
enum InvitationConfigInvitationBehavior {
  option allow_alias = true;
  V2_5_BEHAVIOR = 1;
  V2_6_NO_EMAIL = 2;
  V2_6_NO_INTERSTITIAL = 3;
  V2_6_NO_EMAIL_NO_INTERSTITIAL_SELECT_ALL = 4;
}
message InvitationConfig {
  string message = 1;
  Money bounty_amount = 2;
  bool enabled = 3;
  InvitationConfigInvitationTreatment invitation_treatment = 4;
  Money welcome_bonus_amount = 5;
  string header_text = 6;
  string preview_message = 7;
  string message_template = 8;
  bool invite_all_enabled = 9;
  InvitationConfigInvitationBehavior invitation_behavior = 10;
  string reward_code = 11;
  string reward_code_url = 12;
  SharingContent sharing_content = 13;
  string header_link_display_text = 14;
  string profile_button_text = 15;
  string activity_button_text = 16;
  repeated CountryText preview_message_by_country = 17;
  string profile_button_template = 18;
}
message InviteFriendsData {
  InvitationConfig invitation_config = 1;
  string promo_text = 2;
}
message InviteFriendsBlockerSupplement {
  InviteFriendsData invite_friends_data = 1;
}
message ScheduledTransactionBlockerSupplement {
  string funding_source = 1;
}
message GovernmentIdBlockerSupplement {
  string main_text = 1;
  string confirmation_main_text = 2;
}
message BlockersSupplement {
  NameBlockerSupplement name = 1;
  ResolveMergeBlockerSupplement resolve_merge = 2;
  RatePlanBlockerSupplement rate_plan = 3;
  CardBlockerSupplement card = 4;
  ConfirmBlockerSupplement confirm = 5;
  EmailBlockerSupplement email = 6;
  AddressBlockerSupplement address = 7;
  PasscodeVerificationBlockerSupplement passcode_verification = 8;
  InstrumentVerificationBlockerSupplement instrument_verification = 9;
  EmailVerificationBlockerSupplement email_verification = 10;
  PhoneVerificationBlockerSupplement phone_verification = 11;
  PasscodeCreationBlockerSupplement passcode_creation = 12;
  IdentityVerificationBlockerSupplement identity_verification = 13;
  CardPasscodeAndExpirationBlockerSupplement passcode_and_expiration = 14;
  SelectionBlockerSupplement selection = 15;
  FileBlockerSupplement file_ = 17;
  RegionBlockerSupplement region = 18;
  PhoneNumberBlockerSupplement phone_number = 19;
  ContactVerificationBlockerSupplement contact_verification = 20;
  CashWaitingBlockerSupplement cash_waiting = 21;
  InviteFriendsBlockerSupplement invite_friends = 22;
  ScheduledTransactionBlockerSupplement scheduled_transaction = 23;
  GovernmentIdBlockerSupplement government_id = 27;
}
message BlockerDescriptorTheme {
  Color accent_color = 1;
}
message BlockerDescriptor {
  string id = 1;
  Blockers blocker = 2;
  BlockersSupplement supplement = 3;
  bool skippable = 4;
  BlockerDescriptorTheme theme = 6;
  BlockerAction dismiss_action = 7;
  bool remote_skip = 8;
}
enum ScenarioInitiatorType {
  option allow_alias = true;
  EXTERNAL = 1;
  IN_APP_SCANNER = 2;
  CARD_TAB_ACTIVATION_FLOW_SCANNER = 3;
}

message TouchSignalPointerListTouchSignalPointer {
  float x = 1;
  float y = 2;
  float pressure = 3;
  float size = 4;
  int32 tool_type = 5;
  float touch_major = 6;
  float touch_minor = 7;
  float tool_major = 8;
  float tool_minor = 9;
  float orientation = 10;
}
message TouchSignalPointerList {
  repeated TouchSignalPointerListTouchSignalPointer pointers = 1;
}
message TouchSignalEvent {
  int64 time = 1;
  int32 device_id = 2;
  int32 action_value = 3;
  int32 edge_flag = 4;
  int32 meta_state = 5;
  int32 flags = 6;
  int32 button_states = 7;
  repeated TouchSignalPointerList pointers = 8;
}
message SignalsContext {
  repeated TouchSignalEvent touch_events = 1;
  bool phoneCallActive = 2;
  bool screenCaptured = 3;
}

message RequestContext {
  RetryContext retry_context = 1;
  string oldest_sync_token = 2;
  string promotion_token = 4;
  string profile_token = 5;
  string transfer_token = 6;
  repeated BlockerDescriptor skipped_blockers = 7;
  repeated string payment_tokens = 8;
  string blocker_descriptor_id = 9;
  SignalsContext signals_context = 10;
  repeated bytes all_known_ranges = 11;
  bool is_protocol_change_safe = 13;
  ScenarioInitiatorType scenario_initiator_type = 14;
  string scenario_initiator_details = 15;
}
message SetNotificationPreferenceRequest {
  string app_token = 1;
  string session_token = 2;
  NotificationPreference notification_preference = 3;
  RequestContext request_context = 4;
}
message ActivateDigitalWalletRequestDigitalWalletCardData {
  string fpan_id = 1;
  string fpan_last_four = 2;
  string dpan_id = 3;
  string dpan_last_four = 4;
  string issued_card_token = 5;
}
message ActivateDigitalWalletRequest {
  RequestContext request_context = 1;
  string issued_card_token = 2;
  string pan_reference_id = 3;
  repeated ActivateDigitalWalletRequestDigitalWalletCardData digital_wallet_cards = 4;
}
message AddOrUpdateRewardRequest {
  string replace_selected_reward_token = 1;
  string reward_token = 2;
  RequestContext request_context = 3;
}
enum ReactionType {
  option allow_alias = true;
  EMOJI = 0;
}
message Reaction {
  ReactionType type = 1;
  string data_ = 2;
  int64 created_at = 3;
  string customer_token = 4;
}
message AddReactionRequest {
  RequestContext request_context = 1;
  Reaction reaction = 2;
}
message ApplyRewardCodeRequest {
  string code = 1;
  RequestContext request_context = 2;
}
message ApproveCashAppPayRequest {
  RequestContext request_context = 1;
  string request_auth_flow_triggers_mobile_url = 2;
}
message CancelPaymentRequest {
  string payment_token = 3;
  RequestContext request_context = 4;
}
message CheckDepositRequest {
  bytes front_of_check_bytes = 1;
  bytes back_of_check_bytes = 2;
  Money amount = 3;
  RequestContext request_context = 4;
}
message CheckRewardCodeRequest {
  string code = 1;
}
message CheckVersionRequest {}
message InstrumentSelection {
  string instrument_token = 1;
  Money accepted_fee_amount = 2;
}
message ClaimByPaymentTokenRequest {
  string payment_token = 3;
  RequestContext request_context = 4;
  InstrumentSelection instrument_selection = 5;
}
message ClearProfilePhotoRequest {}
enum DigitalWalletTokenIssuer {
  option allow_alias = true;
  APPLE_PAY = 1;
  ANDROID_PAY = 2;
  UNKNOWN_ISSUER = 3;
}
enum DigitalWalletTokenProvisioningCompletionDataProvisioningResult {
  option allow_alias = true;
  SUCCESS = 1;
  USER_CANCELED = 2;
  UNKNOWN_ERROR = 3;
  INVALID_DATA_ERROR = 4;
  UNSUPPORTED_VERSION_ERROR = 5;
  INVALID_SIGNATURE = 6;
  NOT_ENTITLED_ERROR = 7;
  ACTIVATION_FAILED = 8;
  PARTIAL_ACTIVATION = 9;
  NO_ACTIVE_WALLET = 10;
  TOKEN_NOT_FOUND = 11;
  INVALID_TOKEN_STATE = 12;
  ATTESTATION_ERROR = 13;
  TAP_AND_PAY_UNAVAILABLE = 14;
}
message DigitalWalletTokenProvisioningCompletionData {
  DigitalWalletTokenIssuer digital_wallet_issuer = 1;
  DigitalWalletTokenProvisioningCompletionDataProvisioningResult provisioning_result = 2;
}
message CompleteDigitalWalletTokenProvisioningRequest {
  RequestContext request_context = 1;
  DigitalWalletTokenProvisioningCompletionData completion_request = 2;
}
message CompleteScenarioRequest {
  repeated string payment_tokens = 1;
  string transfer_token = 2;
  RequestContext request_context = 3;
}
message ConfirmDisclosureRequest {
  RequestContext request_context = 1;
}
message ConfirmPasscodeRequest {
  string passcode = 4;
  repeated string payment_tokens = 5;
  string passcode_token = 6;
  InstrumentSelection instrument_selection = 7;
  string transfer_token = 8;
  RequestContext request_context = 9;
}
message ConfirmPaymentRequest {
  string payment_token = 3;
  InstrumentSelection instrument_selection = 4;
  repeated string payment_tokens = 5;
  RequestContext request_context = 6;
}
message EndFlowRequest {
  RequestContext request_context = 1;
  string action_id = 2;
}
enum ExecuteContractRequestCustomerPreferredDisplayCurrency {
  option allow_alias = true;
  SAME_AS_SOURCE = 0;
  SAME_AS_TARGET = 1;
}
enum RecurringScheduleFrequency {
  option allow_alias = true;
  EVERY_WEEK = 1;
  EVERY_TWO_WEEKS = 2;
  EVERY_MONTH = 3;
  EVERY_DAY = 4;
}
message RecurringSchedule {
  RecurringScheduleFrequency frequency = 1;
  repeated int32 days_of_period = 2;
  string timezone = 3;
  int32 time_of_day = 4;
}
message CustomOrder {
  string period_token = 1;
  Money original_share_price = 2;
  Money target_share_price = 3;
}
message ExecuteContractRequest {
  string contract_token = 1;
  string source_token = 2;
  string target_token = 3;
  RequestContext request_context = 4;
  string passcode_token = 5;
  Money source_amount = 6;
  Money target_amount = 7;
  ExecuteContractRequestCustomerPreferredDisplayCurrency customer_preferred_display_currency = 8;
  RecurringSchedule recurring_schedule = 9;
  CustomOrder custom_order = 10;
}
message FindCustomersRequest {
  string search_text = 3;
}
message FinishInstantPayAutoAdvanceRequest {
  RequestContext request_context = 1;
  bool requested_to_be_notified = 2;
}
message FinishInstantPayDirectDepositSwitchRequest {
  RequestContext request_context = 1;
}
message PinwheelLinkOnLoginResponse {
  string account_id = 1;
  string platform_id = 2;
}
message PinwheelLinkError {
  string type = 1;
  string code = 2;
  string message = 3;
  bool pending_retry = 4;
}
message PinwheelLinkOnExitResponse {
  PinwheelLinkError error = 1;
}
message PinwheelLinkResultDirectDepositAmountParameters {
  float amount_value = 1;
  string amount_unit = 2;
}
message PinwheelLinkResult {
  string account_id = 1;
  string job = 2;
  PinwheelLinkResultDirectDepositAmountParameters direct_deposit_amount_parameters = 3;
  string platform_id = 4;
}
message PinwheelLinkOnSuccessResponse {
  PinwheelLinkResult result = 1;
}
message FinishPinwheelLinkRequest {
  RequestContext request_context = 1;
  string link_token = 2;
  PinwheelLinkOnLoginResponse on_login_response = 3;
  PinwheelLinkOnExitResponse on_exit_response = 4;
  PinwheelLinkOnSuccessResponse on_success_response = 5;
}
message FinishTutorialRequest {
  RequestContext request_context = 1;
}
message GetAppConfigRequest {}
message GetBoostConfigRequest {}
message GetCashtagStatusRequest {
  string cashtag_candidate = 3;
}
enum LimitedAction {
  option allow_alias = true;
  ADD_CASH = 1;
  BUY_CRYPTOCURRENCY = 2;
  SELL_CRYPTOCURRENCY = 3;
}
message GetEffectiveCustomerLimitsRequest {
  repeated LimitedAction limited_actions = 1;
}
message GetExchangeContractRequest {
  string source_currency_code = 1;
  string target_currency_code = 2;
  int64 source_cents = 3;
  int64 target_cents = 4;
  CustomOrder custom_order = 5;
}
message GetExchangeDataRequest {
  repeated string symbols = 1;
  CurrencyCode quote_currency_code = 2;
}
message GetFeatureFlagsRequest {}
enum FlowType {
  option allow_alias = true;
  ORDER_PIZZA_FLOW = 5;
  EXCEPTION_FLOW = 6;
  RECIPIENT_PAYMENT_FLOW = 7;
  REMOVE_BOOST = 8;
  SENDER_PAYMENT_FLOW = 9;
  ADD_BOOST = 10;
  ONBOARDING = 11;
  LOCK_ISSUED_CARD = 12;
  DISABLE_ISSUED_CARD = 13;
  CHANGE_PASSCODE = 14;
  ACTIVATE_PHYSICAL_CARD = 15;
  REPORT_CARD_LOST_OR_STOLEN = 16;
  CHANGE_CARD_DESIGN = 17;
  REQUEST_PHYSICAL_CARD = 18;
  IDENTITY_VERIFICATION = 19;
  AMEND_CARD_MAILING_ADDRESS = 20;
  LINK_PHONE_NUMBER = 21;
  LINK_EMAIL_ADDRESS = 22;
  HEAVY_CUSTOMER = 23;
  INITIATE_CRYPTO_PAYMENT = 24;
  THIRD_PARTY_AUTHORIZATION = 25;
  MOBILE_CHECK_DEPOSIT = 26;
  DISPUTE_CARD_TRANSACTION = 27;
  SET_JURISDICTION = 28;
  GET_DIRECT_DEPOSIT_FORM = 29;
  REPORT_LOST_CARD = 30;
  ACTIVATE_PHYSICAL_CARD_IN_POSTCARD = 31;
  PEERMENTS_SENDER_FLOW = 32;
  ENABLE_ISSUED_CARD = 33;
  DISABLE_ISSUED_CARD_IN_POSTCARD = 34;
  GET_EVENT_BASED_BOOST_DETAIL = 35;
  UNLOCK_ISSUED_CARD = 36;
  ACCEPT_CRYPTO_PAYMENT = 37;
  ACTIVATE_DIRECT_DEPOSIT_ACCOUNT = 38;
  UNLOCK_QR_CODE_BOOST = 39;
  FRANKLIN_INVEST_EQUITY_CUSTOMER_ONBOARDING = 40;
  DDA_DETAILS = 41;
  GOOGLE_PAY_PROVISIONING = 42;
  TRANSFER_FUNDS = 43;
  ACCEPT_INVEST_PAYMENT = 44;
  EDIT_PROFILE_BIO = 45;
  REPORT_PROFILE = 46;
  DECLINE_CRYPTO_PAYMENT = 47;
  SEND_INVEST_PAYMENT = 48;
  IDV_IDENTITY_VERIFICATION = 49;
  INVEST_EQUITY_TRADE = 50;
  DEPOSIT_PAPER_CASH = 51;
  GET_BANKING_INTERSTITIAL = 52;
  TRANSFER_FROM_BANKS = 53;
  CARD_EXPIRATION = 54;
  REQUEST_SPONSORSHIP = 55;
  APPROVE_SPONSORSHIP = 56;
  INITIATE_TAX_UPGRADE = 57;
  DEPOSIT_PAPER_CASH_CONFIRMATION = 58;
  ELECTRONIC_IDENTITY_VERIFICATION = 59;
  GET_INSTANT_PAYOUT = 60;
  UNLOCK_BANKING_DEPOSIT_OPTIONS = 61;
  INITIATE_CRYPTO_WITHDRAWAL = 62;
  CLOSE_ACCOUNT = 63;
  ENTER_QR_MARKETING_EVENT = 64;
  SET_OR_UPDATE_PASSWORD = 65;
  SET_OR_VERIFY_PASSWORD = 66;
  INITIATE_GLOBAL_PAYMENT = 67;
  INITIATE_CRYPTO_DEPOSIT_REVERSAL = 68;
  REQUIRE_NON_VOIP_PHONE_NUMBER = 69;
  INVEST_CRYPTO_CUSTOMER_ONBOARDING = 70;
  ACCEPT_TERMS_OF_SERVICE_AGREEMENT = 71;
  RECOVER_PASSWORD = 72;
  DIRECT_DEPOSIT_SWITCH_VIA_PAYROLL = 73;
  IDV_OR_SPONSORSHIP = 74;
  CARD_LSB_REORDER = 75;
  RESEND_SPONSORSHIP_REQUEST = 76;
  INITIATE_LIGHTNING_WITHDRAWAL = 77;
  NEW_TO_BOOST_INFORMATION = 78;
  LINK_PAYROLL_ACCOUNT = 79;
  SEND_PRINT_CHECK = 80;
  COLLECT_ADDRESS = 81;
  TOTP = 82;
  LOYALTY_ONBOARDING = 83;
  DIRECT_DEPOSIT_SWITCH_VIA_PAYROLL_CONFIRMATION = 84;
  REQUIRE_SECOND_FACTOR_VERIFICATION = 85;
  CRYPTO_INVEST_CURRENCY_EXCHANGE = 86;
  DD_SWITCH_UPSELL_CARD_ACTIVATED = 87;
  REVIEW_LOGIN = 88;
  CRYPTO_INVEST_ONBOARDING = 89;
  P2P_REPORT_SCAM = 90;
  REQUIREMENT_TEST_FLOW = 91;
  INITIATE_CASH_CARD_DISPUTE_CLAIM = 92;
  GRANTLY_MANAGED_GRANT = 93;
  CRYPTO_INVEST_CONFIGURE_PAYROLL = 94;
  ACCEPT_GIFT_CARD_PAYMENT = 95;
  CANCEL_INVEST_PAYMENT = 96;
  ROUND_UP_ONBOARDING = 97;
  CHANGE_ROUND_UP_DESTINATION = 98;
  INITIATE_BANK_ACCOUNT_LINKING = 99;
  POST_SIGN_IN = 100;
  SERVE_AND_VERIFY_CHALLENGE = 101;
  SET_OR_UPDATE_TRUSTED_CONTACT = 102;
  INITIATE_FIATLY_PAYMENT = 103;
  ACQUIRE_ALIAS = 104;
  INITIATE_DISPUTE_CLAIM = 105;
  FAMILY_ACCOUNT_STATE = 106;
  PROVISION_GOOGLE_PAY_IN_APP = 107;
  PAYMENT_FLOW = 108;
  PROVISION_APPLE_PAY = 109;
  INITIATE_P2P_PAYMENT_DISPUTE_CLAIM = 110;
  REMOVE_TRUSTED_CONTACT = 111;
  INITIATE_AFTERPAY_PAYMENT = 112;
  LINK_NEW_PAYMENT_CARD = 113;
  CONVERT_GIFT_CARD_TO_CASH = 114;
  NEON_EXAMPLE_GIFT_WRAP = 115;
  ENABLE_AND_UNMASK_ISSUED_CARD = 116;
  DIRECT_DEPOSIT_SWITCH_UPSELL = 117;
  GRADUATE_SPONSORSHIP = 118;
  VERIFY_PASSCODE_OR_ENABLE_SECURITY_LOCK = 119;
  VERIFY_PASSCODE_IF_SECURITY_LOCK_ENABLED = 120;
  CHANGE_AFTERPAY_PAYMENT_DATE = 121;
  CANCEL_PENDING_ROUND_UP_EXECUTION = 122;
  ADD_EMAIL_ALIAS = 123;
  ADD_SMS_ALIAS = 124;
  ENABLE_SECURITY_LOCk = 125;
  DISABLE_SECURITY_LOCK = 126;
  SET_PASSCODE = 127;
  SET_OR_UPDATE_PASSCODE = 128;
  RESET_PASSCODE = 129;
  ELIGIBILITY_RESOLUTION = 130;
  INIT_REMIT = 131;
  SEND_GIFT_CARD_PAYMENT = 132;
  EXEMPLAR_ORDER_PIZZA = 133;
  EXEMPLAR_ORDER_PIZZA_WITH_SURVEY = 134;
  EDIT_CUSTOMER_BIO = 135;
  INVEST_TEEN_REQUEST_AUTHORIZATION = 136;
  INVEST_SPONSOR_AUTHORIZATION_APPROVAL = 137;
  CONFIRM_VERIFIED_IDENTITY = 138;
  INITIATE_BITCOIN_WITHDRAWAL = 139;
  INITIATE_SPLIT = 140;
  PAY_BILL = 141;
  CUSTOMER_STRIKE_WARNING = 142;
  ENABLE_CRYPTO_WITHDRAWALS = 143;
  SUP_BNPL_CHECKOUT = 144;
  CREATE_OR_TOGGLE_PASSCODE = 145;
  INVEST_EQUITY_CUSTOMER_ONBOARDING_TRAMPOLINE = 146;
  INITIATE_OUTBOUND_PHONE_SUPPORT = 147;
  SOURCE_OF_FUNDS_EMPLOYMENT_TRAMPOLINE = 148;
  INVEST_WHERE_YOU_SHOP_ONBOARDING = 149;
  EXEMPLAR_ORDER_PIZZA_VIA_SUBFLOW = 150;
  EXEMPLAR_ORDER_PIZZA_WITH_IDV = 151;
  GET_NON_RECOURSE_PAYOUT = 152;
  SET_SAVINGS_GOAL = 153;
  SAVINGS_NUX = 154;
  WIRE_TRANSFER = 155;
  ORDER_TIGERS = 156;
  SUP_BNPL_CANCEL_CARD = 157;
  SUP_BNPL_UPDATE_CARD_AMOUNT = 158;
  IN_TRANSACTION_TOP_UP = 159;
  INVITE_FRIENDS = 160;
}
message GetFlowRequest {
  RequestContext request_context = 1;
  string initiation_data = 2;
  FlowType flow_type = 3;
}
enum HistoricalRange {
  option allow_alias = true;
  DAY = 1;
  WEEK = 2;
  MONTH = 3;
  YEAR = 4;
  ALL = 5;
}
message GetHistoricalExchangeDataRequest {
  HistoricalRange historical_range = 1;
  string base_currency_code = 2;
  string quote_currency_code = 3;
}
message GetIssuedCardRequest {
  string version_token = 1;
}
message GetLocationConfigRequest {}
message GetPaymentRequest {
  string payment_token = 1;
  RequestContext request_context = 2;
}
message GetPaymentRewardStatusRequest {
  repeated string payment_tokens = 1;
}
message GetProfileRequest {}
message GetRewardsRequest {}
message GetRewardStatusRequest {}
message GetScenarioPlanRequest {
  RequestContext request_context = 3;
}
message GetWebLoginConfigRequest {}
message InitiateCryptocurrencyTransferRequest {
  string balance_token = 1;
  string target_wallet_address = 2;
  Money amount = 3;
  string external_id = 4;
  string passcode_token = 5;
  RequestContext request_context = 6;
  string source_wallet_address = 7;
  string deposit_transaction_token = 9;
}
enum UiCustomerSelectionMethod {
  option allow_alias = true;
  NEARBY = 1;
  RECENT = 2;
  CONTACT = 3;
  SEARCH = 4;
  ACTIVITY = 5;
}
message UiCheckAddress {
  string token = 1;
  string address = 2;
}
enum BlockState {
  option allow_alias = true;
  NOT_BLOCKED = 1;
  BLOCKED = 2;
  NOT_APPLICABLE = 3;
}
message MerchantData {
  string category = 1;
  bool should_colorize_avatar = 2;
  bool should_fill_background = 4;
  string in_app_browser_shop_url = 9;
}
message InvestmentEntityData {
  string investment_entity_token = 1;
}
enum Region {
  option allow_alias = true;
  USA = 1;
  CAN = 2;
  GBR = 3;
  AUS = 4;
  ABW = 5;
  AFG = 6;
  AGO = 7;
  AIA = 8;
  ALA = 9;
  ALB = 10;
  AND = 11;
  ARE = 12;
  ARG = 13;
  ARM = 14;
  ASM = 15;
  ATA = 16;
  ATF = 17;
  ATG = 18;
  AUT = 19;
  AZE = 20;
  BDI = 21;
  BEL = 22;
  BEN = 23;
  BES = 24;
  BFA = 25;
  BGD = 26;
  BGR = 27;
  BHR = 28;
  BHS = 29;
  BIH = 30;
  BLM = 31;
  BLR = 32;
  BLZ = 33;
  BMU = 34;
  BOL = 35;
  BRA = 36;
  BRB = 37;
  BRN = 38;
  BTN = 39;
  BVT = 40;
  BWA = 41;
  CAF = 42;
  CCK = 43;
  CHE = 44;
  CHL = 45;
  CHN = 46;
  CIV = 47;
  CMR = 48;
  COD = 49;
  COG = 50;
  COK = 51;
  COL = 52;
  COM = 53;
  CPV = 54;
  CRI = 55;
  CUB = 56;
  CUW = 57;
  CXR = 58;
  CYM = 59;
  CYP = 60;
  CZE = 61;
  DEU = 62;
  DJI = 63;
  DMA = 64;
  DNK = 65;
  DOM = 66;
  DZA = 67;
  ECU = 68;
  EGY = 69;
  ERI = 70;
  ESH = 71;
  ESP = 72;
  EST = 73;
  ETH = 74;
  FIN = 75;
  FJI = 76;
  FLK = 77;
  FRA = 78;
  FRO = 79;
  FSM = 80;
  GAB = 81;
  GEO = 82;
  GGY = 83;
  GHA = 84;
  GIB = 85;
  GIN = 86;
  GLP = 87;
  GMB = 88;
  GNB = 89;
  GNQ = 90;
  GRC = 91;
  GRD = 92;
  GRL = 93;
  GTM = 94;
  GUF = 95;
  GUM = 96;
  GUY = 97;
  HKG = 98;
  HMD = 99;
  HND = 100;
  HRV = 101;
  HTI = 102;
  HUN = 103;
  IDN = 104;
  IMN = 105;
  IND = 106;
  IOT = 107;
  IRL = 108;
  IRN = 109;
  IRQ = 110;
  ISL = 111;
  ISR = 112;
  ITA = 113;
  JAM = 114;
  JEY = 115;
  JOR = 116;
  JPN = 117;
  KAZ = 118;
  KEN = 119;
  KGZ = 120;
  KHM = 121;
  KIR = 122;
  KNA = 123;
  KOR = 124;
  KWT = 125;
  LAO = 126;
  LBN = 127;
  LBR = 128;
  LBY = 129;
  LCA = 130;
  LIE = 131;
  LKA = 132;
  LSO = 133;
  LTU = 134;
  LUX = 135;
  LVA = 136;
  MAC = 137;
  MAF = 138;
  MAR = 139;
  MCO = 140;
  MDA = 141;
  MDG = 142;
  MDV = 143;
  MEX = 144;
  MHL = 145;
  MKD = 146;
  MLI = 147;
  MLT = 148;
  MMR = 149;
  MNE = 150;
  MNG = 151;
  MNP = 152;
  MOZ = 153;
  MRT = 154;
  MSR = 155;
  MTQ = 156;
  MUS = 157;
  MWI = 158;
  MYS = 159;
  MYT = 160;
  NAM = 161;
  NCL = 162;
  NER = 163;
  NFK = 164;
  NGA = 165;
  NIC = 166;
  NIU = 167;
  NLD = 168;
  NOR = 169;
  NPL = 170;
  NRU = 171;
  NZL = 172;
  OMN = 173;
  PAK = 174;
  PAN = 175;
  PCN = 176;
  PER = 177;
  PHL = 178;
  PLW = 179;
  PNG = 180;
  POL = 181;
  PRI = 182;
  PRK = 183;
  PRT = 184;
  PRY = 185;
  PSE = 186;
  PYF = 187;
  QAT = 188;
  REU = 189;
  ROU = 190;
  RUS = 191;
  RWA = 192;
  SAU = 193;
  SDN = 194;
  SEN = 195;
  SGP = 196;
  SGS = 197;
  SHN = 198;
  SJM = 199;
  SLB = 200;
  SLE = 201;
  SLV = 202;
  SMR = 203;
  SOM = 204;
  SPM = 205;
  SRB = 206;
  SSD = 207;
  STP = 208;
  SUR = 209;
  SVK = 210;
  SVN = 211;
  SWE = 212;
  SWZ = 213;
  SXM = 214;
  SYC = 215;
  SYR = 216;
  TCA = 217;
  TCD = 218;
  TGO = 219;
  THA = 220;
  TJK = 221;
  TKL = 222;
  TKM = 223;
  TLS = 224;
  TON = 225;
  TTO = 226;
  TUN = 227;
  TUR = 228;
  TUV = 229;
  TWN = 230;
  TZA = 231;
  UGA = 232;
  UKR = 233;
  UMI = 234;
  URY = 235;
  UZB = 236;
  VAT = 237;
  VCT = 238;
  VEN = 239;
  VGB = 240;
  VIR = 241;
  VNM = 242;
  VUT = 243;
  WLF = 244;
  WSM = 245;
  YEM = 246;
  ZAF = 247;
  ZMB = 248;
  ZWE = 249;
  XXL = 250;
  XTS = 251;
}
message UiCustomer {
  string id = 1;
  string email_address = 2;
  string full_name = 3;
  string sms_number = 4;
  string photo_url = 5;
  bool is_cash_customer = 6;
  bool can_accept_payments = 7;
  string cashtag = 8;
  bool is_nearby = 9;
  UiCustomerSelectionMethod selection_method = 10;
  bool is_business = 11;
  bool is_verified_account = 12;
  UiCheckAddress check_address = 13;
  int64 credit_card_fee_bps = 14;
  string render_data = 15;
  bool is_square = 16;
  BlockState block_state = 18;
  MerchantData merchant_data = 19;
  string threaded_customer_id = 20;
  string accent_color = 21;
  Country country_code = 22;
  InvestmentEntityData investment_entity_data = 23;
  Region region = 24;
  int64 customer_joined_on = 25;
  UiImage photo = 26;
  Color themed_accent_color = 27;
}
enum Orientation {
  option allow_alias = true;
  CASH = 1;
  BILL = 2;
}
message InitiatePaymentRequestCancelPaymentsData {
  bool cancel_for_all = 1;
  repeated UiCustomer cancel_for_getters = 2;
}
enum ScheduleRFC2445Frequency {
  option allow_alias = true;
  DAILY = 1;
  WEEKLY = 2;
  MONTHLY = 3;
  YEARLY = 4;
}
enum ScheduleRFC2445Day {
  option allow_alias = true;
  SU = 0;
  MO = 1;
  TU = 2;
  WE = 3;
  TH = 4;
  FR = 5;
  SA = 6;
}
message ScheduleRFC2445ByDay {
  int32 num = 1;
  ScheduleRFC2445Day day = 2;
}
message ScheduleRFC2445 {
  int64 start_date = 1;
  ScheduleRFC2445Frequency frequency = 2;
  int64 interval = 3;
  repeated ScheduleRFC2445ByDay by_day = 4;
  repeated int32 by_month_day = 5;
  string timezone = 6;
}
enum AppCreationActivity {
  option allow_alias = true;
  HOMESCREEN = 0;
  DEEPLINK = 1;
  IN_APP_SCANNER = 2;
  THREADED_PROFILE = 3;
  HOMESCREEN_SEARCH_BAR = 4;
  ACTIVITY_CUSTOMER_PROFILE = 5;
  PROFILE_DIRECTORY = 6;
}
message InvestPaymentData {
  string investment_entity_token = 1;
}
message GiftCardPaymentData {
  string gift_card_type_token = 1;
}
message InitiatePaymentRequest {
  string external_id = 3;
  repeated UiCustomer payment_getters = 4;
  Orientation orientation = 5;
  Money amount = 6;
  string note = 7;
  string passcode_token = 8;
  InstrumentSelection instrument_selection = 11;
  RequestContext request_context = 17;
  InitiatePaymentRequestCancelPaymentsData cancel_payments_data = 19;
  ScheduleRFC2445 schedule = 20;
  string referrer = 21;
  string launch_url = 22;
  AppCreationActivity app_creation_activity = 23;
  InvestPaymentData invest_payment_data = 24;
  string suggestion_id = 25;
  string exchange_rates_token = 26;
  GiftCardPaymentData gift_card_payment_data = 27;
}
message ClientSecurityContext {
  bytes client_public_key = 1;
  bytes device_check_token = 2;
}
message InitiateSessionRequest {
  bytes device_check_token = 1;
  string backup_tag = 2;
  ClientSecurityContext client_security_context = 3;
}
message InviteContactsRequest {
  repeated string email_addresses = 1;
  RequestContext request_context = 2;
}
message LinkBankAccountRequest {
  string routing_number = 1;
  string account_number = 2;
  repeated string payment_tokens = 3;
  string transfer_token = 4;
  RequestContext request_context = 5;
}
message CardScanResult {
  string pan = 1;
  string expiry_day = 2;
  string expiry_month = 3;
  string expiry_year = 4;
  string cvv = 5;
  string cardholder_name = 6;
  bytes scanned_image = 7;
  string encrypted_bouncer_payload = 8;
  string payload_version = 9;
  string postal_code = 10;
  bool mobile_is_card_valid = 11;
  string mobile_validation_failure_reason = 12;
}
message KeyedCard {
  string unencrypted_pan = 1;
  string expiration = 2;
  string security_code = 3;
  string postal_code = 4;
  string last_four = 5;
  InstrumentType instrument_type = 6;
  string cardholder_name = 7;
  CardScanResult bouncer_scan_result = 8;
}
message LinkCardRequest {
  KeyedCard card = 3;
  repeated string payment_tokens = 5;
  string ocr_context = 6;
  CashInstrumentType instrument_type = 7;
  string transfer_token = 8;
  RequestContext request_context = 9;
  bool linked_via_nfc = 10;
  string treatment = 11;
}
message OAuthResolveFlowRequest {
  RequestContext request_context = 1;
  OAuthConfigFlowType flow_type = 2;
  string url_contents = 3;
}
message PlaidLinkTokenCreateRequest {
  bool manual_ach_enabled = 1;
  ClientScenario client_scenario = 2;
  PlaidLinkingConfig plaid_linking_config = 3;
}
message DigitalWalletTokenProvisioningRequestDataApplePayRequest {
  repeated bytes certificates = 1;
  bytes nonce = 2;
  bytes nonce_signature = 3;
}
message DigitalWalletTokenProvisioningRequestData {
  DigitalWalletTokenIssuer digital_wallet_issuer = 1;
  DigitalWalletTokenProvisioningRequestDataApplePayRequest apple_pay_request = 2;
  DigitalWalletTokenProvisioningRequestDataGooglePayRequest google_pay_request = 3;
}
message ProvisionDigitalWalletTokenRequest {
  DigitalWalletTokenProvisioningRequestData provisioning_request = 1;
  RequestContext request_context = 2;
}
message RefreshSessionRequest {
  string backup_tag = 3;
}
message RefundPaymentRequest {
  string payment_token = 1;
  RequestContext request_context = 2;
}
message RegisterAppMessageActionRequest {
  string message_token = 1;
  string action_identifier = 2;
}
enum BuildType {
  option allow_alias = true;
  RELEASE = 0;
  BETA = 1;
  DOGFOOD = 2;
}
message RegisterDeviceRequest {
  string device_token = 3;
  BuildType build_type = 4;
  bool can_receive_user_visible_notifications = 5;
}
enum RegisterEmailRequestScenario {
  option allow_alias = true;
  ONBOARDING = 0;
  PROFILE = 1;
}
message DeviceLocationHeuristics {
  string language = 1;
  string country_code = 2;
  string carrier_name = 3;
  string carrier_country_code = 4;
  string time_zone = 5;
  repeated string installed_keyboards = 6;
}
message RegisterEmailRequest {
  string email_address = 3;
  RegisterEmailRequestScenario scenario = 4;
  repeated string payment_tokens = 5;
  bool existing_customer_only = 6;
  string enrollment_token = 7;
  RequestContext request_context = 8;
  DeviceLocationHeuristics device_location_heuristics = 9;
}
enum RegisterInvitationsRequestEnhancedAliasType {
  option allow_alias = true;
  SMS = 1;
  EMAIL = 2;
}
message RegisterInvitationsRequestEnhancedAlias {
  RegisterInvitationsRequestEnhancedAliasType type = 1;
  string hashed_alias = 2;
  string unhashed_alias = 3;
  InvitationConfigInvitationTreatment invitation_treatment = 4;
}
message RegisterInvitationsRequest {
  repeated string hashed_sms_numbers = 3;
  InvitationConfigInvitationTreatment invitation_treatment = 4;
  repeated string hashed_email_addresses = 5;
  bool invitation_message_modified = 6;
  repeated RegisterInvitationsRequestEnhancedAlias enhanced_aliases = 7;
}
enum SmsDeliveryMechanism {
  option allow_alias = true;
  SMS_TEXT = 1;
  VOICE = 2;
}
enum RegisterSmsRequestScenario {
  option allow_alias = true;
  ONBOARDING = 0;
  PROFILE = 1;
}
message RegisterSmsRequest {
  string sms_number = 2;
  SmsDeliveryMechanism verification_mechanism = 3;
  RegisterSmsRequestScenario scenario = 5;
  bool pre_filled_from_phone = 6;
  repeated string payment_tokens = 7;
  bool existing_customer_only = 8;
  RequestContext request_context = 9;
  DeviceLocationHeuristics device_location_heuristics = 10;
  string app_callback_token = 11;
  string account_id = 12;
}
message ReportAbuseRequest {
  bool block = 1;
  string customer_id = 2;
  string payment_token = 3;
  RequestContext request_context = 4;
}
message ReportDeeplinkRequest {
  string raw_url = 1;
  string referrer = 2;
}
message ResetBadgeRequest {
  string conversation_token = 3;
  repeated string payment_tokens = 4;
  repeated string entity_ids = 5;
}
message ResolveMergeRequest {
  bool confirm_merge = 3;
  RequestContext request_context = 4;
}
message SelectActivityRequest {
  RequestContext request_context = 1;
  string entity_id = 2;
}
message SelectOptionRequest {
  string action = 1;
  repeated string payment_tokens = 2;
  string transfer_token = 3;
  RequestContext request_context = 4;
}
message SelectSponsorsRequest {
  RequestContext request_context = 1;
  repeated UiCustomer sponsors = 2;
}
enum StatementType {
  option allow_alias = true;
  ACCOUNT_GENERAL_STATEMENT = 0;
}
message SendTaxFormEmailRequest {
  RequestContext request_context = 1;
  string file_key = 2;
  StatementType type = 3;
  int64 document_date = 4;
  string name = 5;
}
message SetAddressRequest {
  GlobalAddress postal_address = 1;
  repeated string payment_tokens = 2;
  string transfer_token = 3;
  bool validated = 4;
  RequestContext request_context = 5;
}
message SetAmountRequestAmountResult {
  Money amount = 1;
}
message SetAmountRequestPercentageResult {
  ScientificNumber percentage = 1;
}
message SetAmountRequest {
  RequestContext request_context = 1;
  SetAmountRequestAmountResult amount_result = 2;
  SetAmountRequestPercentageResult percentage_result = 3;
}
message SetAppMessagePreferenceRequest {
  bool notifications_enabled = 1;
  RequestContext request_context = 2;
}
enum BitcoinDisplayUnits {
  option allow_alias = true;
  BITCOIN = 1;
  SATOSHIS = 2;
}
message SetBitcoinDisplayPreferenceRequest {
  BitcoinDisplayUnits display_units = 1;
  RequestContext request_context = 2;
}
message SetCardCustomizationRequest {
  bytes image_bytes = 1;
  string mime_type = 2;
  TouchData touch_data = 4;
  RequestContext request_context = 5;
  string card_theme_token = 6;
  bool include_cashtag = 7;
  CardCustomizationDataCustomizationArea customization_area = 9;
}
message SetCashtagRequest {
  string cashtag = 3;
  RequestContext request_context = 4;
}
message SetCashtagUrlEnabledRequest {
  bool enabled = 3;
  RequestContext request_context = 4;
}
message SetCountryRequest {
  RequestContext request_context = 1;
  Country country_code = 2;
}
message SetFullNameRequest {
  string full_name = 3;
  repeated string payment_tokens = 4;
  string transfer_token = 5;
  RequestContext request_context = 6;
}
enum IncomingRequestPolicy {
  option allow_alias = true;
  ALLOW_ALL = 1;
  ALLOW_CONTACTS = 2;
  DENY_ALL = 3;
}
message SetIncomingRequestPolicyRequest {
  RequestContext request_context = 1;
  IncomingRequestPolicy incoming_request_policy = 2;
}
message SetOnboardingContextRequest {
  string onboarding_payload = 1;
}
message SetProfilePhotoRequest {
  bytes image_bytes = 3;
  string mime_type = 4;
  string image_data = 5;
}
message SetRatePlanRequest {
  RatePlan rate_plan = 3;
  bool commit = 4;
  repeated string payment_tokens = 5;
  string intended_usage = 6;
  RequestContext request_context = 7;
}
message SetRequirePasscodeConfirmationRequest {
  bool require_passcode_confirmation = 3;
  string passcode = 4;
  string passcode_token = 5;
  RequestContext request_context = 6;
}
message ScheduledTransactionPreference {
  bool enabled = 1;
  Money amount = 2;
  RecurringSchedule recurring_schedule = 3;
  ScheduledTransactionPreferenceType type = 4;
  int64 next_reload_at = 5;
  string investment_entity_token = 6;
}
message SetScheduledTransactionPreferenceRequest {
  RequestContext request_context = 1;
  ScheduledTransactionPreference scheduled_transaction_preference = 2;
}
message SetSignatureRequest {
  RequestContext request_context = 1;
  bytes image_bytes = 2;
  string mime_type = 3;
}
message SkipBlockerRequest {
  Blockers blockers = 1;
  RequestContext request_context = 2;
}
message SubmitFilesetRequest {
  RequestContext request_context = 1;
  string action_id = 2;
  repeated string file_tokens = 3;
}
message SubmitFormRequestElementResultAddressResult {
  GlobalAddress address = 1;
}
message SubmitFormRequestElementResultTextInputResult {
  repeated string input_field_values = 1;
}
message SubmitFormRequestElementResultOptionPickerResult {
  string option_id = 1;
}
message SubmitFormRequestElementResultCashtagResult {
  string cashtag = 1;
}
message SubmitFormRequestElementResultDateInputResult {
  int32 day = 1;
  int32 month = 2;
  int32 year = 3;
}
message SubmitFormRequestElementResultMoneyInputResult {
  Money amount = 1;
}
message SubmitFormRequestElementResultEmojiPickerResult {
  string selection = 1;
}
message SubmitFormRequestElementResult {
  string id = 1;
  SubmitFormRequestElementResultAddressResult address_result = 2;
  SubmitFormRequestElementResultTextInputResult text_input_result = 3;
  SubmitFormRequestElementResultOptionPickerResult option_picker_result = 4;
  SubmitFormRequestElementResultCashtagResult cashtag_result = 5;
  SubmitFormRequestElementResultDateInputResult date_input_result = 6;
  SubmitFormRequestElementResultMoneyInputResult money_input_result = 7;
  SubmitFormRequestElementResultEmojiPickerResult emoji_picker_result = 8;
}
message SubmitFormRequest {
  RequestContext request_context = 1;
  string action_id = 2;
  repeated SubmitFormRequestElementResult results = 3;
}
message SubmitPayrollProviderSelectionRequest {
  RequestContext request_context = 1;
  string query = 2;
  PayrollProvider selected_payroll_provider = 3;
  bool selected_fallback_result = 4;
}
message SyncContactsRequest {
  string sync_token = 3;
  repeated bytes add_hashed_aliases = 4;
  repeated bytes remove_hashed_aliases = 5;
}
message UnlinkBusinessRequest {
  RequestContext request_context = 1;
  string grant_id = 2;
}
message UnlockRewardRequest {
  string reward_token = 1;
  RequestContext request_context = 2;
}
message UnregisterAliasRequest {
  UiAlias alias = 3;
  RequestContext request_context = 4;
}
message UploadFileRequest {
  string file_data = 1;
  bytes file_bytes = 2;
  string mime_type = 3;
  FileCategory category = 4;
  repeated string payment_tokens = 5;
  string transfer_token = 6;
  RequestContext request_context = 7;
}
message VerifyContactsRequest {
  RequestContext request_context = 1;
  repeated bytes hashed_aliases = 2;
}
enum SafetyNetAttestationGoogleConnectionResult {
  option allow_alias = true;
  API_UNAVAILABLE = 0;
  CANCELED = 1;
  DEVELOPER_ERROR = 2;
  DRIVE_EXTERNAL_STORAGE_REQUIRED = 3;
  INTERNAL_ERROR = 4;
  INTERRUPTED = 5;
  INVALID_ACCOUNT = 6;
  LICENSE_CHECK_FAILED = 7;
  NETWORK_ERROR = 8;
  RESOLUTION_REQUIRED = 9;
  RESTRICTED_PROFILE = 10;
  SERVICE_DISABLED = 11;
  SERVICE_INVALID = 12;
  SERVICE_MISSING = 13;
  SERVICE_MISSING_PERMISSION = 14;
  SERVICE_UPDATING = 15;
  SERVICE_VERSION_UPDATE_REQUIRED = 16;
  SIGN_IN_FAILED = 17;
  SIGN_IN_REQUIRED = 18;
  SUCCESS = 19;
  TIMEOUT = 20;
}
enum SafetyNetAttestationStatus {
  option allow_alias = true;
  DO_NOT_USE = 0;
  FAILED = 1;
  COMPLETED = 2;
}
message SafetyNetAttestation {
  string nonce = 1;
  string jws_result = 2;
  SafetyNetAttestationGoogleConnectionResult play_service_status_code = 3;
  SafetyNetAttestationStatus status = 4;
}
message AppAttestAttestation {
  string payload = 1;
}
message VerifyDeviceRequest {
  string challengeToken = 1;
  int32 play_services_status_code = 3;
  repeated SafetyNetAttestation safety_net_attestation = 5;
  AppAttestAttestation app_attestation = 6;
}
message VerifyEmailRequest {
  string email_address = 3;
  string verification_code = 4;
  repeated string payment_tokens = 5;
  RequestContext request_context = 6;
  ClientSecurityContext client_security_context = 8;
}
message VerifyGovernmentIdRequest {
  repeated string payment_tokens = 1;
  string transfer_token = 2;
  bytes front_image_bytes = 3;
  bytes back_image_bytes = 4;
  string mime_type = 5;
  string pdf_417_text = 6;
  RequestContext request_context = 7;
  bool front_manually_captured = 8;
  bool back_manually_captured = 9;
  string treatment = 10;
}
message VerifyIdentityRequest {
  string name = 4;
  string birth_date = 5;
  string ssn_last_four = 6;
  repeated string payment_tokens = 7;
  string transfer_token = 8;
  string ssn = 9;
  RequestContext request_context = 10;
  GlobalAddress address = 11;
}
message VerifyInstrumentRequest {
  string unencrypted_pan = 1;
  string routing_number = 2;
  string account_number = 3;
  RequestContext request_context = 4;
}
message VerifyMagicLinkRequest {
  RequestContext request_context = 1;
  string verification_token = 2;
  bool customer_requested_deny_attempt = 3;
}
message VerifyPasscodeAndExpirationRequest {
  string passcode = 1;
  string expiration_date = 2;
  RequestContext request_context = 3;
}
message VerifyPasscodeRequest {
  string passcode = 3;
  string passcode_token = 5;
  RequestContext request_context = 6;
}
message VerifyQrCodeRequest {
  string qr_code_data = 1;
  RequestContext request_context = 2;
  bool missing_qr_code_to_locate_cvv = 3;
}
message VerifySmsRequest {
  string sms_number = 2;
  string sms_verification_code = 3;
  repeated string payment_tokens = 7;
  RequestContext request_context = 8;
  string account_id = 10;
  ClientSecurityContext client_security_context = 11;
}
message DigitalWalletTokenProvisioningRequestDataGooglePayRequest {
  string wallet_account_id = 1;
  string device_id = 2;
}
message InitiatePasscodeResetRequest {
  RequestContext request_context = 1;
}
message SetPasscodeRequest {
  string new_passcode = 1;
  string old_passcode = 2;
  string old_passcode_token = 3;
  string old_instrument_token = 4;
  repeated string payment_tokens = 5;
  string transfer_token = 6;
  RequestContext request_context = 7;
}
message ScannerTrigger {
  int32 min_edges = 1;
  bool face_detected = 2;
  bool barcode_detected = 3;
  int32 delay_ms = 4;
}
message DisabledTrigger {}
message Trigger {
  ScannerTrigger scanner_trigger = 1;
  DisabledTrigger disabled_trigger = 2;
}
message SyncEntitiesRequest {
  string newest_token = 1;
  string oldest_token = 2;
  repeated bytes all_known_ranges = 3;
  bool is_protocol_change_safe = 4;
  Trigger trigger = 5;
}
enum DepositPreference {
  option allow_alias = true;
  TRANSFER_IMMEDIATELY = 0;
  RETAIN_FUNDS_IN_CASH_BALANCE = 1;
  TRANSFER_INSTANTLY_WITH_FEE = 2;
  TRANSFER_SLOWLY_WITHOUT_FEE = 3;
  TRANSFER_SLOWLY_WITH_FEE = 4;
}
message TransferFundsRequest {
  string external_id = 1;
  Instrument source = 2;
  Instrument target = 3;
  Money amount = 4;
  string passcode = 5;
  string passcode_token = 6;
  DepositPreference deposit_preference = 7;
  Money accepted_fee_amount = 8;
  RequestContext request_context = 10;
  CurrencyCode pull_currency = 11;
  CurrencyCode push_currency = 12;
  string contract_token = 13;
}
message UnlinkInstrumentRequest {
  string instrument_token = 1;
  RequestContext request_context = 2;
}
message CancelInvestmentOrderRequest {
  RequestContext request_context = 1;
  string order_token = 2;
}
message GetCustomerInvestmentSettingsRequest {
  RequestContext request_context = 1;
}
message GetInvestmentStatementsRequest {
  StatementType type = 1;
  int64 before = 2;
}
enum OrderType {
  option allow_alias = true;
  MARKET = 1;
  MARKET_WHEN_TOUCHED = 2;
}
enum OrderSide {
  option allow_alias = true;
  BUY = 1;
  SELL = 2;
  SELL_ALL = 3;
}
message InitiateInvestmentOrderRequest {
  RequestContext request_context = 1;
  string investment_entity_token = 2;
  string instrument_token = 3;
  string idempotence_token = 4;
  string units = 5;
  Money amount = 6;
  OrderType order_type = 7;
  OrderSide side = 8;
  RecurringSchedule recurring_schedule = 9;
  CustomOrder custom_order = 10;
  string investment_incentive_token = 11;
}
enum UpdateInvestmentHoldingRequestAction {
  option allow_alias = true;
  FOLLOW = 1;
  UNFOLLOW = 2;
}
message UpdateInvestmentHoldingRequest {
  RequestContext request_context = 1;
  string investment_entity_token = 2;
  UpdateInvestmentHoldingRequestAction action = 3;
}
message CheckCreditLimitRequest {
  RequestContext request_context = 1;
}
message ClearCreditLineAlertRequest {
  RequestContext request_context = 1;
}
message ClearCreditLineBadgeRequest {
  RequestContext request_context = 1;
}
message ClearInstrumentBadgeRequest {
  RequestContext request_context = 1;
}
message GetLendingConfigRequest {}
message InitiateLoanPaymentRequest {
  RequestContext request_context = 1;
  string loan_token = 2;
  string idempotence_token = 3;
  Money payment_amount = 4;
  Money last_known_balance = 5;
  string loan_transaction_token = 6;
  string opaque_data = 7;
}
message InitiateLoanRequest {
  RequestContext request_context = 1;
  string credit_line_token = 2;
  string idempotence_token = 3;
  Money amount = 4;
}
message LendingConfigRoutingResolvedRequest {
  RequestContext request_context = 1;
}
message SkipLoanPaymentRequest {
  RequestContext request_context = 1;
  string loan_transaction_token = 2;
}
enum ResolvePersonaDidvBlockerRequestInquiryResponse {
  option allow_alias = true;
  ERROR = 1;
  CANCEL = 2;
  COMPLETE = 3;
}
message ResolvePersonaDidvBlockerRequest {
  RequestContext request_context = 1;
  ResolvePersonaDidvBlockerRequestInquiryResponse inquiry_response = 2;
  string inquiry_id = 3;
  string status = 4;
  string session_token = 5;
  string debug_message = 6;
}
message HandleThreeDomainSecureRedirectRequest {
  RequestContext request_context = 1;
  string redirect_url = 2;
  string transaction_type = 3;
  string transaction_id = 4;
  string security_code = 5;
}
message ThreeDomainSecureV2ActionSuccess {
  string action_details = 1;
  string security_code = 2;
}
message ThreeDomainSecureV2ActionError {
  string adyen_lib_error_type = 1;
  string adyen_lib_error_message = 2;
}
message HandleThreeDomainSecureV2ActionRequest {
  RequestContext request_context = 1;
  string action_details = 2;
  string transaction_type = 3;
  string transaction_id = 4;
  ThreeDomainSecureV2ActionSuccess success = 5;
  ThreeDomainSecureV2ActionError error = 6;
}
message AdvanceSupportFlowRequest {
  string current_node_token = 1;
  string selected_node_token = 2;
}
enum SupportContactType {
  option allow_alias = true;
  EMAIL = 1;
  CALLBACK = 2;
  TEXT = 3;
  CHAT = 4;
}
message CreateSupportCaseRequest {
  string current_node_token = 1;
  string entity_id = 2;
  SupportContactType contact_type = 3;
  string email_address = 4;
  string phone_number = 5;
  string message = 6;
  bool terms_accepted = 9;
}
message GetSupportContactStatusRequest {
  string current_node_token = 2;
}
message StartSupportFlowRequest {
  string node_token = 1;
  string entity_id = 2;
}
enum SetNotificationPreferenceResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  UNAUTHENTICATED = 2;
}
message ScenarioPlan {
  bool end_onboarding = 3;
  CashWaitingData cash_waiting_data = 4;
  InviteFriendsData invite_friends_data = 5;
  repeated BlockerDescriptor blocker_descriptors = 6;
  bool display_in_dialog = 7;
}
enum StatusResultIcon {
  option allow_alias = true;
  SUCCESS = 1;
  INSTANT = 2;
  BANK = 3;
  FAILURE = 4;
  ACTION_REQUIRED = 5;
  PENDING = 6;
  VERIFICATION_REQUIRED = 7;
  PACKAGE = 8;
  ACCOUNT_LOCKED = 9;
  NONE = 10;
}
enum StatusResultButtonButtonAction {
  option allow_alias = true;
  PAY_SCREEN = 1;
  LINK_CARD = 2;
  OPEN_URL = 3;
  VERIFY_IDENTITY = 4;
  INVITATION_SCREEN = 5;
  ADD_CASH = 6;
  COMPLETE_CLIENT_SCENARIO = 7;
  START_SUPPORT_FLOW = 8;
  PAY_WITH_CASH_REDIRECT = 9;
  BLOCKER_ACTION = 10;
}
message StatusResultButton {
  StatusResultButtonButtonAction action = 1;
  string text = 2;
  string url = 3;
  ClientScenario client_scenario = 4;
  string support_flow_node = 5;
  BlockerAction blocker_action = 6;
}
message AppMessageHeadline {
  string title_text = 1;
  string detail_text = 2;
}
message AppMessageToggle {
  AppMessageHeadline headline = 1;
  bool default_position = 2;
}
message AppMessageAction {
  string url_to_open = 1;
  string text = 2;
  Color text_color = 4;
}
message AppMessageToggleTemplate {
  string image_url = 1;
  AppMessageHeadline headline = 2;
  AppMessageToggle toggle = 3;
  AppMessageAction toggle_on_navigation_action = 4;
  AppMessageAction toggle_off_navigation_action = 5;
}
message AppMessageInAppPromoTemplate {
  AppMessageHeadline headline = 1;
  string image_url = 2;
  AppMessageAction primary_navigation_action = 3;
  AppMessageAction secondary_navigation_action = 4;
}
message AppMessagePayload {
  string message_token = 6;
  AppMessageToggleTemplate toggle = 12;
  AppMessageInAppPromoTemplate in_app_promo = 18;
  int32 increment_activity_badge_count_by = 19;
}
enum StatusResultAction {
  option allow_alias = true;
  SHOW_DIALOG = 1;
  INSTANT_REDIRECT = 2;
  START_SUPPORT_FLOW = 3;
  INSTANT_INTERNAL_REDIRECT = 4;
}
message StatusResultSupportAction {
  string support_flow_node = 1;
  string entity_id = 2;
}
message StatusResult {
  StatusResultIcon icon = 1;
  string text = 2;
  StatusResultButton primary_button = 3;
  StatusResultButton secondary_button = 4;
  string promo_text = 5;
  AppMessagePayload promo_payload = 6;
  StatusResultAction action = 7;
  string redirect_uri = 8;
  bool show_confetti = 9;
  StatusResultSupportAction support_action = 10;
}
enum Role {
  option allow_alias = true;
  SENDER = 1;
  RECIPIENT = 2;
}
enum PaymentState {
  option allow_alias = true;
  PAYMENT_NOT_KNOWN = 1;
  SCHEDULED = 2;
  WAITING_ON_SENDER = 3;
  WAITING_ON_RECIPIENT = 4;
  PROCESSING = 5;
  COMPLETE = 6;
  WAITING_ON_RISK = 7;
  RECIPIENT_EMAIL_BOUNCED = 8;
  RECIPIENT_REJECTED = 9;
  SENDER_CANCELED = 10;
  EXPIRED = 11;
  BLOCKED_BY_RISK = 12;
  FAILED = 13;
  WAITING_ON_EXTERNAL = 14;
}
enum PaymentHistoryButtonButtonAction {
  option allow_alias = true;
  CONFIRM = 1;
  CANCEL = 2;
  PASSCODE_CONFIRMATION = 3;
  LINK_CARD = 4;
  OPEN_URL = 5;
  CALL_NUMBER = 6;
  VERIFY_IDENTITY = 7;
  REPORT_PROBLEM = 8;
  COMPLETE_SCENARIO_PLAN = 9;
  REFUND = 10;
  REPORT_ABUSE = 11;
  UNREPORT_ABUSE = 12;
  COMPLETE_CLIENT_SCENARIO = 13;
  SHOW_MORE_INFO_SHEET = 14;
  CHECK_STATUS = 15;
  ADD_REACTION = 16;
  BITCOIN_DEPOSIT_REVERSAL = 17;
  START_SUPPORT_FLOW = 18;
  PAY_WITH_CASH_REDIRECT = 19;
  CANCEL_INVESTMENT_ORDER = 20;
  MAKE_LOAN_PAYMENT = 21;
  SKIP_LOAN_PAYMENT = 22;
  CANCEL_RECURRING_PURCHASE = 23;
  SHOW_SUPPORT_OPTIONS = 24;
  SHOW_PAYMENT_DETAIL_VIEW = 25;
  ACCEPT_CRYPTO_PAYMENT = 26;
  ACCEPT_INVEST_PAYMENT = 27;
  VIEW_PROFILE = 28;
  CANCEL_CRYPTO_ORDER = 29;
  SHOW_BNPL_LOAN = 30;
}
enum PaymentHistoryButtonIcon {
  option allow_alias = true;
  CHECKMARK = 1;
  INSTANT = 2;
  HEART_OUTLINE = 3;
  SHIELD = 4;
  DOUBLE_CHEVRON = 5;
  BLOCKED = 6;
}
enum PaymentHistoryDataUiStatusTreatment {
  option allow_alias = true;
  CUSTOMER = 1;
  FAILED = 2;
  PENDING = 3;
  COMPLETED = 4;
  SECURITY = 5;
  NONE = 6;
  GREY = 7;
}
message PaymentHistoryButton {
  string text = 1;
  PaymentHistoryButtonButtonAction action = 2;
  string url = 3;
  string tel_number = 4;
  ClientScenario client_scenario = 5;
  PaymentHistoryButtonIcon icon = 6;
  PaymentHistoryDataUiStatusTreatment treatment = 7;
  string support_flow_node = 8;
  RecurringScheduleFrequency recurring_frequency = 9;
  string opaque_data = 10;
}
enum PaymentHistoryDataActivitySection {
  option allow_alias = true;
  OUTSTANDING = 1;
  COMPLETE = 2;
}
enum PaymentHistoryDataDetailRowDetailRowTreatment {
  option allow_alias = true;
  NORMAL = 1;
  STRIKETHROUGH = 2;
  LABEL_INDENT = 3;
  BOLD = 4;
  TINT = 5;
  SEPARATOR = 6;
}
message PaymentHistoryDataDetailRow {
  string label = 1;
  string value_ = 2;
  PaymentHistoryDataDetailRowDetailRowTreatment treatment = 3;
}
enum PaymentHistoryDataStatusTreatment {
  option allow_alias = true;
  NORMAL = 1;
  SUCCESS = 2;
  FAILURE = 3;
}
enum PaymentHistoryDataIcon {
  option allow_alias = true;
  BUSINESS = 1;
  NOTE = 2;
  CARD = 3;
  ONLINE = 4;
  NO_SYMBOL = 5;
  ALERT = 6;
  RETURNED = 7;
  RECURRING = 8;
  DIRECT_DEPOSIT = 9;
  DIRECT_DEBIT = 10;
  SHIELD = 11;
  INVESTING = 12;
  CLOCK = 13;
  VERIFIED = 14;
  DOUBLE_CHEVRON = 15;
  ALERT_PROMINENT = 16;
  QR_CODE = 17;
  SHIELD_CHECKMARK = 18;
  IN_PROGRESS = 19;
  PAY_WITH_CASH = 20;
  LOGOMARK = 21;
  BORROW = 22;
}
message ScenarioPlanEntry {
  ClientScenario client_scenario = 1;
  ScenarioPlan scenario_plan = 2;
}
message ScenarioPlanMap {
  repeated ScenarioPlanEntry scenario_plans = 1;
}
enum PaymentHistoryDataInlineButtonTreatment {
  option allow_alias = true;
  PRIMARY = 1;
  ALTERNATE = 2;
  OPTIONAL = 3;
}
enum PaymentHistoryDataAmountTreatment {
  option allow_alias = true;
  STANDARD = 2;
  FADED = 3;
  STRIKETHROUGH = 4;
}
enum PaymentHistoryDataMoreInfoSheetHeaderIcon {
  option allow_alias = true;
  CHECKMARK = 1;
  ERROR = 2;
  INSTANT = 3;
  WAITING = 4;
  REPORTED = 5;
  SECURITY_SHIELD = 6;
  SKIPPED = 7;
  BLOCKED = 8;
  ALERT_FILLED = 9;
}
message PaymentHistoryDataDetailsViewContent {
  repeated string rows = 1;
}
message PaymentHistoryReactions {
  repeated Reaction available_reactions = 1;
  bool show_extended_picker = 2;
}
message Avatar {
  Image image = 1;
  Image badge = 2;
}
message PaymentHistoryDataSupportOptions {
  string header_text = 1;
  repeated PaymentHistoryButton buttons = 2;
}
enum PaymentHistoryDataOverlayIcon {
  option allow_alias = true;
  RECURRING_OVERLAY = 1;
  LOYALTY_OVERLAY = 2;
  LINKED_ACCOUNT = 3;
  LIGHTNING_BOLT = 4;
  ROUND_UP = 5;
  INVEST_WHERE_YOU_SHOP = 6;
}
message PaymentHistoryDataInfoModule {
  string title = 1;
  PaymentHistoryDataIcon title_icon = 2;
  string description = 3;
  string description_markdown = 4;
  PaymentHistoryButton button = 5;
}
enum PaymentHistoryDataIconOverlayShape {
  option allow_alias = true;
  CIRCULAR_SHAPE = 1;
  CARD_SHAPE = 2;
  CIRCULAR_BADGE_SHAPE = 3;
}
enum TimelineEventIcon {
  option allow_alias = true;
  NORMAL = 0;
  HIGHLIGHT = 1;
  ALERT = 2;
  COMPLETED = 3;
  SKIPPED = 4;
  MISSED = 5;
  HIGHLIGHT_COMPLETED = 6;
  FAILED = 7;
}
enum TimelineEventInlineTextFormat {
  option allow_alias = true;
  PRIMARY = 0;
  SECONDARY = 1;
}
message TimelineEvent {
  TimelineEventIcon icon = 1;
  string title = 2;
  string detail_text = 3;
  string inline_description_text = 4;
  TimelineEventInlineTextFormat inline_description_text_format = 5;
}
message Timeline {
  repeated TimelineEvent events = 1;
}
message PaymentHistoryDataStackedAvatars {
  repeated Image images = 1;
  int32 overflow_count = 2;
  Color overflow_accent_color = 3;
}
message PaymentHistoryDataAssociatedPaymentsOverride {
  string subtitle = 1;
}
message PaymentHistoryData {
  string title = 1;
  string short_description = 2;
  string long_description = 3;
  string square_message = 4;
  bool is_action_required = 5;
  bool is_outstanding_request = 6;
  PaymentHistoryButton primary_button = 7;
  PaymentHistoryButton secondary_button = 8;
  string notes = 9;
  repeated PaymentHistoryButton additional_buttons = 10;
  string response_title = 19;
  bool is_email_receipt_required = 20;
  ScenarioPlan scenario_plan = 21;
  RatePlan rate_plan = 22;
  int64 sort_priority = 23;
  string transaction_id = 24;
  string status_text = 25;
  string footer_text = 26;
  string headline = 27;
  string display_instrument = 28;
  PaymentHistoryDataActivitySection activity_section = 29;
  repeated PaymentHistoryDataDetailRow detail_rows = 30;
  string header_text = 31;
  PaymentHistoryDataStatusTreatment status_treatment = 32;
  string confirm_cancellation_text = 33;
  string subtitle = 34;
  repeated PaymentHistoryButton overflow_buttons = 35;
  PaymentHistoryButton inline_button = 36;
  PaymentHistoryDataIcon title_icon = 37;
  PaymentHistoryDataIcon subtitle_icon = 38;
  string support_description = 39;
  ScenarioPlanMap scenario_plan_map = 40;
  string threaded_title = 41;
  string threaded_subtitle = 42;
  PaymentHistoryDataInlineButtonTreatment inline_button_treatment = 43;
  string threaded_display_date = 44;
  PaymentHistoryDataAmountTreatment amount_treatment = 45;
  string detail_view_status_title = 46;
  string detail_view_status_subtitle = 47;
  repeated string detail_row_phrases = 48;
  string header_subtext = 50;
  string more_info_sheet_status_text = 51;
  string more_info_sheet_status_subtext = 52;
  PaymentHistoryDataMoreInfoSheetHeaderIcon more_info_sheet_header_icon = 53;
  PaymentHistoryDataDetailsViewContent details_view_content = 54;
  PaymentHistoryDataUiStatusTreatment more_info_sheet_header_icon_treatment = 55;
  string support_title = 56;
  string support_subtitle = 57;
  string support_short_title = 58;
  PaymentHistoryReactions reactions = 60;
  PaymentHistoryDataAmountTreatment amount_treatment_activity_list = 61;
  string amount_formatted_activity_list = 62;
  string preview_title = 63;
  Avatar avatar = 64;
  string amount_formatted = 65;
  string blockchain_transaction_id = 66;
  bool is_bitcoin_transaction = 67;
  PaymentHistoryDataSupportOptions support_options = 68;
  PaymentHistoryDataOverlayIcon avatar_overlay_icon = 69;
  PaymentHistoryDataInfoModule info_module = 70;
  string support_accessibility_label = 71;
  string url_to_open = 72;
  string avatar_url_to_open = 73;
  string avatar_overlay_icon_url = 74;
  string dark_theme_avatar_overlay_icon_url = 75;
  Color overlay_icon_background_color = 76;
  PaymentHistoryDataIcon threaded_subtitle_icon = 77;
  PaymentHistoryDataIconOverlayShape icon_overlay_shape = 78;
  Timeline timeline = 79;
  PaymentHistoryDataStackedAvatars stacked_avatars = 80;
  bool show_chevron = 81;
  Color subtitle_color = 82;
  PaymentHistoryDataAssociatedPaymentsOverride associated_payment_options = 83;
}
enum ScenarioPlanSource {
  option allow_alias = true;
  NONE = 1;
  P2P = 2;
}
enum RollupType {
  option allow_alias = true;
  REFERRAL = 1;
  INVESTMENT_ORDER = 2;
  CARD_TRANSACTION = 3;
}
enum PaymentCreationMechanism {
  option allow_alias = true;
  EMAIL = 0;
  RPC = 1;
  TPP = 2;
  APP = 3;
  TRY_IT_NOW = 4;
  REFERRAL_BOUNTY = 5;
  BUSINESS_REFERRAL_BOUNTY = 6;
  WELCOME_BONUS = 7;
  REWARD = 8;
  WEB_SIGNUP = 9;
  WEB = 10;
  CASHBOARD = 11;
  RECURRING_PAYMENTS = 12;
  REIMBURSEMENT = 13;
  BANKSY = 14;
  CLAIMABLE = 15;
  IMESSAGE = 16;
  PAY_WITH_CASH = 17;
  ISSUED_CARD = 18;
  CASH_ADVANCE = 19;
  DDA_ACH = 20;
  CLAWBACK = 21;
  P2P_BANKLIN = 22;
  DISCOUNT = 23;
  PURCHASE = 24;
  PAYROLL = 25;
  YELLOW = 26;
  KEY_BANK = 27;
  ROBINHOOD = 28;
  BUTTERCOIN = 29;
  LEDGER = 30;
  THX = 31;
  CAVIAR = 32;
  CAVIAR_RESTAURANT = 33;
  CAVIAR_COURIER = 34;
  CAVIAR_DINER = 35;
  SQCAPITAL = 36;
  SQPAYROLL = 37;
  SQPAYROLL_TO_EMPLOYER = 38;
  SQPAYROLL_TO_EMPLOYEE = 39;
  CASHBOT = 40;
  PAYMENT_SCHEDULER = 41;
  INSTRUMENT_VERIFICATION = 42;
  QR_CODE = 43;
  NFC_TAG = 44;
  COLLEGE_BONUS = 45;
  INVEST_TRADE_ERROR = 46;
  MARKETING = 47;
  STOCK_PURCHASE = 48;
  ASYNC_CASH_OUT = 49;
  PLAID_UPSELL_BONUS = 50;
  LOAN_PAYMENT = 51;
  CROSS_BORDER_CASH_IN = 52;
  BITCOIN_PURCHASE = 53;
  CHECK = 54;
  SUPPORT_BALANCE_TRANSFER = 55;
  INVEST_P2P = 56;
  MONEY_MOVER_TEST = 57;
  PHYSICAL_CASH = 58;
  BNPL = 59;
  P2P_CORE = 60;
  INSTANT_PAYCHECK = 61;
  MONETA = 62;
  WIRE_TRANSFER = 63;
  LIGHTNING_TRANSFER = 64;
  CASH_ME_OUTSIDE = 65;
}
enum InvestmentOrderType {
  option allow_alias = true;
  STANDARD_ORDER = 1;
  AUTO_INVEST = 2;
  CUSTOM_ORDER = 3;
  ROUNDUP_ORDER = 4;
}
message RollupData {
  InvestmentOrderType investment_order_type = 1;
}
message UiPayment {
  string token = 1;
  Orientation orientation = 2;
  Role role = 3;
  string sender_id = 4;
  string recipient_id = 5;
  PaymentState state = 6;
  Money amount = 7;
  int64 created_at = 8;
  int64 updated_at = 9;
  int64 captured_at = 10;
  int64 refunded_at = 11;
  int64 paid_out_at = 12;
  PaymentHistoryData history_data = 14;
  string render_data = 16;
  Money sender_amount = 17;
  Money recipient_amount = 18;
  string note = 19;
  int64 display_date = 20;
  int64 outstanding_until = 21;
  string external_id = 23;
  Money boost_amount = 25;
  int64 scheduled_for = 26;
  string payment_schedule_token = 28;
  ScenarioPlanSource scenario_plan_source = 29;
  int64 hidden_until = 30;
  RollupType rollup_type = 32;
  Region customer_region = 33;
  PaymentCreationMechanism creation_mechanism = 34;
  RollupData rollup_data = 35;
  string payment_type = 36;
  int64 avatar_overlay_size = 37;
  string gifted_investment_entity_token = 38;
  string lending_loan_token = 39;
  string associated_payment_token = 41;
}
enum TransferState {
  option allow_alias = true;
  FAILED = 1;
  PROCESSING = 2;
  COMPLETE = 3;
  WAITING_ON_CUSTOMER = 4;
}
message Transfer {
  string token = 1;
  Instrument source = 2;
  Instrument target = 3;
  TransferState state = 4;
  Money amount = 5;
  int64 created_at = 6;
  int64 completed_at = 7;
  int64 failed_at = 8;
  Money push_amount = 9;
}
enum PhysicalCardDataState {
  option allow_alias = true;
  REQUESTED = 1;
  READY_TO_ACTIVATE = 2;
  ACTIVATED = 3;
}
message PhysicalCardData {
  PhysicalCardDataState physical_card_state = 1;
}
enum IssuedCardIssuer {
  option allow_alias = true;
  SHAZAM = 1;
  MARQETA = 2;
  VISA_DPS = 3;
}
message IssuedCard {
  string token = 1;
  string pan = 2;
  string expiration = 3;
  string security_code = 4;
  string last_four = 5;
  InstrumentType instrument_type = 6;
  string cardholder_name = 7;
  bool enabled = 8;
  bool virtual = 9;
  bool locked = 10;
  string apple_pay_identifier = 11;
  string apple_pay_description = 12;
  string version_token = 13;
  bool activated = 14;
  PhysicalCardData physical_card_data = 15;
  CardTheme card_theme = 17;
  bool emergency = 18;
  bool sponsored = 19;
  string card_status_text = 20;
  bool dimmed = 21;
  bool sponsor_locked = 22;
  IssuedCardIssuer issuer = 23;
  int64 issued_at = 24;
  TouchData touch_data = 25;
}
enum SyncEntityType {
  option allow_alias = true;
  PAYMENT = 1;
  CUSTOMER = 2;
  TRANSFER = 3;
  TRANSACTION = 4;
  MERCHANT = 5;
  LOYALTY_ACCOUNT = 6;
  REWARD_SELECTION = 7;
  LOYALTY_PROGRAM = 8;
  INVESTMENT_HOLDING = 9;
  INVESTMENT_ENTITY = 10;
  RECEIPT_ENTITY = 11;
  SYNC_VALUE = 12;
  CREDIT_LINE = 13;
  LOAN = 14;
  LOAN_TRANSACTION = 15;
  LOAN_ACTIVITY = 16;
  INVITATION = 17;
  RECURRING_PREFERENCES = 18;
  INVESTMENT_CATEGORY = 19;
  INVESTMENT_FILTER_GROUP = 20;
  INVESTMENT_ENTITY_RANKING = 21;
  INVESTMENT_INCENTIVE = 22;
  CHECK_DEPOSIT_RECEIPT_ENTITY = 23;
  INVEST_DEFAULT_NOTIFICATION_SETTINGS = 24;
  CASH_HOUSE_SCREEN = 25;
  SPONSORED_ACCOUNT = 26;
  DOCUMENT_CATEGORY_ENTITY = 27;
  DOCUMENT_ENTITY = 28;
  BUSINESS_GRANT = 29;
  GIFT_CARD = 30;
  NEW_DEVICE_LOGIN = 31;
  CRYPTO_PAYROLL_PREFERENCE = 32;
  ACCOUNT_STATEMENT = 33;
}
message SyncPayment {
  UiPayment payment = 1;
  bool is_badged = 3;
}
message SyncCustomer {
  UiCustomer customer = 1;
}
message UiLoyaltyAccount {
  string id = 1;
  string phone_number = 3;
  int64 points_earned = 4;
  int64 last_time_visited = 5;
  string account_status_url = 6;
  string loyalty_program_id = 7;
}
message SyncLoyaltyAccount {
  UiLoyaltyAccount loyalty_account = 1;
}
enum RewardSelectionUnlockInProgressProgressBarType {
  option allow_alias = true;
  DISCRETE = 1;
  CONTINUOUS = 2;
}
message RewardSelectionUnlockInProgressProgressBar {
  int32 current = 1;
  int32 target = 2;
  RewardSelectionUnlockInProgressProgressBarType type = 3;
}
message RewardSelectionUnlockInProgress {
  string progress_text = 4;
  RewardSelectionUnlockInProgressProgressBar progress_bar = 5;
  string styled_progress_text = 6;
}
message RewardSelectionActive {}
message RewardSelectionDisabled {}
message RewardSelection {
  string reward_token = 1;
  int64 version = 2;
  RewardSelectionUnlockInProgress unlock_in_progress = 3;
  RewardSelectionActive active = 4;
  RewardSelectionDisabled disabled = 5;
  string token = 6;
}
message SyncRewardSelection {
  RewardSelection reward_selection = 1;
}
message PointsReward {
  int64 points_required = 1;
  string display_name = 2;
  string token = 3;
  Money max_discount = 4;
}
message ProgramRewards {
  repeated PointsReward points_rewards = 1;
}
message LoyaltyUnit {
  string zero = 1;
  string one = 2;
  string many = 3;
}
message LoyaltyProgram {
  string id = 1;
  string cash_merchant_token = 7;
  ProgramRewards program_rewards = 8;
  LoyaltyUnit loyalty_unit = 9;
  string render_json = 10;
  string program_description = 11;
  string deep_link_token = 12;
}
message UiLoyaltyProgram {
  LoyaltyProgram loyalty_program = 1;
}
message SyncLoyaltyProgram {
  UiLoyaltyProgram loyalty_program = 1;
}
enum SyncInvestmentHoldingInvestmentHoldingState {
  option allow_alias = true;
  OWNED = 1;
  FOLLOWED = 2;
  UNFOLLOWED = 3;
}
message ScheduledReloadData {
  ScheduledTransactionPreference scheduled_reload_preference = 1;
  int64 next_reload_at = 2;
  string funding_source = 3;
  bool supported = 4;
  Money min_amount = 5;
}
message SyncInvestmentHoldingDailyGainParams {
  int64 valid_until_seconds = 1;
  string units_at_market_open = 2;
  Money day_cash_value_change = 3;
}
message SyncInvestmentHolding {
  string investment_entity_token = 1;
  string units = 2;
  Money active_invested_amount = 3;
  SyncInvestmentHoldingInvestmentHoldingState state = 4;
  ScheduledReloadData scheduled_buy_data = 5;
  SyncInvestmentHoldingDailyGainParams daily_gain_params = 6;
  Money average_cost = 7;
}
enum InvestmentEntityType {
  option allow_alias = true;
  CURRENCY = 1;
  STOCK = 2;
  ETF = 3;
}
enum InvestmentEntityStatus {
  option allow_alias = true;
  ACTIVE = 1;
  INACTIVE = 2;
}
message SyncInvestmentEntityDetailRow {
  string title = 1;
  string detail_text = 2;
}
enum SyncInvestmentEntityReleaseStage {
  option allow_alias = true;
  PREVIEW_FOR_IPO = 1;
  RELEASED = 2;
}
message SyncInvestmentEntity {
  string token = 1;
  string symbol = 2;
  string display_name = 3;
  InvestmentEntityType type = 4;
  string icon_url = 5;
  int64 outstanding_shares = 6;
  InvestmentEntityStatus status = 7;
  string color = 8;
  string about_text = 9;
  repeated SyncInvestmentEntityDetailRow about_detail_rows = 10;
  bool delisted = 11;
  Color entity_color = 12;
  UiImage icon = 13;
  Color themed_color = 14;
  SyncInvestmentEntityReleaseStage release_stage = 15;
}
message UiItemizedReceipt {
  string token = 1;
  string transaction_token = 2;
  string render_json = 4;
}
message SyncReceiptEntity {
  UiItemizedReceipt receipt = 1;
}
enum SyncValueType {
  option allow_alias = true;
  INSTRUMENT = 2;
  EQUITIES_PURCHASE_ATM_PICKER = 3;
  BITCOIN_PURCHASE_ATM_PICKER = 4;
  BALANCE_SNAPSHOT = 5;
  DDA = 6;
  ACCESS = 7;
  ADDRESS = 8;
  STATUS_AND_LIMITS = 9;
  APP_MESSAGES = 10;
  CORE_CUSTOMER = 11;
  EXPERIMENTS = 12;
  ISSUED_CARD = 13;
  MARKETING = 14;
  P2P_SETTINGS = 15;
  SCHEDULED_PAYMENTS = 16;
  TAX = 17;
  PUBLIC_PROFILE = 18;
  PROFILE_ALIAS = 19;
  LOYALTY_PROFILE = 20;
  CHECK_DEPOSIT_PROFILE = 21;
  INVESTMENT_NOTIFICATION_SETTINGS = 22;
  PROFILE_DETAILS = 23;
  CRYPTO_WALLET = 24;
  BANKING_TAB = 25;
  JURISDICTION_CONFIG = 26;
  CRYPTOCURRENCY = 27;
  EXCHANGE_DATA = 28;
  NOTIFICATION_PREFERENCE = 29;
  DATA_PRIVACY_SETTINGS = 30;
  PASSWORD_INFO = 31;
  OTP_INFO = 32;
  FAMILY_ACCOUNT = 33;
  INVESTING_AUTOMATION = 34;
  LENDING_INFO = 35;
  TRUSTED_CONTACT = 36;
  IDV_STATE = 37;
  CRYPTOCURRENCY_PROFILE = 38;
  INVEST_AUTOMATOR_NOTIFICATION_SETTINGS = 39;
  FAVORITE = 40;
  SAVINGS_CONFIG = 41;
  SAVINGS_HOME = 42;
  INVEST_PORTFOLIO_STATE = 43;
  INVEST_TRADING_STATE = 44;
  SAVINGS_FOLDER = 45;
  TIGERS = 46;
  WIRES = 47;
  TAXUPG = 48;
  TAXEFI = 49;
  CASH_LIMITS = 50;
}
message ATMPicker {
  repeated Money options = 1;
}
enum BalanceSnapshotType {
  option allow_alias = true;
  PRIMARY = 1;
  SECONDARY = 2;
}
message BalanceSnapshot {
  string instrument_token = 1;
  int64 version = 2;
  Money balance = 3;
  BalanceSnapshotType type = 4;
}
message DirectDepositAccount {
  string routing_number = 1;
  string account_number = 2;
  string account_number_prefix = 3;
  bool is_placeholder = 4;
  string dda_explanation_text = 5;
  bool display_complete_account_number = 6;
  string support_node_token = 7;
}
enum BalanceDataButtonAction {
  option allow_alias = true;
  DO_CLIENT_SCENARIO = 1;
  SHOW_DDA_COPY_AND_PASTE = 2;
  SHOW_DIALOG = 3;
}
enum BalanceDataDialogButtonAction {
  option allow_alias = true;
  DO_CLIENT_SCENARIO = 1;
  DISMISS = 2;
}
message BalanceDataDialogButton {
  string text = 1;
  BalanceDataDialogButtonAction action = 2;
  ClientScenario client_scenario = 3;
}
message BalanceDataDialog {
  string main_text = 1;
  BalanceDataDialogButton primary_button = 2;
  BalanceDataDialogButton secondary_button = 3;
  BalanceDataDialogButton tertiary_button = 4;
  string title = 5;
}
message BalanceDataButton {
  BalanceDataButtonAction action = 1;
  ClientScenario client_scenario = 2;
  BalanceDataDialog dialog = 3;
  string text = 4;
}
message UiDda {
  DirectDepositAccount account = 1;
  bool enabled = 2;
  BalanceDataButton button = 3;
  BalanceDataButton dda_form = 4;
}
message UiAccess {
  bool require_passcode_confirmation = 1;
  bool has_passcode = 2;
  bool app_lock_activated = 3;
}
message UiAddress {
  GlobalAddress postal_address = 1;
}
message SettingsCategoryProgressBar {
  string primary_display_text = 1;
  string secondary_display_text = 2;
  double progress = 3;
}
message SettingsCategory {
  string header_ = 1;
  repeated string items = 2;
  repeated SettingsCategoryProgressBar progress_bars = 3;
}
message SettingsGroup {
  string title = 1;
  repeated SettingsCategory settings_categories = 2;
}
message StaticLimitGroup {
  CurrencyCode currency = 1;
  SettingsGroup balance_settings_group = 2;
}
message UiStatusAndLimits {
  bool has_passed_idv = 1;
  bool adding_cash_enabled = 2;
  repeated StaticLimitGroup balance_limit_groups = 3;
}
message UiAppMesssages {
  bool app_message_notifications_enabled = 1;
  repeated string app_message_tokens = 2;
}
message UiCoreCustomer {
  string customer_token = 1;
  int64 customer_since = 2;
  Region region = 3;
}
enum ExperimentsOcrCardLinkingPolicy {
  option allow_alias = true;
  OCR_DISABLED = 1;
  OCR_ENABLED = 2;
}
enum ExperimentsRefundsPolicy {
  option allow_alias = true;
  REFUNDS_ENABLED = 2;
  REFUNDS_DISABLED = 3;
}
enum ExperimentsForceP2PCodingForUndecidedPulls {
  option allow_alias = true;
  DO_NOT_FORCE_P2P = 1;
  FORCE_P2P = 2;
}
enum ExperimentsPublicTestPolicy {
  option allow_alias = true;
  PUBLIC_TEST_POLICY_A = 1;
  PUBLIC_TEST_POLICY_B = 2;
}
enum ExperimentsPrivateTestPolicy {
  option allow_alias = true;
  PRIVATE_TEST_POLICY_A = 1;
  PRIVATE_TEST_POLICY_B = 2;
}
enum ExperimentsAddCashEnabledPolicy {
  option allow_alias = true;
  ADD_CASH_ENABLED_BYPASSING_RISK = 1;
  ADD_CASH_ENABLED = 2;
  ADD_CASH_ENABLED_WITH_ADDRESS_CHECK = 3;
  ADD_CASH_DISABLED = 4;
}
enum ExperimentsWebCreditCardLinkingPolicy {
  option allow_alias = true;
  WEB_CREDIT_CARD_LINKING_DISABLED = 1;
  WEB_CREDIT_CARD_LINKING_ENABLED = 2;
}
enum ExperimentsPushShazamCode56 {
  option allow_alias = true;
  PUSH_SHAZAM_CODE_56_DISABLED = 1;
  PUSH_SHAZAM_CODE_56_ENABLED = 2;
}
enum ExperimentsPushShazamMaestroCode56 {
  option allow_alias = true;
  PUSH_SHAZAM_MAESTRO_CODE_56_DISABLED = 1;
  PUSH_SHAZAM_MAESTRO_CODE_56_ENABLED = 2;
}
enum ExperimentsMasterCardPullMccPolicy {
  option allow_alias = true;
  DISABLE_MASTER_CARD_PULL_MCC = 1;
  ENABLE_MASTER_CARD_PULL_MCC = 2;
}
enum ExperimentsCashProSubCategoryPolicy {
  option allow_alias = true;
  CASH_PRO_SUBCATEGORY_DISBALED = 1;
  CASH_PRO_SUBCATEGORY_ENABLED = 2;
}
enum ExperimentsPushShazamPulseCode20 {
  option allow_alias = true;
  PUSH_SHAZAM_PULSE_CODE_20_DISABLED = 1;
  PUSH_SHAZAM_PULSE_CODE_20_ENABLED = 2;
}
enum ExperimentsUnregulatedBinPullFailoverPolicy {
  option allow_alias = true;
  FAILOVER_UNREGULATED_PULLS_TO_ESPERANTO = 1;
  DONT_FAILOVER_UNREGULATED_PULLS_TO_ESPERANTO = 2;
}
enum ExperimentsDepositFeeStatusPolicy {
  option allow_alias = true;
  NO_FEE_FOR_INSTANT_DEPOSITS = 1;
  BPS_FEE_FOR_INSTANT_DEPOSITS = 2;
  BPS_FEE_150 = 3;
  BPS_FEE_150_CUTOVER = 4;
  BPS_FEE_175 = 5;
}
enum ExperimentsAutoRiskApprovePolicy {
  option allow_alias = true;
  GO_THROUGH_RISK = 4;
  SKIP_RISK_UNLESS_SUSPICIOUS = 5;
}
enum ExperimentsWebAddCashPolicy {
  option allow_alias = true;
  ADD_CASH_DISABLED_IN_WEB = 1;
  ADD_CASH_ENABLED_IN_WEB = 2;
}
enum ExperimentsPlaidValidationOverride {
  option allow_alias = true;
  VALIDATE_WITH_PLAID = 1;
  PLAID_TOKEN_INVALID = 2;
  PLAID_CREDENTIALS_EXPIRED = 3;
  PLAID_ACCOUNT_VALID = 4;
}
enum ExperimentsPullViaAcculynkPaysecure {
  option allow_alias = true;
  PAYSECURE_PULL_DISABLED = 1;
  PAYSECURE_PULL_ENABLED = 2;
}
enum ExperimentsRewardCodeProgramDisplayPolicy {
  option allow_alias = true;
  FIVE_BY_FIVE = 1;
  TEN_BY_TEN = 2;
  TEN_BY_FIVE = 3;
  TWENTY_BY_FIVE = 4;
  TWENTY_FIVE_BY_FIVE = 5;
  FIFTY_BY_FIVE = 6;
  FIVE_BY_TEN = 7;
  TEN_BY_TEN_REPLICATING_1 = 8;
  TEN_BY_TEN_REPLICATING_2 = 9;
  TEN_BY_TEN_REPLICATING_3 = 10;
  TEN_BY_TEN_REPLICATING_4 = 11;
  TEN_BY_TEN_REPLICATING_5 = 12;
  TEN_BY_TEN_REPLICATING_6 = 13;
  TEN_BY_TEN_REPLICATING_7 = 14;
  TEN_BY_TEN_REPLICATING_8 = 15;
  TEN_BY_TEN_REPLICATING_9 = 16;
  TEN_BY_TEN_REPLICATING_10 = 17;
  TEN_BY_TEN_REPLICATING_11 = 18;
  TEN_BY_TEN_REPLICATING_12 = 19;
  TEN_BY_TEN_REPLICATING_13 = 20;
  TEN_BY_TEN_REPLICATING_14 = 21;
  TEN_BY_TEN_REPLICATING_15 = 22;
  FIFTEEN_BY_FIVE = 23;
  FIVE_BY_FIFTEEN = 24;
  TEN_BY_FIFTEEN = 25;
  FIFTEEN_BY_TEN = 26;
  FIFTEEN_BY_FIFTEEN = 27;
  ZERO_BY_FIVE = 28;
  ZERO_BY_TEN = 29;
  THIRTY_BY_FIFTEEN = 30;
  THIRTY_BY_TEN = 31;
  TWENTY_FIVE_BY_FIFTEEN = 32;
  TWENTY_FIVE_BY_TEN = 33;
  TWENTY_BY_FIFTEEN = 34;
  TWENTY_BY_TEN = 35;
  THIRTY_BY_FIVE = 36;
  ZERO_BY_FIFTEEN = 37;
}
enum ExperimentsPushViaMasterCardSend {
  option allow_alias = true;
  MASTERCARD_SEND_PUSH_DISABLED = 1;
  MASTERCARD_SEND_PUSH_ENABLED = 2;
  MASTERCARD_SEND_PRIORITY_PUSH_ENABLED = 3;
}
enum ExperimentsCostRoutingPolicy {
  option allow_alias = true;
  COST_ROUTING_DISABLED = 1;
  COST_ROUTING_ENABLED = 2;
}
enum ExperimentsOnboardingSuggestMergePolicy {
  option allow_alias = true;
  SUGGEST_MERGE_DISABLED = 1;
  SUGGEST_MERGE_ENABLED = 2;
}
enum ExperimentsCardPasscodeUpdatePolicy {
  option allow_alias = true;
  SEND_PASSCODE_UPDATES_TO_BANKLIN_DISABLED = 1;
  SEND_PASSCODE_UPDATES_TO_BANKLIN_ENABLED = 2;
}
enum ExperimentsIssuedCardDisabledStylePolicy {
  option allow_alias = true;
  ISSUED_CARD_DISABLED_STYLE_WHITE = 1;
  ISSUED_CARD_DISABLED_STYLE_GREY = 2;
}
enum ExperimentsDeleteAppContactsPolicy {
  option allow_alias = true;
  SET_DELETED_FLAG = 1;
  REALLY_DELETE = 2;
}
enum ExperimentsNegativeBalanceClawbackPolicy {
  option allow_alias = true;
  DO_NOT_CLAWBACK = 1;
  CLAWBACK = 2;
}
enum ExperimentsSupportCallbackPolicy {
  option allow_alias = true;
  CALLBACK_DISABLED_NO_OVERRIDES = 5;
  CALLBACK_DISABLED = 6;
  CALLBACK_ENABLED_FOR_CAVIAR_COURIER_CUSTOMERS = 7;
  CALLBACK_ENABLED_FOR_DIRECT_DEPOSIT_30_DAY_CUSTOMERS = 8;
  CALLBACK_ENABLED_FOR_DIRECT_DEPOSIT_CUSTOMERS = 9;
  CALLBACK_ENABLED_FOR_CARD_CUSTOMERS = 10;
  CALLBACK_ENABLED_FOR_ALL_CARD_CUSTOMERS = 11;
  CALLBACK_ENABLED = 12;
}
enum ExperimentsTransferSoftDescriptorPolicy {
  option allow_alias = true;
  USE_DEFAULT_DESCRIPTION = 1;
  USE_LAST_SENDER_NAME = 2;
}
enum ExperimentsBalanceAutoTopUpPolicy {
  option allow_alias = true;
  TOP_UP_DISABLED = 1;
  INLINE_TOP_UP_LOW_FUNDS = 2;
}
enum ExperimentsBitbankFundingPolicy {
  option allow_alias = true;
  BITBANK_DISABLED = 1;
  BITBANK_FUND_ALWAYS = 2;
}
enum ExperimentsUpcomingFeeReminderPolicy {
  option allow_alias = true;
  NO_UPCOMING_FEE_REMINDER = 1;
  SEND_UPCOMING_FEE_REMINDER = 2;
}
enum ExperimentsCreditCardLinkingPolicy {
  option allow_alias = true;
  CREDIT_CARD_LINKING_ENABLED = 1;
  CREDIT_CARD_REQUIRES_PRIOR_DEBIT_CARD = 2;
}
enum ExperimentsEnhancedSecurityLoginPolicy {
  option allow_alias = true;
  ENHANCED_SECURITY_LOGIN_DISABLED = 1;
  ENHANCED_SECURITY_LOGIN_ENABLED = 2;
  ENHANCED_SECURITY_LOGIN_FORCED = 3;
}
enum ExperimentsBitcoinWalletPolicy {
  option allow_alias = true;
  DISABLE_BITCOIN_WALLET = 1;
  ENABLE_BITCOIN_WALLET = 2;
}
enum ExperimentsGovernmentIdVerificationPolicy {
  option allow_alias = true;
  NORMAL_VERIFICATION = 1;
  LENIENT_VERIFICATION = 2;
}
enum ExperimentsOrganicNewCustomerRatePlanSelectionPolicy {
  option allow_alias = true;
  FORCE_RATE_PLAN_SELECTION = 1;
  DEFER_RATE_PLAN_SELECTION = 2;
}
enum ExperimentsSyncContactsBlockingPolicy {
  option allow_alias = true;
  ALLOW_CONTACT_SYNC = 1;
  BLOCK_CONTACT_SYNC = 2;
}
enum ExperimentsVerifiedIdentityStatusLevelPolicy {
  option allow_alias = true;
  UPGRADE_TO_GOLD = 1;
  UPGRADE_TO_GOLD_10K = 2;
}
enum ExperimentsIdvReviewCasePolicy {
  option allow_alias = true;
  DO_NOT_CREATE_CASE = 1;
  CREATE_CASE_WHEN_REVIEW_REQUESTED = 2;
  CREATE_CASE_WHEN_REVIEW_INCONCLUSIVE = 3;
}
enum ExperimentsRedisCacheGetIssuedCardPolicy {
  option allow_alias = true;
  DO_NOT_CACHE_GET_ISSUED_CARD = 1;
  CACHE_GET_ISSUED_CARD = 2;
  VERIFY_GET_ISSUED_CARD = 3;
}
enum ExperimentsRecipientConfirmationPolicy {
  option allow_alias = true;
  NO_RECIPIENT_CONFIRMATION_BLOCKER = 1;
  CONFIRMATION_BLOCKER_FOR_INACTIVE_RECIPIENTS = 2;
}
enum ExperimentsOverrideBitcoinPurchaseLimit {
  option allow_alias = true;
  OVERRIDE_PURCHASE_LIMIT_DISABLED = 1;
  OVERRIDE_PURCHASE_LIMIT_ENABLED = 2;
}
enum ExperimentsSecureLoginContactPolicy {
  option allow_alias = true;
  SECURE_LOGIN_CONTACTS_DISABLED = 1;
  SECURE_LOGIN_CONTACTS_ENABLED = 2;
}
enum ExperimentsSyncEntitiesInResponseContextAndroidPolicy {
  option allow_alias = true;
  OMIT_SYNC_ENTITIES_IN_ANDROID = 1;
  INCLUDE_SYNC_ENTITIES_IN_ANDROID = 2;
}
enum ExperimentsSyncEntitiesInResponseContextIosPolicy {
  option allow_alias = true;
  OMIT_SYNC_ENTITIES_IN_IOS = 1;
  INCLUDE_SYNC_ENTITIES_IN_IOS = 2;
}
enum ExperimentsCutoverSlowDebitCashOutPolicy {
  option allow_alias = true;
  CUTOVER_SLOW_DEBIT_CASH_OUT_ENABLED = 1;
  CUTOVER_SLOW_DEBIT_CASH_OUT_DISABLED = 2;
}
enum ExperimentsAliasEventCreationPolicy {
  option allow_alias = true;
  CREATE_ALIAS_EVENT_SYNC = 1;
  CREATE_ALIAS_EVENT_ASYNC = 2;
}
enum ExperimentsSetNameFirstOnboardingPolicy {
  option allow_alias = true;
  SET_NAME_FIRST_DISABLED = 1;
  SET_NAME_FIRST_ENABLED = 2;
}
enum ExperimentsRedisAliasCachePolicy {
  option allow_alias = true;
  ALIAS_CACHING_DISABLED = 1;
  ALIAS_CACHING_VERIFICATION_MODE = 2;
  ALIAS_CACHING_ENABLED = 3;
}
enum ExperimentsOverrideBitcoinPurchaseRateLimit {
  option allow_alias = true;
  OVERRIDE_PURCHASE_RATE_LIMIT_DISABLED = 1;
  OVERRIDE_PURCHASE_RATE_LIMIT_ENABLED = 2;
}
enum ExperimentsRewardStatusAppApiTransacterModePolicy {
  option allow_alias = true;
  REWARD_STATUS_TRANSACTER_READ_WRITE = 1;
  REWARD_STATUS_TRANSACTER_READ_ONLY = 2;
}
enum ExperimentsCrossBorderPaymentPolicy {
  option allow_alias = true;
  CROSS_BORDER_PAYMENTS_DISABLED = 1;
  CROSS_BORDER_PAYMENTS_ENABLED = 2;
}
enum ExperimentsGetAppConfigAppApiTransacterModePolicy {
  option allow_alias = true;
  GET_APP_CONFIG_APP_API_TRANSACTER_READ_WRITE = 1;
  GET_APP_CONFIG_APP_API_TRANSACTER_READ_ONLY = 2;
}
enum ExperimentsCashCardAtmPolicy {
  option allow_alias = true;
  NO_ATM_ACCESS = 1;
  ATM_ACCESS_WITH_NO_DECLINE_REASONS = 2;
  ATM_ACCESS_WITH_FRISKY_DECLINE_REASONS = 3;
}
enum ExperimentsCardTransactionSupportButtonPolicy {
  option allow_alias = true;
  CARD_SUPPORT_BUTTON_SHOWN = 1;
  CARD_SUPPORT_BUTTON_NOT_SHOWN = 2;
}
enum ExperimentsNfcCardLinkingPolicy {
  option allow_alias = true;
  NFC_CARD_LINKING_DISABLED = 1;
  NFC_CARD_LINKING_ENABLED = 2;
}
enum ExperimentsPayrollOnboardingCardUpsellPolicy {
  option allow_alias = true;
  PAYROLL_ONBOARDING_CARD_UPSELL_DISABLED = 1;
  PAYROLL_ONBOARDING_CARD_UPSELL_ENABLED = 2;
}
enum ExperimentsOnboardingCardUpsellPolicy {
  option allow_alias = true;
  ONBOARDING_CARD_UPSELL_DISABLED = 1;
  ONBOARDING_CARD_UPSELL_ENABLED = 2;
}
enum ExperimentsUseBinfoForStarPullRouting {
  option allow_alias = true;
  USE_STAR_BINS_TABLE_FOR_PULL_ROUTING = 1;
  USE_BINFO_FOR_PULL_ROUTING = 2;
}
enum ExperimentsWebActivateCardPolicy {
  option allow_alias = true;
  WEB_ACTIVATE_CARD_DISABLED = 1;
  WEB_ACTIVATE_CARD_ENABLED = 2;
}
enum ExperimentsIosDialogsPolicy {
  option allow_alias = true;
  FULLSCREEN_DIALOGS = 1;
  FLOATING_MODAL_DIALOGS = 2;
}
enum ExperimentsHighValueTargetLoginPolicy {
  option allow_alias = true;
  HIGH_VALUE_TARGET_LOGIN_DISABLED = 1;
  HIGH_VALUE_TARGET_LOGIN_ENABLED = 2;
}
enum ExperimentsCardIssuerPolicy {
  option allow_alias = true;
  MARQETA = 1;
  SHAZAM = 2;
  MARQETA_AND_SHAZAM = 3;
  MARQETA_ADMIN = 4;
  SHAZAM_ADMIN = 5;
}
enum ExperimentsTransferFlowForBtcExchangePolicy {
  option allow_alias = true;
  TRANSFER_FLOW_DISABLED = 1;
  TRANSFER_FLOW_ENABLED = 2;
}
enum ExperimentsCustomerTokenSource {
  option allow_alias = true;
  RANDOM = 1;
  SEQUENCE = 2;
}
enum ExperimentsPullViaRouty {
  option allow_alias = true;
  ROUTY_PULL_DISABLED = 1;
  ROUTY_PULL_ENABLED = 2;
}
enum ExperimentsPushViaRouty {
  option allow_alias = true;
  ROUTY_PUSH_DISABLED = 1;
  ROUTY_PUSH_ENABLED = 2;
}
enum ExperimentsBitcoinExecutePurchasePolicy {
  option allow_alias = true;
  PROCESS_ORDER_AS_EXCHANGE = 1;
  USE_ORDER_BOOK = 2;
}
enum ExperimentsAllowAppIconChangeIosPolicy {
  option allow_alias = true;
  DISALLOW_APP_ICON_CHANGE = 1;
  ALLOW_APP_ICON_CHANGE = 2;
}
enum ExperimentsAllowBitcoinOperationsPolicy {
  option allow_alias = true;
  BITCOIN_OPERATIONS_ENABLED = 1;
  BITCOIN_OPERATIONS_DISABLED = 2;
}
enum ExperimentsCardEventProcessPolicy {
  option allow_alias = true;
  SERVER_ONLY = 1;
  CUSTOMER_FACING = 2;
}
enum ExperimentsCashAdvanceOfferPolicy {
  option allow_alias = true;
  CASH_ADVANCE_OFFER_DISABLED = 1;
  CASH_ADVANCE_OFFER_ENABLED = 2;
}
enum ExperimentsCashCashOutSubCategoryPolicy {
  option allow_alias = true;
  CASH_CASH_OUT_SUBCATEGORY_DISBALED = 1;
  CASH_CASH_OUT_SUBCATEGORY_ENABLED = 2;
}
enum ExperimentsAutoCashOutTogglePolicy {
  option allow_alias = true;
  AUTO_CASH_OUT_TOGGLE_SHOWN = 1;
  AUTO_CASH_OUT_TOGGLE_HIDDEN_FOR_NEW_CUSTOMERS = 2;
  AUTO_CASH_OUT_TOGGLE_HIDDEN_FOR_ALL_CUSTOMERS = 3;
}
enum ExperimentsPromoInStatusResultPolicy {
  option allow_alias = true;
  NO_PROMO_IN_STATUS_RESULT = 1;
  PROMO_IN_STATUS_RESULT = 2;
}
enum ExperimentsCashCardControlsInSettingsPolicy {
  option allow_alias = true;
  CASH_CARD_CONTROLS_IN_SETTINGS_DISABLED = 1;
  CASH_CARD_CONTROLS_IN_SETTINGS_ENABLED = 2;
}
enum ExperimentsShowUsdStaticLimitsPolicy {
  option allow_alias = true;
  SHOW_USD_STATIC_LIMITS_DISBALED = 1;
  SHOW_USD_STATIC_LIMITS_ENABLED = 2;
}
enum ExperimentsShowBtcStaticLimitsPolicy {
  option allow_alias = true;
  SHOW_BTC_STATIC_LIMITS_DISBALED = 1;
  SHOW_BTC_STATIC_LIMITS_ENABLED = 2;
}
enum ExperimentsMisdirectedPaymentConfirmationPolicy {
  option allow_alias = true;
  NO_MISDIRECTED_PAYMENT_CONFIRMATION_BLOCKER = 1;
  MISDIRECTED_PAYMENT_RECIPIENT_CONFIRMATION_BLOCKER = 2;
  MISDIRECTED_PAYMENT_RECIPIENT_SKIP_FOR_PREVIOUSLY_CONFIRMED = 3;
}
enum ExperimentsBtcPhoneNumberPolicy {
  option allow_alias = true;
  REQUIRE_PHONE_NUMBER_FOR_ONBOARDING = 1;
  REQUIRE_PHONE_NUMBER_DURING_TRANSACTIONS = 2;
}
enum ExperimentsReplaceLostCardPolicy {
  option allow_alias = true;
  ORIGINAL_LOST_CARD_FLOW = 1;
  LOST_CARD_FLOW_V2 = 2;
  INTERNAL_TESTING_MULTI_CARD = 3;
}
enum ExperimentsPhysicalCardActivationPolicy {
  option allow_alias = true;
  ACTIVATE_VIA_STORED_VALUE_TOKEN = 1;
  ACTIVATE_VIA_CARD_TOKEN = 2;
}
enum ExperimentsSquareLoyaltyPolicy {
  option allow_alias = true;
  SQUARE_LOYALTY_DISABLED = 1;
  SQUARE_LOYALTY_ENABLED = 2;
}
enum ExperimentsLimitBitcoinWithdrawalPolicy {
  option allow_alias = true;
  LIMIT_BITCOIN_WITHDRAWAL_ENABLED = 1;
  LIMIT_BITCOIN_WITHDRAWAL_DISABLED = 2;
}
enum ExperimentsProfileInResponseContextPolicy {
  option allow_alias = true;
  DISABLE_PROFILE_IN_RESPONSE_CONTEXT = 1;
  ENABLE_PROFILE_IN_RESPONSE_CONTEXT = 2;
}
enum ExperimentsWebAutoAddCashPolicy {
  option allow_alias = true;
  WEB_AUTO_ADD_CASH_DISABLED = 1;
  WEB_AUTO_ADD_CASH_ENABLED = 2;
}
enum ExperimentsAppUserInterfacePolicyIos {
  option allow_alias = true;
  APP_USER_INTERFACE_IOS_LEGACY = 1;
  APP_USER_INTERFACE_IOS_TABBED = 2;
}
enum ExperimentsAppUserInterfacePolicyAndroid {
  option allow_alias = true;
  APP_USER_INTERFACE_ANDROID_LEGACY = 1;
  APP_USER_INTERFACE_ANDROID_TABBED = 2;
}
enum ExperimentsCashCardDrawerWiggleAffordancePolicy {
  option allow_alias = true;
  CASH_CARD_DRAWER_WIGGLE_AFFORDANCE_DISABLED = 1;
  CASH_CARD_DRAWER_WIGGLE_AFFORDANCE_ENABLED = 2;
}
enum ExperimentsProfileInResponseContextAndroidPolicy {
  option allow_alias = true;
  DISABLE_PROFILE_IN_RESPONSE_CONTEXT_FOR_ANDROID = 1;
  ENABLE_PROFILE_IN_RESPONSE_CONTEXT_FOR_ANDROID = 2;
}
enum ExperimentsProfileInResponseContextIosPolicy {
  option allow_alias = true;
  DISABLE_PROFILE_IN_RESPONSE_CONTEXT_FOR_IOS = 1;
  ENABLE_PROFILE_IN_RESPONSE_CONTEXT_FOR_IOS = 2;
}
enum ExperimentsWebRegionSelectionPolicy {
  option allow_alias = true;
  WEB_REGION_SELECTION_DISABLED = 1;
  WEB_REGION_SELECTION_ENABLED = 2;
}
enum ExperimentsAutoAddCashPolicy {
  option allow_alias = true;
  DISABLE_AUTO_ADD_CASH = 1;
  ENABLE_AUTO_ADD_CASH = 2;
}
enum ExperimentsForcePaymentConfirmationPolicy {
  option allow_alias = true;
  DISABLE_FORCED_PAYMENT_CONFIRMATION_BLOCKER = 1;
  ENABLE_FORCED_PAYMENT_CONFIRMATION_BLOCKER = 2;
}
enum ExperimentsUpsellCardAfterInstantCashOutPolicy {
  option allow_alias = true;
  NO_PROMO_FOR_INSTANT = 1;
  PROMO_FOR_INSTANT = 2;
}
enum ExperimentsSyncEntitiesOnForegroundIosPolicy {
  option allow_alias = true;
  SYNC_ENTITIES_ON_FOREGROUND_IN_IOS_ENABLED = 1;
  SYNC_ENTITIES_ON_FOREGROUND_IN_IOS_DISABLED = 2;
}
enum ExperimentsApplePayAppToAppVerificationPolicy {
  option allow_alias = true;
  APPLE_PAY_APP_TO_APP_VERIFICATION_DISABLED = 1;
  APPLE_PAY_APP_TO_APP_VERIFICATION_ENABLED = 2;
}
enum ExperimentsSyncEntitiesForBitcoinExchangesPolicy {
  option allow_alias = true;
  USE_TRANSACTIONS = 1;
  USE_TRANSFERS = 2;
}
enum ExperimentsMccPadderPolicy {
  option allow_alias = true;
  ENABLED = 1;
  DISABLED = 2;
}
enum ExperimentsAppReviewPromptBehaviourPolicy {
  option allow_alias = true;
  APP_REVIEW_PROMPT_BEHAVIOR_CUSTOM_STORE_REDIRECT = 1;
  APP_REVIEW_PROMPT_BEHAVIOR_PLATFORM_NATIVE = 2;
}
enum ExperimentsOmnipayStagingGatewayPolicy {
  option allow_alias = true;
  USE_SIMULATOR = 1;
  USE_OMNIPAY = 2;
}
enum ExperimentsThirdPartyTradingPolicy {
  option allow_alias = true;
  THIRD_PARTY_TRADING_DISABLED = 1;
  THIRD_PARTY_TRADING_ENABLED = 2;
}
enum ExperimentsBankbookBalanceChecksPolicy {
  option allow_alias = true;
  PLAID_BALANCE_CHECKS_ON_DEMAND = 3;
  PLAID_BALANCE_CHECKS_SHEDDING = 4;
}
enum ExperimentsUkUseMiscMccPolicy {
  option allow_alias = true;
  UK_MISC_MCC_DISABLED = 1;
  UK_MISC_MCC_ENABLED = 2;
}
enum ExperimentsCloudContactsPolicy {
  option allow_alias = true;
  CLOUD_CONTACTS_DISABLED = 1;
  CLOUD_CONTACTS_SHADOW_WRITE = 2;
  CLOUD_CONTACTS_SHADOW_READ_WRITE = 3;
  CLOUD_CONTACTS_ENABLED = 4;
}
enum ExperimentsReferralProgramGbrPolicy {
  option allow_alias = true;
  GBR_REFERRAL_PROGRAM_DISABLED = 1;
  GBR_REFERRAL_PROGRAM_ENABLED = 2;
}
enum ExperimentsRewardCodeProgramDisplayGbrPolicy {
  option allow_alias = true;
  FIVE_BY_FIVE_GBR = 1;
  TEN_BY_TEN_GBR = 2;
  TEN_BY_TEN_REPLICATING_1_GBR = 3;
  TEN_BY_TEN_REPLICATING_2_GBR = 4;
  TEN_BY_TEN_REPLICATING_3_GBR = 5;
  TEN_BY_TEN_REPLICATING_4_GBR = 6;
  TEN_BY_TEN_REPLICATING_5_GBR = 7;
  TEN_BY_TEN_REPLICATING_6_GBR = 8;
  TEN_BY_TEN_REPLICATING_7_GBR = 9;
  TEN_BY_TEN_REPLICATING_8_GBR = 10;
  TEN_BY_TEN_REPLICATING_9_GBR = 11;
  TEN_BY_TEN_REPLICATING_10_GBR = 12;
  TEN_BY_TEN_REPLICATING_11_GBR = 13;
  TEN_BY_TEN_REPLICATING_12_GBR = 14;
  TEN_BY_TEN_REPLICATING_13_GBR = 15;
  TEN_BY_TEN_REPLICATING_14_GBR = 16;
  TEN_BY_TEN_REPLICATING_15_GBR = 17;
}
enum ExperimentsNativeReferralEmailsIosPolicy {
  option allow_alias = true;
  NATIVE_REFERRAL_EMAILS_DISABLED_FOR_IOS = 1;
  NATIVE_REFERRAL_EMAILS_ENABLED_FOR_IOS = 2;
}
enum ExperimentsNativeReferralEmailsAndroidPolicy {
  option allow_alias = true;
  NATIVE_REFERRAL_EMAILS_DISABLED_FOR_ANDROID = 1;
  NATIVE_REFERRAL_EMAILS_ENABLED_FOR_ANDROID = 2;
}
enum ExperimentsCashOutDrawerBehaviorPolicy {
  option allow_alias = true;
  CASH_OUT_DRAWER_BEHAVIOR_FULL_AMOUNT = 1;
  CASH_OUT_DRAWER_BEHAVIOR_CUSTOM_AMOUNT = 2;
}
enum ExperimentsCashOutSliderInitialValuePolicy {
  option allow_alias = true;
  CASH_OUT_SLIDER_INITIAL_VALUE_MINIMUM = 1;
  CASH_OUT_SLIDER_INITIAL_VALUE_MAXIMUM = 2;
}
enum ExperimentsUpsellCardActivationPolicy {
  option allow_alias = true;
  ACTIVATION_PROMO_DISABLED = 1;
  ACTIVATION_PROMO_ENABLED = 2;
}
enum ExperimentsRecipientChooserAliasPreferenceIosPolicy {
  option allow_alias = true;
  RECIPIENT_CHOOSER_ALIAS_PREFERENCE_STANDARD = 1;
  RECIPIENT_CHOOSER_ALIAS_PREFERENCE_SUPPRESS_EMAIL = 2;
}
enum ExperimentsAchPullsSpecialCustomersOverride {
  option allow_alias = true;
  ACH_PULLS_SPECIAL_CUSTOMER_DISABLED = 1;
  ACH_PULLS_SPECIAL_CUSTOMER_ENABLED = 2;
}
enum ExperimentsAchPullsInUsPolicy {
  option allow_alias = true;
  ACH_PULLS_IN_US_DISABLED = 1;
  ACH_PULLS_IN_US_ENABLED_FOR_ELIGIBLE_MC_PULLS = 2;
  ACH_PULLS_IN_US_ENABLED_FOR_ALL_DEBIT_PULLS = 3;
  ACH_PULLS_IN_US_ENABLED_FOR_ALL_DEBIT_SKIPPING_BANK_CHECK = 4;
  ACH_PULLS_IN_US_ENABLED_FOR_ALL_DEBIT_SKIPPING_RISK_CHECK = 5;
  ACH_PULLS_IN_US_ENABLED_WITHOUT_DEBIT = 6;
  ACH_PULLS_IN_US_ENABLED_SKIPPING_VISA_CHECK = 7;
}
enum ExperimentsSlowBitcoinWithdrawalPolicy {
  option allow_alias = true;
  SLOW_WITHDRAWALS_DISABLED = 1;
  SLOW_WITHDRAWALS_ENABLED = 2;
}
enum ExperimentsBanklinPushRoutingPolicy {
  option allow_alias = true;
  PUSH_USING_ROUTER = 1;
  PUSH_DIRECT_TO_LEDGER = 2;
}
enum ExperimentsBanklinPullRoutingPolicy {
  option allow_alias = true;
  PULL_USING_ROUTER = 1;
  PULL_DIRECT_FROM_LEDGER = 2;
}
enum ExperimentsItemizedSelectionBlockerPolicy {
  option allow_alias = true;
  ITEMIZED_SELECTION_BLOCKER_DISABLED = 1;
  ITEMIZED_SELECTION_BLOCKER_ENABLED = 2;
}
enum ExperimentsOnboardingWaitlistPolicy {
  option allow_alias = true;
  WAITLIST_DISABLED = 1;
  WAITLIST_ENABLED_FOR_GB = 2;
}
enum ExperimentsBoostForAllPolicy {
  option allow_alias = true;
  BOOST_FOR_ALL_DISABLED = 1;
  BOOST_FOR_ALL_ENABLED = 2;
}
enum ExperimentsUpsellSocialPolicy {
  option allow_alias = true;
  NO_PROMO_FOR_SOCIAL = 1;
  PROMO_FOR_SOCIAL = 2;
}
enum ExperimentsAutoAddCashAchPolicy {
  option allow_alias = true;
  AUTO_ADD_CASH_ACH_DISABLED = 1;
  AUTO_ADD_CASH_ACH_ENABLED = 2;
}
enum ExperimentsBoostForAllIosPolicy {
  option allow_alias = true;
  BOOST_FOR_ALL_IOS_DISABLED = 1;
  BOOST_FOR_ALL_IOS_2_33_PLUS_ENABLED = 2;
  BOOST_FOR_ALL_IOS_2_34_PLUS_ENABLED = 3;
}
enum ExperimentsBoostForAllAndroidPolicy {
  option allow_alias = true;
  BOOST_FOR_ALL_ANDROID_DISABLED = 1;
  BOOST_FOR_ALL_ANDROID_ENABLED = 2;
  BOOST_FOR_ALL_ANDROID_2_32_PLUS_ENABLED = 3;
  BOOST_FOR_ALL_ANDROID_2_33_PLUS_ENABLED = 4;
  BOOST_FOR_ALL_ANDROID_2_34_PLUS_ENABLED = 5;
}
enum ExperimentsDeferAddressUpdateInBanklinPolicy {
  option allow_alias = true;
  DEFER_ADDRESS_UPDATE_IN_BANKLIN_DISABLED = 1;
  DEFER_ADDRESS_UPDATE_IN_BANKLIN_ENABLED = 2;
}
enum ExperimentsCardDeliveredNotificationPolicy {
  option allow_alias = true;
  DO_NOT_NOTIFY_OF_DELIVERED = 1;
  NOTIFY_OF_DELIVERED = 2;
}
enum ExperimentsBoostSelectionScreenCopyPolicy {
  option allow_alias = true;
  COPY_SET_1 = 1;
  COPY_SET_2 = 2;
}
enum ExperimentsNoSelectedBoostModalIosPolicy {
  option allow_alias = true;
  NO_BOOST_SELECTED_MODAL_IOS_DISABLED = 1;
  NO_BOOST_SELECTED_MODAL_IOS_ENABLED = 2;
}
enum ExperimentsNoSelectedBoostModalAndroidPolicy {
  option allow_alias = true;
  NO_BOOST_SELECTED_MODAL_ANDROID_DISABLED = 1;
  NO_BOOST_SELECTED_MODAL_ANDROID_ENABLED = 2;
}
enum ExperimentsOnboardingReferralCodeGbPolicy {
  option allow_alias = true;
  SHOW_DURING_ONBOARDING_GB = 1;
  DO_NOT_SHOW_DURING_ONBOARDING_GB = 2;
  SHOW_DURING_ONBOARDING_WITHOUT_PREFILL_GB = 3;
}
enum ExperimentsLastPushInstrumentLinkPolicy {
  option allow_alias = true;
  LAST_PUSH_INSTRUMENT_LINK_DISABLED = 1;
  LAST_PUSH_INSTRUMENT_LINK_ENABLED = 2;
}
enum ExperimentsEmailContactSupportButtonPolicy {
  option allow_alias = true;
  EMAIL_CONTACT_SUPPORT_DISABLED = 1;
  EMAIL_CONTACT_SUPPORT_ENABLED = 2;
}
enum ExperimentsCashboardRequirePastHistoryPolicy {
  option allow_alias = true;
  PAST_HISTORY_NOT_REQUIRED = 1;
  PAST_HISTORY_REQUIRED = 2;
}
enum ExperimentsCashboardDisableInstrumentLinkingPolicy {
  option allow_alias = true;
  INSTRUMENT_LINKING_ENABLED = 1;
  INSTRUMENT_LINKING_DISABLED = 2;
}
enum ExperimentsEmailPromotionAnalyticsPolicy {
  option allow_alias = true;
  EMAIL_PROMOTION_ANALYTICS_DISABLED = 1;
  EMAIL_PROMOTION_ANALYTICS_ENABLED = 2;
}
enum ExperimentsJournalBoostsPolicy {
  option allow_alias = true;
  JOURNAL_BOOSTS_SEPARATELY_DISABLED = 1;
  JOURNAL_BOOSTS_SEPARATELY_ENABLED = 2;
}
enum ExperimentsChangeCardDesignPolicy {
  option allow_alias = true;
  CHANGE_CARD_DESIGN_DISABLED = 1;
  CHANGE_CARD_DESIGN_ENABLED = 2;
}
enum ExperimentsBitcoinWalletBackendTypePolicy {
  option allow_alias = true;
  BITCOINJ_WALLET = 1;
  BITGO_WALLET = 2;
}
enum ExperimentsPaymentRefundPolicy {
  option allow_alias = true;
  REFUND_INTO_ORIGINATING_INSTRUMENT = 1;
  REFUND_INTO_CASH_BALANCE = 2;
}
enum ExperimentsPlaidRelinkPolicy {
  option allow_alias = true;
  PLAID_RELINK_DISABLED = 1;
  PLAID_RELINK_ENABLED = 2;
}
enum ExperimentsIdvAutoFailGbPolicy {
  option allow_alias = true;
  IDV_AUTO_FAIL_GB_DISABLED = 1;
  IDV_AUTO_FAIL_GB_FOR_COMPLETELY_DIFFERENT_IDENTITIES = 2;
}
enum ExperimentsCustomerSuspensionPolicy {
  option allow_alias = true;
  CUSTOMER_SUSPENSION_DISABLED = 1;
  CUSTOMER_SUSPENSION_ENABLED = 2;
}
enum ExperimentsSupportTextPolicy {
  option allow_alias = true;
  TEXT_DISABLED_NO_OVERRIDES = 6;
  TEXT_DISABLED = 7;
  TEXT_ENABLED_FOR_CAVIAR_COURIER_CUSTOMERS = 8;
  TEXT_ENABLED_FOR_DIRECT_DEPOSIT_30_DAY_CUSTOMERS = 9;
  TEXT_ENABLED_FOR_DIRECT_DEPOSIT_CUSTOMERS = 10;
  TEXT_ENABLED_FOR_CARD_CUSTOMERS = 11;
  TEXT_ENABLED_FOR_ALL_CARD_CUSTOMERS = 12;
  TEXT_ENABLED = 13;
}
enum ExperimentsMerchantColorizedAvatarPolicy {
  option allow_alias = true;
  COLORIZED_AVATARS_DISABLED = 1;
  COLORIZED_AVATARS_ENABLED = 2;
}
enum ExperimentsSupportDeflectionPolicy {
  option allow_alias = true;
  DEFLECTION_SHOWN = 1;
  DEFLECTION_NOT_SHOWN = 2;
}
enum ExperimentsSupportContactEnabledPolicy {
  option allow_alias = true;
  ENABLED_WHEN_SET = 1;
  ENABLED_FOR_ALL = 2;
}
enum ExperimentsFakeRiskLoginDecisionPolicy {
  option allow_alias = true;
  USE_REAL_RISK = 0;
  FAKE_RISK_RETURNS_RISKY = 1;
  FAKE_RISK_RETURNS_SAFE = 2;
}
enum ExperimentsSyncEntityProcessingIsolationPolicy {
  option allow_alias = true;
  OPTIMISTIC = 1;
  SERIALIZED_USING_DATABASE_LOCK = 2;
}
enum ExperimentsMachineLearningCasePrioritizationPolicy {
  option allow_alias = true;
  USE_HEURISTIC_CASE_PRIORITIZATION = 1;
  USE_MACHINE_LEARNING_CASE_PRIORITIZATION = 2;
}
enum ExperimentsRegisterSmsAppCallbackTokenPolicy {
  option allow_alias = true;
  DISABLE_REGISTER_SMS_APP_CALLBACK_TOKEN = 1;
  ENABLE_REGISTER_SMS_APP_CALLBACK_TOKEN = 2;
}
enum ExperimentsFloridaAddressBlockerPolicy {
  option allow_alias = true;
  DONT_REQUIRE_FULL_ADDRESS_FOR_FLORIDA = 1;
  REQUIRE_FULL_ADDRESS_FOR_FLORIDA = 2;
}
enum ExperimentsBlockerOrderingPolicy {
  option allow_alias = true;
  BLOCKER_ORDERING_OLD = 1;
  BLOCKER_ORDERING_NEW = 2;
}
enum ExperimentsUpdateIssuedCardFromProfileIosPolicy {
  option allow_alias = true;
  UPDATE_ISSUED_CARD_FROM_PROFILE_ENABLED = 1;
  UPDATE_ISSUED_CARD_FROM_PROFILE_DISABLE = 2;
  UPDATE_ISSUED_CARD_FROM_PROFILE_DISABLED = 3;
}
enum ExperimentsBitcoinW9AgreementPolicy {
  option allow_alias = true;
  OLD_AGREEMENT_SAVE_DISABLED = 1;
  NEW_AGREEMENT_SAVE_ENABLED = 2;
}
enum ExperimentsReceiptPromotionsReferralsPolicy {
  option allow_alias = true;
  RECEIPT_PROMOTION_REFERRALS_DISABLED = 1;
  RECEIPT_PROMOTION_REFERRALS_ENABLED = 2;
}
enum ExperimentsBankAccountLinkingPolicy {
  option allow_alias = true;
  DEFAULT_LINKING = 1;
  PLAID_2_ENABLED = 2;
}
enum ExperimentsHeavyCustomersPolicy {
  option allow_alias = true;
  HEAVY_CUSTOMERS_DISABLED = 1;
  HEAVY_CUSTOMERS_ENABLED = 2;
}
enum ExperimentsSkipEnhancedVerificationBlockersPolicy {
  option allow_alias = true;
  SKIP_DISABLED = 1;
  SKIP_ENABLED_ALWAYS = 2;
}
enum ExperimentsPhysicalCardSignatureApprovalPolicy {
  option allow_alias = true;
  DO_NOT_AUTO_APPROVE = 1;
  AUTO_APPROVE_EMPTY_SIGNATURES = 2;
  AUTO_APPROVE_FEW_STAMPS = 3;
}
enum ExperimentsBoostForSomeIosPolicy {
  option allow_alias = true;
  BOOST_FOR_SOME_IOS_DISABLED = 1;
  BOOST_FOR_SOME_IOS_2_41_PLUS_ENABLED = 2;
}
enum ExperimentsBoostForSomeAndroidPolicy {
  option allow_alias = true;
  BOOST_FOR_SOME_ANDROID_DISABLED = 1;
  BOOST_FOR_SOME_ANDROID_2_41_PLUS_ENABLED = 2;
}
enum ExperimentsValidReferralRewardFundingInstrumentPolicy {
  option allow_alias = true;
  STORED_BALANCE_IS_VALID = 1;
  STORED_BALANCE_IS_NOT_VALID = 2;
}
enum ExperimentsUpsellBoostExplorationPolicy {
  option allow_alias = true;
  UPSELL_BOOST_EXPLORATION_DISABLED = 1;
  UPSELL_BOOST_EXPLORATION_ENABLED = 2;
}
enum ExperimentsShazamDigitalWalletProvisioningPolicy {
  option allow_alias = true;
  DIGITAL_WALLET_BUTTON_DISABLED = 1;
  DIGITAL_WALLET_BUTTON_ENABLED = 2;
}
enum ExperimentsBitcoinW9StorePolicy {
  option allow_alias = true;
  STORE_IN_FRANKLIN_ENABLED = 1;
  STORE_IN_FRANKLIN_DISABLED = 2;
}
enum ExperimentsBitcoinW9SendToTaxmanPolicy {
  option allow_alias = true;
  SEND_TO_TAXMAN_DISABLED = 1;
  SEND_TO_TAXMAN_ENABLED = 2;
}
enum ExperimentsPaymentsPageFlowPolicy {
  option allow_alias = true;
  PAYMENTS_PAGE_FLOW = 1;
  PAYMENTS_PAGE_RECEIPT_ONLY = 2;
}
enum ExperimentsPaymentReceiptEnhancedVerificationPolicy {
  option allow_alias = true;
  DO_NOT_LINK_TO_ENHANCED_VERIFICATION = 1;
  LINK_TO_ENHANCED_VERIFICATION = 2;
}
enum ExperimentsEnableAutoresponderAutoblockPolicy {
  option allow_alias = true;
  DO_NOT_SEND_AUTOBLOCK_AUTORESPONSE = 1;
  SEND_AUTOBLOCK_AUTORESPONSE = 2;
}
enum ExperimentsBitcoin1099bSendToTaxmanPolicy {
  option allow_alias = true;
  SEND_1099B_TO_TAXMAN_DISABLED = 1;
  SEND_1099B_TO_TAXMAN_ENABLED = 2;
}
enum ExperimentsSuspensionBlockTransfersPolicy {
  option allow_alias = true;
  DO_NOT_BLOCK_TRANSFERS = 1;
  BLOCK_CASH_INS = 2;
}
enum ExperimentsEvaluateGeoLocationPolicy {
  option allow_alias = true;
  EVALUATE_GEO_LOCATION_DISABLED = 1;
  EVALUATE_GEO_LOCATION_ENABLED = 2;
}
enum ExperimentsIosScrollingQuickAccessBarPolicy {
  option allow_alias = true;
  IOS_SCROLLING_QUICK_ACCESS_BAR_DISABLED = 1;
  IOS_SCROLLING_QUICK_ACCESS_BAR_ENABLED = 2;
}
enum ExperimentsGbPaymentRefundPolicy {
  option allow_alias = true;
  GB_REFUND_INTO_ORIGINATING_INSTRUMENT = 1;
  GB_REFUND_INTO_CASH_BALANCE = 2;
}
enum ExperimentsResyncEntitiesRevisionPolicy {
  option allow_alias = true;
  DO_NOT_RESYNC_ENTITIES = 1;
  RESYNC_ENTITIES = 2;
}
enum ExperimentsOverrideCashInRateLimitPolicy {
  option allow_alias = true;
  OVERRIDE_CASH_IN_RATE_LIMIT_DISABLED = 1;
  OVERRIDE_CASH_IN_RATE_LIMIT_ENABLED = 2;
}
enum ExperimentsUkSoftDescriptorPrefixPolicy {
  option allow_alias = true;
  USE_SQC_STAR_SQUARE_CASH = 1;
  USE_SQC_STAR_CASH_APP = 2;
  USE_CASH_APP_STAR = 3;
}
enum ExperimentsUpsellAddCashBoostExplorationPolicy {
  option allow_alias = true;
  ADD_CASH_BOOST_EXPLORATION_PROMO_DISABLED = 1;
  ADD_CASH_BOOST_EXPLORATION_PROMO_ENABLED = 2;
}
enum ExperimentsEvaluateGlobalAddressPolicy {
  option allow_alias = true;
  EVALUATE_GLOBAL_ADDRESS_DISABLED = 1;
  EVALUATE_GLOBAL_ADDRESS_ENABLED = 2;
}
enum ExperimentsEnableAutoresponderMergePolicy {
  option allow_alias = true;
  DO_NOT_SEND_MERGE_AUTORESPONSE = 1;
  SEND_MERGE_AUTORESPONSE = 2;
}
enum ExperimentsEnhancedVerificationIncludeContactsPolicy {
  option allow_alias = true;
  EXCLUDE_CONTACTS_METHOD = 1;
  INCLUDE_CONTACTS_METHOD = 2;
}
enum ExperimentsEnhancedVerificationIncludeGovernmentIdPolicy {
  option allow_alias = true;
  EXCLUDE_GOVERNMENT_ID_METHOD = 1;
  INCLUDE_GOVERNMENT_ID_METHOD = 2;
}
enum ExperimentsEnhancedVerificationIncludePlaidPolicy {
  option allow_alias = true;
  EXCLUDE_PLAID_METHOD = 1;
  INCLUDE_PLAID_METHOD = 2;
}
enum ExperimentsEnhancedVerificationIncludeDebitCardPolicy {
  option allow_alias = true;
  EXCLUDE_DEBIT_CARD_METHOD = 1;
  INCLUDE_DEBIT_CARD_METHOD = 2;
}
enum ExperimentsUsSoftDescriptorPrefixPolicy {
  option allow_alias = true;
  US_USE_SQC_STAR_SQUARE_CASH = 1;
  US_USE_SQC_STAR_CASH_APP = 2;
  US_USE_CASH_APP_STAR = 3;
}
enum ExperimentsGBPOutgoingTransferCustomerPolicy {
  option allow_alias = true;
  C_OUTGOING_TRANSFER = 1;
  C_OUTGOING_TRANSFER_GBP = 2;
}
enum ExperimentsBanklinReissueCardPolicy {
  option allow_alias = true;
  USE_EXISTING_FLOW = 1;
  TERMINATE_AND_MONITOR_ALL_CARDS = 2;
}
enum ExperimentsBanklinDenylistedPolicy {
  option allow_alias = true;
  BANKLIN_DO_NOT_USE_DENYLISTED = 1;
  BANKLIN_USE_DENYLISTED = 2;
}
enum ExperimentsUkPaymentCodingCategoryPolicy {
  option allow_alias = true;
  UK_USE_P2P = 1;
  UK_USE_COMMERCIAL = 2;
}
enum ExperimentsUkUseSellerMidPolicy {
  option allow_alias = true;
  UK_USE_SELLER_MID_DISABLED = 1;
  UK_USE_SELLER_MID_ENABLED = 2;
}
enum ExperimentsUkUseCombinedSellerAttributesPolicy {
  option allow_alias = true;
  UK_COMBINED_SELLER_ATTRIBUTES_POLICY_DISABLED = 1;
  UK_COMBINED_SELLER_ATTRIBUTES_POLICY_ENABLED = 2;
}
enum ExperimentsInstrumentRefreshPolicy {
  option allow_alias = true;
  INSTRUMENT_REFRESH_DISABLED = 1;
  INSTRUMENT_REFRESH_ENABLED = 2;
}
enum ExperimentsUpsellActivateCardBoostExplorationPolicy {
  option allow_alias = true;
  ACTIVATE_CARD_BOOST_EXPLORATION_PROMO_DISABLED = 1;
  ACTIVATE_CARD_BOOST_EXPLORATION_PROMO_ENABLED = 2;
}
enum ExperimentsCustomerSnapshotLoadingPolicy {
  option allow_alias = true;
  LAZY_CUSTOMER_SNAPSHOT = 1;
  EAGER_JOIN_CUSTOMER_SNAPSHOT = 2;
}
enum ExperimentsMultiCardsPolicy {
  option allow_alias = true;
  MULTICARD_UNSUPPORTED = 1;
  MULTICARD_AS_SINGLE_CARD = 2;
  MULTICARD_SUPPORTED = 3;
}
enum ExperimentsGetEffectiveCustomerLimitsTransactionPolicy {
  option allow_alias = true;
  GET_EFFECTIVE_CUSTOMER_LIMITS_READ_WRITE = 1;
  GET_EFFECTIVE_CUSTOMER_LIMITS_READ_ONLY = 2;
}
enum ExperimentsOverrideBitcoinDepositLimit {
  option allow_alias = true;
  OVERRIDE_DEPOSIT_LIMIT_DISABLED = 1;
  OVERRIDE_DEPOSIT_LIMIT_ENABLED = 2;
}
enum ExperimentsLinkSquareIssuedCardPolicy {
  option allow_alias = true;
  LINK_SQUARE_ISSUED_CARD_DISABLED = 1;
  LINK_SQUARE_ISSUED_CARD_ENABLED = 2;
}
enum ExperimentsMinimumTransferAmountPolicy {
  option allow_alias = true;
  MIN_MAIN_CURRENCY_UNIT = 1;
  MIN_FRACTIONAL_CURRENCY_UNIT = 2;
}
enum ExperimentsEmergencyCardPolicy {
  option allow_alias = true;
  DISALLOW_ISSUE_OF_EMERGENCY_CARD = 1;
  ALLOW_ISSUE_OF_EMERGENCY_CARD = 2;
  ALLOW_AUTO_CARD_ISSUING = 3;
}
enum ExperimentsLinkCardAppApiTransacterModePolicy {
  option allow_alias = true;
  LINK_CARD_TRANSACTER_READ_WRITE = 1;
  LINK_CARD_TRANSACTER_READ_ONLY = 2;
}
enum ExperimentsEnhancedVerificationIgnorePlaidSettingsPolicy {
  option allow_alias = true;
  RESPECT_PLAID_SETTINGS = 1;
  IGNORE_PLAID_SETTINGS = 2;
}
enum ExperimentsEnhancedVerificationHandleGovernmentId {
  option allow_alias = true;
  CALL_FRISKY_GOVERNMENT_ID = 1;
  APPROVE_GOVERNMENT_ID = 2;
  REJECT_GOVERNMENT_ID = 3;
}
enum ExperimentsEnhancedVerificationHandleContacts {
  option allow_alias = true;
  CALL_FRISKY_CONTACTS = 1;
  APPROVE_CONTACTS = 2;
  REJECT_CONTACTS = 3;
}
enum ExperimentsEnhancedVerificationHandlePlaid {
  option allow_alias = true;
  CALL_FRISKY_PLAID = 1;
  APPROVE_PLAID = 2;
  REJECT_PLAID = 3;
}
enum ExperimentsSuspendedCustomerSupportHandlingPolicy {
  option allow_alias = true;
  SUSPENDED_CUSTOMER_NORMAL_HANDLING = 1;
  SUSPENDED_CUSTOMER_DEPRIORITIZED_HANDLING = 2;
}
enum ExperimentsBoostTreasureHuntPolicy {
  option allow_alias = true;
  BOOST_TREASURE_HUNT_DISABLED = 1;
  BOOST_TREASURE_HUNT_ENABLED = 2;
}
enum ExperimentsBitcoinLightningPolicy {
  option allow_alias = true;
  LIGHTNING_DISABLED = 1;
  LIGHTNING_ENABLED = 2;
}
enum ExperimentsRemoteCheckDepositPolicy {
  option allow_alias = true;
  REMOTE_CHECK_DEPOSIT_DISABLED = 1;
  REMOTE_CHECK_DEPOSIT_ENABLED = 2;
}
enum ExperimentsPayWithCashPayPagePolicy {
  option allow_alias = true;
  PAY_PAGE_DISABLED = 1;
  PAY_PAGE_ENABLED = 2;
}
enum ExperimentsDemandDepositAccountIssuingPolicy {
  option allow_alias = true;
  ISSUE_ON_LINCOLN_SAVINGS = 1;
  ISSUE_ON_SUTTON = 2;
}
enum ExperimentsHackweekAutoBuyBitcoinForAchPolicy {
  option allow_alias = true;
  AUTO_BUY_BITCOIN_DISABLED = 1;
  AUTO_BUY_BITCOIN_ENABLED = 2;
}
enum ExperimentsInstitutionBankLinkPolicy {
  option allow_alias = true;
  INSTITUTION_BANK_LINK_DISABLED = 1;
  INSTITUTION_BANK_LINK_ENABLED = 2;
}
enum ExperimentsCardOnboardingDisclosurePolicy {
  option allow_alias = true;
  CARD_ONBOARDING_DISCLOSURE_DISABLED = 1;
  CARD_ONBOARDING_DISCLOSURE_ENABLED = 2;
}
enum ExperimentsSuspensionBitcoinPolicy {
  option allow_alias = true;
  SUSPENSION_BITCOIN_ALLOWED = 1;
  SUSPENSION_BITCOIN_PROHIBITED = 2;
}
enum ExperimentsUpfrontBalanceChecksPolicy {
  option allow_alias = true;
  UPFRONT_BALANCE_CHECKS_DISABLED = 1;
  UPFRONT_BALANCE_CHECKS_WITH_PLAID_ENABLED = 2;
}
enum ExperimentsCardProcessBizbankTransactionPolicy {
  option allow_alias = true;
  PROCESS_BIZBANK_TRANSACTION_IN_BANKLIN = 1;
  PROCESS_BIZBANK_TRANSACTION_THROUGH_CARDLY = 2;
}
enum ExperimentsYodleeFormBlockerPolicy {
  option allow_alias = true;
  FORM_BLOCKER_FOR_YODLEE_MFA_DISABLED = 1;
  FORM_BLOCKER_FOR_YODLEE_MFA_ENABLED = 2;
}
enum ExperimentsExperimentalAchSoftDescriptorPolicy {
  option allow_alias = true;
  EXPERIMENTAL_ACH_SOFT_DESCRIPTOR_DISABLED = 1;
  EXPERIMENTAL_ACH_SOFT_DESCRIPTOR_ENABLED = 2;
  CASH_APP_IN_ACH_SOFT_DESCRIPTOR = 3;
}
enum ExperimentsEmailSendingPolicy {
  option allow_alias = true;
  SEND_EMAILS_VIA_EMAILBRIDGE = 1;
  SEND_EMAILS_VIA_RAVEN_MESSAGES = 2;
}
enum ExperimentsPlasmaFlowsPolicy {
  option allow_alias = true;
  PLASMA_FLOWS_DISABLED = 1;
  PLASMA_FLOWS_ENABLED = 2;
}
enum ExperimentsPaymentPlasmaMigrationPolicy {
  option allow_alias = true;
  FRANKLIN_ONLY = 1;
  PHASE_ONE = 2;
  PHASE_TWO = 3;
  PHASE_THREE = 4;
  PHASE_FOUR = 5;
  PHASE_FIVE = 6;
  PHASE_SIX = 7;
  PLASMA_ONLY = 8;
}
enum ExperimentsCashtagPageRefreshSpring2019Policy {
  option allow_alias = true;
  CASHTAG_PAGE_REFRESH_DISABLED = 1;
  CASHTAG_PAGE_REFRESH_ENABLED = 2;
}
enum ExperimentsReceiptPageRefreshSpring2019Policy {
  option allow_alias = true;
  RECEIPT_PAGE_REFRESH_DISABLED = 1;
  RECEIPT_PAGE_REFRESH_ENABLED = 2;
}
enum ExperimentsBanklinLedgeringPolicy {
  option allow_alias = true;
  DIRECT_TO_TRANSACTION_OPERATOR = 1;
  VIA_LEDGERING = 2;
}
enum ExperimentsPlasmaRemoveBoostFlowPolicy {
  option allow_alias = true;
  PLASMA_REMOVE_BOOST_FLOW_DISABLED = 1;
  PLASMA_REMOVE_BOOST_FLOW_ENABLED = 2;
}
enum ExperimentsPlasmaAddBoostFlowPolicy {
  option allow_alias = true;
  PLASMA_ADD_BOOST_FLOW_DISABLED = 1;
  PLASMA_ADD_BOOST_FLOW_ENABLED = 2;
}
enum ExperimentsUkDynamicPullRoutingPolicy {
  option allow_alias = true;
  UK_DYNAMIC_PULL_ROUTING_DISABLED = 1;
  UK_DYNAMIC_PULL_ROUTING_ENABLED = 2;
}
enum ExperimentsSyncValuesMigrationForProfileAssets {
  option allow_alias = true;
  SYNC_VALUES_DISABLED = 1;
  SYNC_VALUES_SHADOW_WRITE = 2;
  SYNC_VALUES_VERIFY = 3;
  SYNC_VALUES_ENABLED = 4;
}
enum ExperimentsFreeAtmStatusPolicy {
  option allow_alias = true;
  FREE_ATM_STATUS_DISABLED = 1;
  FREE_ATM_STATUS_ENABLED = 2;
}
enum ExperimentsUnlinkedRefundRulePolicy {
  option allow_alias = true;
  UNLINKED_REFUND_RULE_ENABLED = 1;
  UNLINKED_REFUND_RULE_DISABLED = 2;
}
enum ExperimentsBusinessPaymentsExpirationPolicy {
  option allow_alias = true;
  LEGACY_BUSINESS_PAYMENTS_EXPIRATION = 1;
  BUSINESS_PAYMENTS_EXPIRE_IN_14_DAYS = 2;
}
enum ExperimentsOnboardingReferralCodeUsPolicy {
  option allow_alias = true;
  DO_NOT_PREFILL_REWARD_CODE_US = 1;
  PREFILL_REWARD_CODE_US = 2;
}
enum ExperimentsBillFromOutsideOfContactsPolicy {
  option allow_alias = true;
  SHOW_CONFIRMATION_BLOCKER_DISABLED = 1;
  SHOW_CONFIRMATION_BLOCKER_ENABLED = 2;
  SHOW_CONFIRMATION_BLOCKER_AND_IGNORE_PROXIMITY = 3;
}
enum ExperimentsTravelBoostPolicy {
  option allow_alias = true;
  TRAVEL_BOOST_EVALUATION_DISABLED = 1;
  TRAVEL_BOOST_EVALUATION_ENABLED = 2;
}
enum ExperimentsWhiteCardPolicy {
  option allow_alias = true;
  WHITE_CARD_DISABLED = 1;
  DEFAULT_BLACK_CARD = 2;
  DEFAULT_WHITE_CARD = 3;
}
enum ExperimentsBtcSellIdvBlockerPolicy {
  option allow_alias = true;
  IDV_BLOCKERS_DISABLED = 1;
  IDV_BLOCKERS_ENABLED = 2;
}
enum ExperimentsApplePayWithTabsPolicy {
  option allow_alias = true;
  APPLE_PAY_WITH_TABS_ENABLED = 1;
  APPLE_PAY_WITH_TABS_DISABLED = 2;
}
enum ExperimentsTransactionRelatedSyncEntitiesMigrationPolicy {
  option allow_alias = true;
  WRITE_TO_FRANKLIN_READ_FROM_FRANKLIN = 1;
  WRITE_TO_BOTH_READ_FROM_BOTH = 2;
  WRITE_TO_BOTH_READ_FROM_CLIENT_SYNC = 3;
}
enum ExperimentsSlowAchCashOutPolicy {
  option allow_alias = true;
  SLOW_ACH_CASH_OUT_DISABLED = 1;
  SLOW_ACH_CASH_OUT_ENABLED = 2;
}
enum ExperimentsCustomerAddressMasterCardPaymentPolicy {
  option allow_alias = true;
  REDACT_CUSTOMER_ADDRESS = 1;
  USE_REAL_CUSTOMER_ADDRESS = 2;
}
enum ExperimentsTwinOperatorConcurrentModificationsPolicy {
  option allow_alias = true;
  TWIN_OPERATOR_CONCURRENT_MODIFICATIONS_NOT_HANDLED = 1;
  TWIN_OPERATOR_CONCURRENT_MODIFICATIONS_HANDLED = 2;
}
enum ExperimentsCustomerStatementNameMasterCardPaymentPolicy {
  option allow_alias = true;
  USE_FRIENDLY_NAME = 1;
  USE_VERIFIED_FULL_NAME_IF_AVAILABLE = 2;
}
enum ExperimentsMasterCardStatementLastNameSubstitutionPolicy {
  option allow_alias = true;
  SUBSTITUTE_UNKNOWN_FOR_EMPTY_LAST_NAME = 1;
  ALLOW_EMPTY_LAST_NAME = 2;
  SUBSTITUTE_NONE_FOR_EMPTY_LAST_NAME = 3;
}
enum ExperimentsClientSyncPaymentsMigrationPolicy {
  option allow_alias = true;
  WRITE_FRANKLIN_ONLY = 1;
  WRITE_BOTH_SYNC_FRANKLIN_ONLY = 2;
  WRITE_BOTH_PREFER_FRANKLIN = 3;
  WRITE_BOTH_PREFER_CLIENTSYNC = 4;
}
enum ExperimentsMoneyMoverMigrationPolicy {
  option allow_alias = true;
  MONEY_MOVER_DISABLED = 1;
  MONEY_MOVER_ENABLED = 2;
}
enum ExperimentsBitcoinTransactionPricingPolicy {
  option allow_alias = true;
  SPREAD = 1;
  PERCENTAGE_125_BPS = 2;
  PERCENTAGE_175_BPS = 3;
}
enum ExperimentsPaymentEventlyMigration {
  option allow_alias = true;
  ARCHIVER_ONLY = 1;
  CONSUME_ARCHIVER = 2;
  CONSUME_EVENTLY = 3;
  EVENTLY_ONLY = 4;
}
enum ExperimentsAmexSubcategoryConversionPolicy {
  option allow_alias = true;
  USE_CASH_PRO_PURCHASE_FOR_ALL_COMMERCIAL = 1;
  USE_CASH_P2P_FOR_ALL_COMMERCIAL = 2;
}
enum ExperimentsBitcoinBeforeCutoffPricingPolicy {
  option allow_alias = true;
  BEFORE_CUTOFF_SPREAD = 1;
  BEFORE_CUTOFF_PERCENTAGE_125_BPS = 2;
  BEFORE_CUTOFF_PERCENTAGE_175_BPS = 3;
}
enum ExperimentsAmexMccAndAddressOverridePolicy {
  option allow_alias = true;
  DEFAULT = 1;
  OVERRIDE_MCC = 2;
  OVERRIDE_ADDRESS = 3;
  OVERRIDE_MCC_AND_ADDRESS = 4;
}
enum ExperimentsExpensiveInstrumentsForInvitedCustomersReferralPayoutPolicy {
  option allow_alias = true;
  REQUIRE_EXPENSIVE_INSTRUMENTS = 1;
  DO_NOT_REQUIRE_EXPENSIVE_INSTRUMENTS = 2;
}
enum ExperimentsUnusedInstrumentsForInvitedCustomersReferralPayoutPolicy {
  option allow_alias = true;
  REQUIRE_UNUSED_INSTRUMENTS = 1;
  DO_NOT_REQUIRE_UNUSED_INSTRUMENTS = 2;
}
enum ExperimentsIdvForInvitedCustomersReferralPayoutPolicy {
  option allow_alias = true;
  REQUIRE_IDV = 1;
  DO_NOT_REQUIRE_IDV = 2;
}
enum ExperimentsBitcoinTransactionGraduatedPricingPolicy {
  option allow_alias = true;
  PERCENTAGE_FIXED_175_BPS = 1;
  PERCENTAGE_GRADUATED_HIGH = 2;
  PERCENTAGE_GRADUATED_MIDDLE = 3;
  PERCENTAGE_GRADUATED_LOW = 4;
  PERCENTAGE_GRADUATED_HIGH_TO_LOW = 5;
}
enum ExperimentsBitcoinTransactionGraduatedPricingV2Policy {
  option allow_alias = true;
  PERCENTAGE_FIXED_175_BPS_V2 = 1;
  PERCENTAGE_GRADUATED_LOW_V2 = 2;
  PERCENTAGE_GRADUATED_HIGH_TO_LOW_V2 = 3;
  PERCENTAGE_GRADUATED_MIDDLE_TO_LOW_V2 = 4;
}
enum ExperimentsBitcoinBeforeCutoffTransactionGraduatedPricingPolicy {
  option allow_alias = true;
  BEFORE_CUTOFF_PERCENTAGE_FIXED_175_BPS = 1;
  BEFORE_CUTOFF_PERCENTAGE_GRADUATED_LOW = 2;
  BEFORE_CUTOFF_PERCENTAGE_GRADUATED_HIGH_TO_LOW = 3;
  BEFORE_CUTOFF_PERCENTAGE_GRADUATED_MIDDLE_TO_LOW = 4;
}
message Experiments {
  ExperimentsOcrCardLinkingPolicy ocr_card_linking_policy = 46;
  ExperimentsRefundsPolicy refunds_policy = 47;
  ExperimentsForceP2PCodingForUndecidedPulls force_p2p_coding_for_pulls = 68;
  ExperimentsPublicTestPolicy public_test_policy = 101;
  ExperimentsPrivateTestPolicy private_test_policy = 102;
  ExperimentsAddCashEnabledPolicy add_cash_enabled_policy = 127;
  ExperimentsWebCreditCardLinkingPolicy web_credit_card_linking_policy = 128;
  ExperimentsPushShazamCode56 push_shazam_code_56 = 129;
  ExperimentsPushShazamMaestroCode56 push_shazam_maestro_code_56 = 135;
  ExperimentsMasterCardPullMccPolicy master_card_pull_mcc_policy = 136;
  ExperimentsCashProSubCategoryPolicy cash_pro_sub_category_policy = 139;
  ExperimentsPushShazamPulseCode20 push_shazam_pulse_code_20 = 140;
  ExperimentsUnregulatedBinPullFailoverPolicy unregulated_bin_pull_failover_policy = 152;
  ExperimentsDepositFeeStatusPolicy deposit_fee_status_policy = 159;
  ExperimentsAutoRiskApprovePolicy auto_risk_approve_policy = 165;
  ExperimentsWebAddCashPolicy web_add_cash_policy = 168;
  ExperimentsPlaidValidationOverride plaid_validation_override_policy = 187;
  ExperimentsPullViaAcculynkPaysecure pull_via_acculynk_paysecure = 188;
  ExperimentsRewardCodeProgramDisplayPolicy reward_code_program_display_policy = 189;
  ExperimentsPushViaMasterCardSend push_via_mastercard_send = 192;
  ExperimentsCostRoutingPolicy cost_routing_policy = 201;
  ExperimentsOnboardingSuggestMergePolicy onboarding_suggest_merge_policy = 212;
  ExperimentsCardPasscodeUpdatePolicy card_passcode_update_policy = 216;
  ExperimentsIssuedCardDisabledStylePolicy issued_card_disabled_style_policy = 218;
  ExperimentsDeleteAppContactsPolicy delete_app_contacts_policy = 221;
  ExperimentsNegativeBalanceClawbackPolicy negative_balance_clawback_policy = 223;
  ExperimentsSupportCallbackPolicy support_callback_policy = 224;
  ExperimentsTransferSoftDescriptorPolicy transfer_soft_descriptor_policy = 225;
  ExperimentsBalanceAutoTopUpPolicy balance_auto_top_up_policy = 232;
  ExperimentsBitbankFundingPolicy bitbank_funding_policy = 233;
  ExperimentsUpcomingFeeReminderPolicy upcoming_fee_reminder_policy = 234;
  ExperimentsCreditCardLinkingPolicy credit_card_linking_policy = 244;
  ExperimentsEnhancedSecurityLoginPolicy enhanced_security_login_policy = 246;
  ExperimentsBitcoinWalletPolicy bitcoin_wallet_policy = 257;
  ExperimentsGovernmentIdVerificationPolicy government_id_verification_policy = 259;
  ExperimentsOrganicNewCustomerRatePlanSelectionPolicy organic_new_customer_rate_plan_selection_policy = 265;
  ExperimentsSyncContactsBlockingPolicy sync_contacts_blocking_policy = 271;
  ExperimentsVerifiedIdentityStatusLevelPolicy verified_identity_status_level_policy = 274;
  ExperimentsIdvReviewCasePolicy idv_review_case_policy = 278;
  ExperimentsRedisCacheGetIssuedCardPolicy redis_cache_get_issued_card_policy = 279;
  ExperimentsRecipientConfirmationPolicy recipient_confirmation_policy = 288;
  ExperimentsOverrideBitcoinPurchaseLimit override_bitcoin_purchase_limit = 293;
  ExperimentsSecureLoginContactPolicy secure_login_contact_policy = 320;
  ExperimentsSyncEntitiesInResponseContextAndroidPolicy sync_entities_android_policy = 327;
  ExperimentsSyncEntitiesInResponseContextIosPolicy sync_entities_ios_policy = 328;
  ExperimentsCutoverSlowDebitCashOutPolicy cutover_slow_debit_cash_out_policy = 331;
  ExperimentsAliasEventCreationPolicy alias_event_creation_policy = 335;
  ExperimentsSetNameFirstOnboardingPolicy set_name_first_onboarding_policy = 336;
  ExperimentsRedisAliasCachePolicy redis_alias_cache_policy = 339;
  ExperimentsOverrideBitcoinPurchaseRateLimit override_bitcoin_purchase_rate_limit = 342;
  ExperimentsRewardStatusAppApiTransacterModePolicy reward_status_app_api_transacter_mode_policy = 344;
  ExperimentsCrossBorderPaymentPolicy cross_border_payment_policy = 347;
  ExperimentsGetAppConfigAppApiTransacterModePolicy get_app_config_app_api_transacter_mode_policy = 348;
  ExperimentsCashCardAtmPolicy cash_card_atm_policy = 349;
  ExperimentsCardTransactionSupportButtonPolicy card_transaction_support_button_policy = 350;
  ExperimentsNfcCardLinkingPolicy nfc_card_linking_policy = 352;
  ExperimentsPayrollOnboardingCardUpsellPolicy payroll_onboarding_card_upsell_policy = 354;
  ExperimentsOnboardingCardUpsellPolicy onboarding_card_upsell_policy = 355;
  ExperimentsUseBinfoForStarPullRouting use_binfo_for_star_pull_routing = 356;
  ExperimentsWebActivateCardPolicy web_activate_card_policy = 357;
  ExperimentsIosDialogsPolicy ios_dialogs_policy = 360;
  ExperimentsHighValueTargetLoginPolicy high_value_target_login_policy = 361;
  ExperimentsCardIssuerPolicy card_issuer_policy = 365;
  ExperimentsTransferFlowForBtcExchangePolicy transfer_flow_for_btc_exchange_policy = 366;
  ExperimentsCustomerTokenSource customer_token_source = 369;
  ExperimentsPullViaRouty pull_via_routy = 370;
  ExperimentsPushViaRouty push_via_routy = 371;
  ExperimentsBitcoinExecutePurchasePolicy bitcoin_execute_purchase_policy = 373;
  ExperimentsAllowAppIconChangeIosPolicy allow_app_icon_change_ios_policy = 377;
  ExperimentsAllowBitcoinOperationsPolicy allow_bitcoin_operations_policy = 385;
  ExperimentsCardEventProcessPolicy card_event_process_policy = 386;
  ExperimentsCashAdvanceOfferPolicy cash_advance_offer_policy = 387;
  ExperimentsCashCashOutSubCategoryPolicy cash_cash_out_sub_category_policy = 389;
  ExperimentsAutoCashOutTogglePolicy auto_cash_out_toggle_policy = 390;
  ExperimentsPromoInStatusResultPolicy promo_in_status_result_policy = 391;
  ExperimentsCashCardControlsInSettingsPolicy cash_card_controls_in_settings_policy = 396;
  ExperimentsShowUsdStaticLimitsPolicy show_usd_static_limits_policy = 398;
  ExperimentsShowBtcStaticLimitsPolicy show_btc_static_limits_policy = 399;
  ExperimentsMisdirectedPaymentConfirmationPolicy misdirected_payment_confirmation_policy = 400;
  ExperimentsBtcPhoneNumberPolicy btc_phone_number_blocker_policy = 402;
  ExperimentsReplaceLostCardPolicy replace_lost_card_policy = 403;
  ExperimentsPhysicalCardActivationPolicy physical_card_activation_policy = 404;
  ExperimentsSquareLoyaltyPolicy square_loyalty_policy = 405;
  ExperimentsLimitBitcoinWithdrawalPolicy limit_bitcoin_withdrawal_policy = 407;
  ExperimentsProfileInResponseContextPolicy profile_in_response_context_policy = 408;
  ExperimentsWebAutoAddCashPolicy web_auto_add_cash_policy = 410;
  ExperimentsAppUserInterfacePolicyIos app_user_interface_policy_ios = 412;
  ExperimentsAppUserInterfacePolicyAndroid app_user_interface_policy_android = 413;
  ExperimentsCashCardDrawerWiggleAffordancePolicy card_wiggle_affordance_policy = 417;
  ExperimentsProfileInResponseContextAndroidPolicy profile_in_response_context_android_policy = 420;
  ExperimentsProfileInResponseContextIosPolicy profile_in_response_context_ios_policy = 421;
  ExperimentsWebRegionSelectionPolicy web_region_selection_policy = 423;
  ExperimentsAutoAddCashPolicy auto_add_cash_policy = 425;
  ExperimentsForcePaymentConfirmationPolicy force_payment_confirmation_policy = 426;
  ExperimentsUpsellCardAfterInstantCashOutPolicy upsell_card_after_instant_cash_out_policy = 427;
  ExperimentsSyncEntitiesOnForegroundIosPolicy sync_entities_on_foreground_ios_policy = 428;
  ExperimentsApplePayAppToAppVerificationPolicy apple_pay_app_to_app_verification_policy = 429;
  ExperimentsSyncEntitiesForBitcoinExchangesPolicy sync_entities_for_bitcoin_exchanges_policy = 432;
  ExperimentsMccPadderPolicy mcc_padder_policy = 435;
  ExperimentsAppReviewPromptBehaviourPolicy app_review_prompt_behaviour_policy = 436;
  ExperimentsOmnipayStagingGatewayPolicy omnipay_staging_gateway_policy = 439;
  ExperimentsThirdPartyTradingPolicy third_party_trading_policy = 440;
  ExperimentsBankbookBalanceChecksPolicy bankbook_balance_checks_policy = 441;
  ExperimentsUkUseMiscMccPolicy uk_use_misc_mcc_policy = 442;
  ExperimentsCloudContactsPolicy cloud_contacts_policy = 444;
  ExperimentsReferralProgramGbrPolicy referral_program_gbr_policy = 447;
  ExperimentsRewardCodeProgramDisplayGbrPolicy reward_code_program_display_gbr_policy = 448;
  ExperimentsNativeReferralEmailsIosPolicy native_referral_emails_ios_policy = 449;
  ExperimentsNativeReferralEmailsAndroidPolicy native_referral_emails_android_policy = 450;
  ExperimentsCashOutDrawerBehaviorPolicy cash_out_drawer_behavior_policy = 453;
  ExperimentsCashOutSliderInitialValuePolicy cash_out_slider_initial_value_policy = 454;
  ExperimentsUpsellCardActivationPolicy upsell_card_activation_policy = 456;
  ExperimentsRecipientChooserAliasPreferenceIosPolicy recipient_chooser_alias_preference_policy = 459;
  ExperimentsAchPullsSpecialCustomersOverride ach_pulls_special_customers_override = 460;
  ExperimentsAchPullsInUsPolicy ach_pulls_in_us_policy = 461;
  ExperimentsSlowBitcoinWithdrawalPolicy slow_bitcoin_withdrawal_policy = 462;
  ExperimentsBanklinPushRoutingPolicy banklin_push_routing_policy = 463;
  ExperimentsBanklinPullRoutingPolicy banklin_pull_routing_policy = 464;
  ExperimentsItemizedSelectionBlockerPolicy itemized_selection_blocker_policy = 469;
  ExperimentsOnboardingWaitlistPolicy onboarding_waitlist_policy = 473;
  ExperimentsBoostForAllPolicy boost_for_all_policy = 477;
  ExperimentsUpsellSocialPolicy upsell_social_policy = 479;
  ExperimentsAutoAddCashAchPolicy auto_add_cash_ach_policy = 480;
  ExperimentsBoostForAllIosPolicy boost_for_all_ios_policy = 487;
  ExperimentsBoostForAllAndroidPolicy boost_for_all_android_policy = 488;
  ExperimentsDeferAddressUpdateInBanklinPolicy defer_address_update_in_banklin_policy = 489;
  ExperimentsCardDeliveredNotificationPolicy card_delivered_notification_policy = 493;
  ExperimentsBoostSelectionScreenCopyPolicy boost_selection_screen_copy_policy = 497;
  ExperimentsNoSelectedBoostModalIosPolicy boost_no_selected_modal_ios_policy = 499;
  ExperimentsNoSelectedBoostModalAndroidPolicy boost_no_selected_modal_android_policy = 500;
  ExperimentsOnboardingReferralCodeGbPolicy onboarding_referral_code_policy_gb = 501;
  ExperimentsLastPushInstrumentLinkPolicy last_push_instrument_link_policy = 502;
  ExperimentsEmailContactSupportButtonPolicy email_contact_support_button_policy = 505;
  ExperimentsCashboardRequirePastHistoryPolicy cashboard_ato_exposure_policy = 507;
  ExperimentsCashboardDisableInstrumentLinkingPolicy cashboard_disable_instrument_linking_policy = 509;
  ExperimentsEmailPromotionAnalyticsPolicy email_promotion_analytics_policy = 510;
  ExperimentsJournalBoostsPolicy journal_boosts_policy = 511;
  ExperimentsChangeCardDesignPolicy change_card_design_policy = 515;
  ExperimentsBitcoinWalletBackendTypePolicy bitcoin_wallet_backend_type_policy = 516;
  ExperimentsPaymentRefundPolicy payment_refund_policy = 519;
  ExperimentsPlaidRelinkPolicy plaid_relink_policy = 525;
  ExperimentsIdvAutoFailGbPolicy idv_auto_fail_gb_policy = 526;
  ExperimentsCustomerSuspensionPolicy customer_suspension_policy = 527;
  ExperimentsSupportTextPolicy support_text_policy = 528;
  ExperimentsMerchantColorizedAvatarPolicy merchant_colorized_avatar_policy = 529;
  ExperimentsSupportDeflectionPolicy support_deflection_policy = 531;
  ExperimentsSupportContactEnabledPolicy support_contact_enabled_policy = 532;
  ExperimentsFakeRiskLoginDecisionPolicy fake_risk_login_decision_policy = 536;
  ExperimentsSyncEntityProcessingIsolationPolicy sync_entity_processing_isolation_policy = 537;
  ExperimentsMachineLearningCasePrioritizationPolicy machine_learning_case_prioritization_policy = 540;
  ExperimentsRegisterSmsAppCallbackTokenPolicy register_sms_app_callback_token_policy = 542;
  ExperimentsFloridaAddressBlockerPolicy florida_address_blocker_policy = 544;
  ExperimentsBlockerOrderingPolicy blocker_ordering_policy = 547;
  ExperimentsUpdateIssuedCardFromProfileIosPolicy update_issued_card_from_profile_ios_policy = 548;
  ExperimentsBitcoinW9AgreementPolicy bitcoin_w9_agreement_version = 588;
  ExperimentsReceiptPromotionsReferralsPolicy receipt_promotions_referrals_policy = 590;
  ExperimentsBankAccountLinkingPolicy bank_account_linking_policy = 591;
  ExperimentsHeavyCustomersPolicy heavy_customer_policy = 597;
  ExperimentsSkipEnhancedVerificationBlockersPolicy skip_enhanced_verification_blockers_policy = 599;
  ExperimentsPhysicalCardSignatureApprovalPolicy physical_card_signature_approval_policy = 600;
  ExperimentsBoostForSomeIosPolicy boost_for_some_ios_policy = 601;
  ExperimentsBoostForSomeAndroidPolicy boost_for_some_android_policy = 602;
  ExperimentsValidReferralRewardFundingInstrumentPolicy valid_referral_reward_funding_instrument_policy = 603;
  ExperimentsUpsellBoostExplorationPolicy upsell_boost_exploration_policy = 604;
  ExperimentsShazamDigitalWalletProvisioningPolicy shazam_digital_wallet_provisioning_policy = 605;
  ExperimentsBitcoinW9StorePolicy bitcoin_w9_store_policy = 606;
  ExperimentsBitcoinW9SendToTaxmanPolicy bitcoin_w9_send_to_taxman_policy = 607;
  ExperimentsPaymentsPageFlowPolicy payments_page_flow_policy = 609;
  ExperimentsPaymentReceiptEnhancedVerificationPolicy payment_receipt_enhanced_verification_policy = 612;
  ExperimentsEnableAutoresponderAutoblockPolicy autoresponder_autoblock_policy = 616;
  ExperimentsBitcoin1099bSendToTaxmanPolicy bitcoin_1099b_send_to_taxman_policy = 619;
  ExperimentsSuspensionBlockTransfersPolicy suspension_block_transfers_policy = 620;
  ExperimentsEvaluateGeoLocationPolicy evaluate_geo_location_policy = 622;
  ExperimentsIosScrollingQuickAccessBarPolicy ios_scrolling_quick_access_bar_policy = 624;
  ExperimentsGbPaymentRefundPolicy gb_payment_refund_policy = 625;
  ExperimentsResyncEntitiesRevisionPolicy resync_entities_revision_policy = 628;
  ExperimentsOverrideCashInRateLimitPolicy override_cash_in_rate_limit_policy = 630;
  ExperimentsUkSoftDescriptorPrefixPolicy soft_descriptor_prefix_policy = 632;
  ExperimentsUpsellAddCashBoostExplorationPolicy upsell_add_cash_boost_exploration_policy = 633;
  ExperimentsEvaluateGlobalAddressPolicy evaluate_global_address_policy = 636;
  ExperimentsEnableAutoresponderMergePolicy autoresponder_merge_policy = 637;
  ExperimentsEnhancedVerificationIncludeContactsPolicy enhanced_verification_include_contacts_policy = 638;
  ExperimentsEnhancedVerificationIncludeGovernmentIdPolicy enhanced_verification_include_government_id_policy = 639;
  ExperimentsEnhancedVerificationIncludePlaidPolicy enhanced_verification_include_plaid_policy = 640;
  ExperimentsEnhancedVerificationIncludeDebitCardPolicy enhanced_verification_include_debit_card_policy = 641;
  ExperimentsUsSoftDescriptorPrefixPolicy us_soft_descriptor_prefix_policy = 643;
  ExperimentsGBPOutgoingTransferCustomerPolicy gbp_outgoing_transfer_customer_policy = 644;
  ExperimentsBanklinReissueCardPolicy banklin_reissue_card_policy = 645;
  ExperimentsBanklinDenylistedPolicy banklin_denylisted_policy = 647;
  ExperimentsUkPaymentCodingCategoryPolicy uk_payment_coding_category_policy = 648;
  ExperimentsUkUseSellerMidPolicy uk_use_seller_mid_policy = 649;
  ExperimentsUkUseCombinedSellerAttributesPolicy uk_use_combined_seller_attributes_policy = 650;
  ExperimentsInstrumentRefreshPolicy instrument_refresh_policy = 652;
  ExperimentsUpsellActivateCardBoostExplorationPolicy upsell_activate_card_boost_exploration_policy = 653;
  ExperimentsCustomerSnapshotLoadingPolicy customer_snapshot_loading_policy = 654;
  ExperimentsMultiCardsPolicy multi_cards_policy = 657;
  ExperimentsGetEffectiveCustomerLimitsTransactionPolicy get_effective_customer_limits_transaction_policy = 658;
  ExperimentsOverrideBitcoinDepositLimit override_bitcoin_deposit_limit = 659;
  ExperimentsLinkSquareIssuedCardPolicy link_square_issued_card_policy = 660;
  ExperimentsMinimumTransferAmountPolicy minimum_transfer_amount_policy = 661;
  ExperimentsEmergencyCardPolicy emergency_card_policy = 663;
  ExperimentsLinkCardAppApiTransacterModePolicy link_card_app_api_transacter_mode_policy = 665;
  ExperimentsEnhancedVerificationIgnorePlaidSettingsPolicy enhanced_verification_ignored_plaid_settings_policy = 666;
  ExperimentsEnhancedVerificationHandleGovernmentId enhanced_verification_handle_government_id_policy = 671;
  ExperimentsEnhancedVerificationHandleContacts enhanced_verification_handle_contacts_policy = 672;
  ExperimentsEnhancedVerificationHandlePlaid enhanced_verification_handle_plaid_policy = 673;
  ExperimentsSuspendedCustomerSupportHandlingPolicy suspended_customer_support_handling_policy = 678;
  ExperimentsBoostTreasureHuntPolicy boost_treasure_hunt_policy = 681;
  ExperimentsBitcoinLightningPolicy bitcoin_lightning_policy = 684;
  ExperimentsRemoteCheckDepositPolicy remote_check_deposit_policy = 687;
  ExperimentsPayWithCashPayPagePolicy pay_with_cash_pay_page_policy = 688;
  ExperimentsDemandDepositAccountIssuingPolicy demand_deposit_account_issuing_policy = 689;
  ExperimentsHackweekAutoBuyBitcoinForAchPolicy hackweek_auto_buy_bitcoin_for_ach_policy = 690;
  ExperimentsInstitutionBankLinkPolicy institution_bank_link_policy = 691;
  ExperimentsCardOnboardingDisclosurePolicy card_onboarding_disclosure_policy = 692;
  ExperimentsSuspensionBitcoinPolicy suspension_bitcoin_policy = 693;
  ExperimentsUpfrontBalanceChecksPolicy upfront_balance_checks_policy = 695;
  ExperimentsCardProcessBizbankTransactionPolicy card_process_bizbank_transaction_policy = 697;
  ExperimentsYodleeFormBlockerPolicy yodlee_form_blocker_policy = 699;
  ExperimentsExperimentalAchSoftDescriptorPolicy experimental_ach_soft_descriptor_policy = 700;
  ExperimentsEmailSendingPolicy email_sending_policy = 702;
  ExperimentsPlasmaFlowsPolicy plasma_flows_policy = 704;
  ExperimentsPaymentPlasmaMigrationPolicy payment_plasma_migration_policy = 707;
  ExperimentsCashtagPageRefreshSpring2019Policy cashtag_page_refresh_spring_2019_policy = 709;
  ExperimentsReceiptPageRefreshSpring2019Policy receipt_page_refresh_spring_2019_policy = 710;
  ExperimentsBanklinLedgeringPolicy banklin_ledgering_policy = 711;
  ExperimentsPlasmaRemoveBoostFlowPolicy plasma_remove_boost_flow_policy = 713;
  ExperimentsPlasmaAddBoostFlowPolicy plasma_add_boost_flow_policy = 714;
  ExperimentsUkDynamicPullRoutingPolicy uk_dynamic_pull_routing_policy = 715;
  ExperimentsSyncValuesMigrationForProfileAssets sync_values_migration_for_profile_assets = 717;
  ExperimentsFreeAtmStatusPolicy free_atm_status_policy = 718;
  ExperimentsUnlinkedRefundRulePolicy unlinked_refund_rule_policy = 719;
  ExperimentsBusinessPaymentsExpirationPolicy business_payments_expiration_policy = 720;
  ExperimentsOnboardingReferralCodeUsPolicy onboarding_referral_code_us_policy = 721;
  ExperimentsBillFromOutsideOfContactsPolicy bill_from_outside_of_contacts_policy = 726;
  ExperimentsTravelBoostPolicy travel_boost_policy = 728;
  ExperimentsWhiteCardPolicy white_card_policy = 729;
  ExperimentsBtcSellIdvBlockerPolicy btc_sell_idv_blocker_policy = 730;
  ExperimentsApplePayWithTabsPolicy apple_pay_with_tabs_policy = 731;
  ExperimentsTransactionRelatedSyncEntitiesMigrationPolicy transaction_related_sync_entities_migration_policy = 733;
  ExperimentsSlowAchCashOutPolicy slow_ach_cash_out_policy = 735;
  ExperimentsCustomerAddressMasterCardPaymentPolicy customer_address_master_card_payment_policy = 736;
  ExperimentsTwinOperatorConcurrentModificationsPolicy twin_operator_concurrent_modifications_policy = 737;
  ExperimentsCustomerStatementNameMasterCardPaymentPolicy customer_statement_name_master_card_payment_policy = 738;
  ExperimentsMasterCardStatementLastNameSubstitutionPolicy master_card_statement_last_name_substitution_policy = 739;
  ExperimentsClientSyncPaymentsMigrationPolicy clientsync_payments_migration_policy = 740;
  ExperimentsMoneyMoverMigrationPolicy money_mover_migration_policy = 741;
  ExperimentsBitcoinTransactionPricingPolicy bitcoin_transaction_pricing_policy = 743;
  ExperimentsPaymentEventlyMigration payment_evently_migration = 745;
  ExperimentsAmexSubcategoryConversionPolicy amex_subcategory_conversion_policy = 747;
  ExperimentsBitcoinBeforeCutoffPricingPolicy bitcoin_before_cutoff_pricing_policy = 748;
  ExperimentsAmexMccAndAddressOverridePolicy amex_mcc_and_address_override_policy = 749;
  ExperimentsExpensiveInstrumentsForInvitedCustomersReferralPayoutPolicy expensive_instruments_for_invited_customers_referral_payout_policy = 751;
  ExperimentsUnusedInstrumentsForInvitedCustomersReferralPayoutPolicy unused_instruments_for_invited_customers_referral_payout_policy = 752;
  ExperimentsIdvForInvitedCustomersReferralPayoutPolicy idv_for_invited_customers_referral_payout_policy = 753;
  ExperimentsBitcoinTransactionGraduatedPricingPolicy bitcoin_transaction_graduated_pricing_policy = 754;
  ExperimentsBitcoinTransactionGraduatedPricingV2Policy bitcoin_transaction_graduated_pricing_v2_policy = 755;
  ExperimentsBitcoinBeforeCutoffTransactionGraduatedPricingPolicy bitcoin_before_cutoff_transaction_graduated_pricing_policy = 756;
}
message UiExperiments {
  Experiments experiments = 1;
}
enum UiControlType {
  option allow_alias = true;
  LABEL = 1;
  BUTTON = 2;
  TOGGLE = 3;
}
enum UiControlState {
  option allow_alias = true;
  ON = 1;
  OFF = 2;
}
enum UiControlAction {
  option allow_alias = true;
  DO_CLIENT_SCENARIO = 1;
  COPY_CARD_NUMBER = 2;
  BOOST_SCREEN = 3;
  SHOW_OVERFLOW_CONTROLS = 4;
  STATUS_RESULT = 5;
  OPEN_DIGITAL_WALLET = 6;
  START_SUPPORT_FLOW = 7;
  SHOW_DIALOG = 8;
  HIDE_OVERFLOW_CONTROLS = 9;
}
enum UiControlIcon {
  option allow_alias = true;
  EXCLAMATION_MARK = 1;
  ELLIPSIS = 2;
  PACKAGE = 3;
  LOCK = 4;
  CARD_SHOP = 5;
  CIRCLE_OUTLINED_PLUS = 6;
  CIRCLE_FILLED_QUESTION_MARK = 7;
  CHECK_MARK = 8;
  CIRCLE_PLUS = 9;
  ENVELOPE = 10;
  CARD = 11;
  KEYPAD = 12;
  INFO = 13;
}
message UiControlTextButton {
  string text = 1;
}
message UiControlIconButton {
  UiControlIcon icon = 3;
}
enum UiControlDialogButtonAction {
  option allow_alias = true;
  ADD_CASH = 1;
  DISMISS = 2;
  OPEN_URL = 3;
}
message UiControlDialogButton {
  string text = 1;
  UiControlDialogButtonAction action = 2;
  Money add_cash_suggested_amount = 3;
  string url_to_open = 4;
}
message UiControlDialog {
  string main_text = 1;
  UiControlDialogButton primary_button = 2;
  UiControlDialogButton secondary_button = 3;
  string title_text = 4;
}
message UiControl {
  UiControlType type = 1;
  UiControlState state = 2;
  ClientScenario client_scenario = 4;
  UiControlAction action = 5;
  string accessibility_text = 6;
  UiControlIcon icon = 8;
  StatusResult status_result = 9;
  string support_node_token = 10;
  string main_text = 13;
  string sub_text = 15;
  Color main_text_color_override = 17;
  UiControlTextButton text_button = 18;
  UiControlIconButton icon_button = 19;
  UiControlDialog dialog = 20;
  bool enabled = 21;
  Color accent_color = 22;
}
message CashDrawerDataCardControls {
  UiControl card_control = 1;
  UiControl card_status_control = 2;
  repeated UiControl overflow_controls = 3;
}
message CashDrawerData {
  CashDrawerDataCardControls card_controls = 3;
  bool skip_null_state = 4;
}
enum UiIssuedCardMode {
  option allow_alias = true;
  NULL_STATE = 1;
  NORMAL = 2;
}
message SelectBoostElement {
  string boost_identifier = 1;
  string upsell_button_text = 2;
  string upsell_description = 3;
}
enum RoundUpsElementIcon {
  option allow_alias = true;
  ROUND_ARROW_UP = 0;
}
enum RoundUpsElementFont {
  option allow_alias = true;
  MEDIUM = 1;
  SMALL = 2;
}
message RoundUpsElement {
  RoundUpsElementIcon icon = 1;
  string main_text = 2;
  string info_text = 3;
  Color info_text_color = 4;
  Color info_text_background_color = 5;
  string accessibility_text = 6;
  RoundUpsElementFont info_text_font = 7;
  string client_route = 8;
}
message CardModuleElement {
  UiControl ui_control = 1;
  SelectBoostElement selected_boost_element = 2;
  RoundUpsElement round_ups_element = 3;
}
message IssuedCardElement {
  string card_identifier = 1;
  CardModuleElement primary_control = 2;
  repeated CardModuleElement overflow_controls = 3;
}
message CardModuleHeroIssuedCardModule {
  IssuedCardElement element = 1;
}
message CardModuleHeroNullStateModule {
  CardModuleElement element = 1;
}
message CardModuleBubbleModule {
  CardModuleElement element = 1;
}
message CardModuleListModule {
  repeated CardModuleElement elements = 1;
}
message CardModuleGiftCardsModule {
  CardModuleElement element = 1;
}
message CardModule {
  CardModuleHeroIssuedCardModule hero_issued_card = 1;
  CardModuleHeroNullStateModule hero_null_state = 2;
  CardModuleBubbleModule bubble = 3;
  CardModuleListModule list = 4;
  CardModuleGiftCardsModule gift_cards = 5;
}
message CardScheme {
  repeated CardModule modules = 1;
}
enum AutomationAutomationStatus {
  option allow_alias = true;
  ACTIVE = 1;
  INACTIVE = 2;
}
enum AutomationAutomationTargetType {
  option allow_alias = true;
  INVESTMENT_ENTITY = 1;
  CRYPTOCURRENCY = 2;
  MERCHANT_INVESTMENT_ENTITY = 3;
}
message AutomationAutomationTarget {
  AutomationAutomationTargetType type = 1;
  string identifier = 2;
  string display_name = 3;
}
message RoundUpsData {
  AutomationAutomationStatus status = 1;
  AutomationAutomationTarget target = 2;
}
message InitialBlockerData {
  repeated ScenarioPlanEntry scenario_plan_entries = 1;
}
enum CardOrderDataState {
  option allow_alias = true;
  DRAFT = 1;
  PENDING_SUBMISSION = 2;
  PENDING_REVIEW = 3;
  PENDING_ISSUE = 4;
  ISSUED = 5;
  SUSPENDED = 6;
  SHIPPED = 7;
  COMPLETED = 8;
  CANCELED = 9;
  OUT_FOR_DELIVERY = 10;
}
enum CardOrderDataStateReason {
  option allow_alias = true;
  ORDER_INITIATED = 1;
  SPONSORSHIP_REQUESTED = 2;
  ORDER_SUBMITTED = 3;
  REVIEW_DECLINED = 4;
  REVIEW_APPROVED = 5;
  SPONSORSHIP_CANCELED = 6;
  ORDER_REJECTED = 7;
  MANUAL_INTERVENTION_RESOLVED = 8;
  MAILING_ADDRESS_AMENDED = 9;
  CARD_UNDELIVERABLE = 10;
  MANUAL_INTERVENTION = 11;
  SUSPENDED_TOO_LONG_TIME = 12;
  CARD_ISSUED = 13;
  CARD_SHIPPED = 14;
  CARD_DELIVERED = 15;
  ORDER_UNLINKED = 16;
  RISK_REVIEW_DECLINED = 17;
  VIRTUAL_CARD_ACTIVATION_FAILED = 18;
  OTHER_FAILURE = 19;
  CARD_REISSUED = 20;
  CARD_OUT_FOR_DELIVERY = 21;
}
message CardOrderData {
  CardOrderDataState state = 1;
  CardOrderDataStateReason state_reason = 2;
  int64 state_transitioned_at = 3;
  int64 issued_at = 4;
  string flow_type = 5;
  int64 last_card_ordered_at = 6;
  string name_on_card = 7;
  string card_theme_token = 8;
}
enum CustomerDataState {
  option allow_alias = true;
  OPEN = 1;
  CLOSED = 2;
  DENYLISTED = 3;
  SUSPENDED = 4;
}
enum CustomerDataIDVStatusVerificationStatus {
  option allow_alias = true;
  VERIFICATION_UNKNOWN = 1;
  NOT_VERIFIED = 2;
  IN_REVIEW = 3;
  VERIFIED = 4;
  SPONSORSHIP_ACTIVE = 5;
  SPONSORSHIP_PENDING = 6;
  SPONSORSHIP_SUSPENDED = 7;
  SPONSORSHIP_CANCELED = 8;
}
message CustomerDataIDVStatus {
  CustomerDataIDVStatusVerificationStatus status = 1;
  int64 can_attempt_electronic_idv_at = 2;
}
message CustomerData {
  CustomerDataState state = 1;
  Region region = 2;
  CustomerDataIDVStatus idv_status = 3;
  bool has_passcode = 4;
  bool security_lock_enabled = 5;
  string cashtag = 6;
}
message UiIssuedCard {
  IssuedCard issued_card = 1;
  CashDrawerData cash_drawer_data = 2;
  UiIssuedCardMode mode = 3;
  CardScheme card_scheme = 4;
  RoundUpsData round_ups_data = 5;
  InitialBlockerData initial_blocker_data = 6;
  CardOrderData card_order_data = 7;
  CustomerData customer_data = 8;
}
message UiMarketing {
  bool suppress_review_prompt = 1;
}
enum NearbyVisibility {
  option allow_alias = true;
  EVERYONE = 1;
  CONTACTS_ONLY = 2;
}
message ConfirmationSheetData {
  string main_text = 1;
  string confirm_button_text = 2;
  string cancel_button_text = 3;
}
message FeeData {
  int64 fee_bps = 1;
  int64 minimum_fee_cents = 2;
  int64 fee_fixed_amount_cents = 3;
  int64 maximum_fee_cents = 4;
}
message DepositPreferenceOption {
  DepositPreference deposit_preference = 1;
  string options_text = 2;
  ConfirmationSheetData confirmation_sheet_data = 3;
  bool suppress_fee = 4;
  string options_description_text = 5;
  FeeData fee_data = 6;
}
enum DepositFeeDataFeeType {
  option allow_alias = true;
  NONE = 1;
  BASIS_POINTS = 2;
}
message DepositFeeData {
  DepositFeeDataFeeType fee_type = 1;
  int64 fee_bps = 2;
}
message DepositPreferenceData {
  string cash_out_title = 1;
  repeated DepositPreferenceOption account_setting_options = 2;
  repeated DepositPreferenceOption cash_out_options = 3;
  DepositPreference default_preference_option = 4;
  DepositFeeData deposit_fee_data = 5;
  bool display_auto_cash_out_toggle = 7;
}
message UiP2pSettings {
  int32 require_minimum_initiator_notes_length_for_requests = 1;
  IncomingRequestPolicy incoming_request_policy = 2;
  NearbyVisibility nearby_visibility = 3;
  RatePlan rate_plan = 4;
  bool can_upgrade_to_business = 5;
  DepositPreference deposit_preference = 6;
  DepositPreferenceData deposit_preference_data = 7;
  bool cash_balance_home_screen_button_enabled = 8;
}
message UiScheduledPayments {
  ScheduledReloadData scheduled_reload_data = 1;
  bool scheduled_reload_enabled = 2;
}
message DownloadableTaxForm {
  string tax_year = 1;
  string download_url = 2;
  string form_title = 3;
}
message UiTax {
  bool show_tax_information_link = 1;
  repeated DownloadableTaxForm downloadable_tax_forms = 2;
}
message FullCashtag {
  string base_dot_app_url = 1;
  string cashtag_display_name = 2;
  CurrencyCode currency = 3;
  string avatar_version = 4;
}
message UiPublicProfile {
  string full_name = 1;
  string photo_url = 2;
  string synopsis = 3;
  FullCashtag full_cashtag = 4;
  bool cashtag_url_enabled = 5;
  bool is_verified_account = 6;
}
message ProfileAlias {
  UiAlias alias = 1;
  bool verified = 2;
  int64 expires_at = 3;
  int64 version = 4;
  int64 display_date = 5;
}
message UiLoyaltyNotificationPreference {
  string title = 1;
  bool enabled = 2;
}
message LoyaltyProfile {
  UiLoyaltyNotificationPreference notification_preference = 1;
}
message CheckDepositProfile {
  bool enabled = 1;
  BalanceDataButton deposit_check = 2;
}
enum NotificationsSettingsOptionsConfigurationNotificationsSettingsOptionsConfigurationType {
  option allow_alias = true;
  UNKNOWN = 0;
  PERFORMANCE = 1;
}
message NotificationsSettingsPerformanceConfiguration {
  int32 value_ = 1;
}
message NotificationsSettingsOptionsConfiguration {
  NotificationsSettingsOptionsConfigurationNotificationsSettingsOptionsConfigurationType type = 1;
  NotificationsSettingsPerformanceConfiguration performance = 2;
}
message NotificationSettingsOption {
  string id = 1;
  bool is_enabled = 2;
  NotificationsSettingsOptionsConfiguration configuration = 3;
}
message NotificationsSettings {
  repeated NotificationSettingsOption options = 1;
}
message ProfileDetails {
  string bio = 1;
}
message Wallet {
  string address = 1;
}
message BankingTabBankingTabSectionHeaderBlock {
  string heading = 1;
}
enum BankingTabAppearance {
  option allow_alias = true;
  ACTIVE = 1;
  INACTIVE = 2;
}
message BankingTabClientScenarioAction {
  ClientScenario client_scenario = 1;
}
message BankingTabDialogButtonDismissAction {}
message BankingTabDialogButton {
  string text = 1;
  BankingTabClientScenarioAction client_scenario_action = 2;
  BankingTabDialogButtonDismissAction dismiss_action = 3;
  string id = 4;
}
message BankingTabDialog {
  string main_text = 1;
  BankingTabDialogButton primary_button = 2;
  BankingTabDialogButton secondary_button = 3;
  string title = 5;
  string id = 6;
}
message BankingTabClientRouteAction {
  string url = 1;
}
message BankingTabBankingOption {
  string id = 1;
  string main_text = 2;
  string secondary_text = 3;
  UiImage image = 4;
  BankingTabAppearance appearance = 5;
  BankingTabClientScenarioAction client_scenario_action = 6;
  BankingTabDialog dialog = 7;
  BankingTabClientRouteAction client_route_action = 8;
  bool is_badged = 9;
  bool has_new_pill = 10;
}
message BankingTabBorrowOption {
  string id = 1;
}
enum BankingTabTextAlignment {
  option allow_alias = true;
  LEFT = 1;
  RIGHT = 2;
  CENTER = 3;
  JUSTIFIED = 4;
}
message BankingTabText {
  string text = 1;
  BankingTabTextAlignment alignment = 2;
}
message BankingTabUpsellOptionButton {
  string button_text = 1;
  BankingTabClientRouteAction client_route_action = 2;
}
message BankingTabUpsellOption {
  Image image = 1;
  BankingTabText header_ = 2;
  BankingTabText description = 3;
  BankingTabUpsellOptionButton button = 4;
}
message BankingTabTaxesOption {
  string id = 1;
  string main_text = 2;
  string secondary_text = 3;
  UiImage image = 4;
  BankingTabAppearance appearance = 5;
  BankingTabClientRouteAction client_route_action = 6;
  bool is_badged = 7;
}
message BankingTabOptions {
  BankingTabBankingOption banking_option = 1;
  BankingTabBorrowOption borrow_option = 2;
  BankingTabUpsellOption upsell_option = 3;
  BankingTabTaxesOption taxes_option = 4;
}
message BankingTabBankingTabSection {
  BankingTabBankingTabSectionHeaderBlock header_block = 1;
  repeated BankingTabOptions banking_options = 2;
}
message BankingTabDisclosure {
  string text = 1;
}
message BankingTab {
  repeated BankingTabBankingTabSection banking_tab_sections = 1;
  BankingTabDisclosure disclosure = 2;
}
message UiJurisdictionConfig {
  CurrencyCode default_currency = 1;
  Country country_code = 2;
  repeated CurrencyCode available_p2p_currencies = 3;
  repeated Region available_p2p_target_regions = 4;
}
enum EnableCryptocurrencyTransferOutStatus {
  option allow_alias = true;
  DISALLOWED = 1;
  CAN_ENABLE = 2;
  PENDING_REVIEW = 3;
  ENABLED = 4;
  MISMATCHED_IDV = 5;
}
enum EnableCryptocurrencyTransferInStatus {
  option allow_alias = true;
  DEPOSITS_DISALLOWED = 1;
  DEPOSITS_CAN_ENABLE = 2;
  DEPOSITS_PENDING_REVIEW = 3;
  DEPOSITS_ENABLED = 4;
  DEPOSITS_MISMATCHED_IDV = 5;
}
message UiCryptoCurrency {
  BitcoinDisplayUnits bitcoin_display_units = 1;
  bool bitcoin_withdrawal_enabled = 2;
  bool bitcoin_deposit_enabled = 3;
  EnableCryptocurrencyTransferOutStatus enable_cryptocurrency_transfer_out_status = 4;
  string enable_cryptocurrency_transfer_out_button_text = 5;
  EnableCryptocurrencyTransferInStatus enable_cryptocurrency_transfer_in_status = 6;
  string enable_cryptocurrency_transfer_in_button_text = 7;
  bool bitcoin_p2p_enabled = 8;
  int64 accepted_crypto_terms_at = 9;
}
message CurrencyInfo {
  CurrencyCode code = 1;
  string display_name = 2;
}
message ExchangeRate {
  CurrencyInfo from_currency = 1;
  string rate = 3;
}
message ExchangeData {
  CurrencyCode base_currency_code = 1;
  repeated ExchangeRate rates = 2;
}
message UiExchangeData {
  ExchangeData exchange_data = 1;
}
message UiNotificationPreference {
  UiAlias alias = 1;
  bool enabled = 2;
}
enum DataPrivacySettingSystem {
  option allow_alias = true;
  APPSFLYER = 1;
  ANALYTICS = 2;
  CRASH_REPORTING = 3;
}
message DataPrivacySetting {
  DataPrivacySettingSystem system = 1;
  bool enabled = 2;
}
message DataPrivacySettings {
  repeated DataPrivacySetting settings = 1;
}
message PasswordInfo {
  int64 version = 1;
  bool has_password = 2;
}
message OTPInfo {
  bool otp_enabled = 1;
}
enum SponsorshipSTATE {
  option allow_alias = true;
  PENDING = 0;
  ACTIVE = 1;
  CANCELED = 2;
  SUSPENDED = 3;
}
message SendCashCta {
  string url = 1;
  string text = 2;
}
message LockCardWarning {
  string text = 1;
}
message Text {
  string text = 1;
}
message Dependent {
  string customer_token = 1;
  SponsorshipSTATE status = 2;
  SendCashCta send_cash_cta = 3;
  LockCardWarning lock_card_warning = 4;
  Text lock_card_error = 5;
}
message LinkText {
  string url = 1;
  string text = 2;
}
message YearMonthDay {
  int32 year = 1;
  int32 month_of_year = 2;
  int32 day_of_month = 3;
}
message GraduationCta {
  string title = 1;
  string subtext = 2;
  string button_text = 3;
  string url = 4;
}
message Sponsor {
  string customer_token = 1;
  SponsorshipSTATE status = 2;
  LinkText primary_cta = 3;
  int64 sponsorship_requested_at = 5;
  YearMonthDay graduation_eligible_date = 6;
  GraduationCta graduation_cta = 7;
}
message FamilyAccount {
  Dependent dependent = 1;
  Sponsor sponsor = 2;
}
message UiFamilyAccount {
  FamilyAccount family_account = 1;
}
enum AutomationAutomationTrigger {
  option allow_alias = true;
  CASH_CARD_PURCHASE = 0;
}
message AutomationAllocationStrategyRoundUp {
  int32 multiplier = 1;
}
message AutomationAllocationStrategyPercentage {
  int32 basis_points = 1;
}
message AutomationAllocationStrategyFixed {
  Money amount = 1;
}
message AutomationAllocationStrategy {
  AutomationAllocationStrategyRoundUp round_up = 1;
  AutomationAllocationStrategyPercentage percentage = 2;
  AutomationAllocationStrategyFixed fixed = 3;
}
message Instant {}
message Automation {
  string token = 1;
  string customer_token = 2;
  int32 version = 3;
  AutomationAutomationStatus status = 4;
  AutomationAutomationTrigger trigger = 5;
  AutomationAllocationStrategy allocation_strategy = 6;
  AutomationAutomationTarget target = 7;
  Instant disabled_at = 8;
  Instant enabled_at = 9;
}
message UiInvestingAutomationUiAutomationStatistics {
  Money total_amount_invested = 1;
  int32 number_of_executions = 2;
}
message UiInvestingAutomation {
  Automation automation = 1;
  UiInvestingAutomationUiAutomationStatistics statistics = 2;
}
enum LendingInfoAccessDataDetailRowIcon {
  option allow_alias = true;
  CARD = 1;
  DEPOSIT = 2;
  BANK = 3;
}
message LendingInfoAccessDataDetailRow {
  LendingInfoAccessDataDetailRowIcon icon = 1;
  string title = 2;
  string subtitle = 3;
}
message LendingInfoAccessData {
  string image_url = 1;
  string header_ = 2;
  string subtitle = 3;
  repeated LendingInfoAccessDataDetailRow detail_rows = 4;
  string footer_markdown = 5;
}
message LendingInfoFirstTimeBorrowDataHomeScreenBulletContentSupportData {
  string button_title = 1;
  string support_node = 2;
}
message LendingInfoFirstTimeBorrowDataHomeScreenBulletContent {
  repeated string bullets = 1;
  LendingInfoFirstTimeBorrowDataHomeScreenBulletContentSupportData support_data = 2;
}
message LendingInfoFirstTimeBorrowDataHomeScreenPromoContent {
  string title = 1;
  string subtitle = 2;
  string button_title = 3;
  string button_support_node = 4;
  string button_url = 5;
}
message LendingInfoFirstTimeBorrowDataHomeScreenNoticeContent {
  string notice_title = 1;
  string notice_body = 2;
}
message LendingInfoFirstTimeBorrowDataHomeScreen {
  string title = 1;
  string subtitle = 2;
  Image image = 3;
  LendingInfoFirstTimeBorrowDataHomeScreenBulletContent bullets = 4;
  string button_title = 5;
  LendingInfoFirstTimeBorrowDataHomeScreenPromoContent promo_content = 6;
  LendingInfoFirstTimeBorrowDataHomeScreenNoticeContent notice_content = 7;
  string client_route = 8;
}
message LendingInfoFirstTimeBorrowDataLimitCheckerScreen {
  string title = 1;
  string subtitle = 2;
  repeated string bullets = 3;
  int32 animation_millis = 4;
}
message LendingInfoFirstTimeBorrowDataConfirmationScreen {
  string title = 1;
  Animation animation = 2;
  string body = 3;
  string primary_button_title = 4;
  string secondary_button_title = 5;
  int64 credit_limit_cents = 6;
}
enum LendingInfoFirstTimeBorrowDataLimitInfoScreenDetailRowIcon {
  option allow_alias = true;
  CARD = 1;
  DEPOSIT = 2;
  BANK = 3;
}
message LendingInfoFirstTimeBorrowDataLimitInfoScreenDetailRow {
  LendingInfoFirstTimeBorrowDataLimitInfoScreenDetailRowIcon icon = 1;
  string title = 2;
  string subtitle = 3;
}
message LendingInfoFirstTimeBorrowDataLimitInfoScreen {
  string header_ = 1;
  string subtitle = 2;
  repeated LendingInfoFirstTimeBorrowDataLimitInfoScreenDetailRow detail_rows = 3;
  string dismiss_button_title = 4;
}
message LendingInfoFirstTimeBorrowData {
  LendingInfoFirstTimeBorrowDataHomeScreen home_screen = 1;
  LendingInfoFirstTimeBorrowDataLimitCheckerScreen limit_checker_screen = 2;
  LendingInfoFirstTimeBorrowDataConfirmationScreen confirmation_screen = 3;
  LendingInfoFirstTimeBorrowDataLimitInfoScreen limit_info_screen = 4;
}
message LendingInfo {
  bool potential_future_borrower = 1;
  LendingInfoAccessData access_data = 2;
  LendingInfoFirstTimeBorrowData first_time_borrow_data = 3;
}
message SyncTrustedContact {
  string first_name = 1;
  string last_name = 2;
  string email_address = 3;
  string phone_number = 4;
  GlobalAddress address = 5;
}
message UiIdvState {
  bool has_verified_identity = 1;
  int64 can_attempt_electronic_idv_at = 2;
}
enum CryptoEligibilityStatus {
  option allow_alias = true;
  ELIGIBILITY_STATUS_UNSPECIFIED = 0;
  PENDING_APPROVAL = 1;
  CAN_BE_ELIGIBLE = 2;
  ELIGIBLE = 3;
  INELIGIBLE = 4;
}
message CryptoEligibilities {
  CryptoEligibilityStatus btc_p2p_send = 1;
  CryptoEligibilityStatus btc_p2p_receive = 2;
  CryptoEligibilityStatus btc_withdraw = 3;
  CryptoEligibilityStatus btc_deposit = 4;
  CryptoEligibilityStatus btc_lightning_withdraw = 5;
  CryptoEligibilityStatus btc_lightning_deposit = 6;
}
message CryptocurrencyProfile {
  CryptoEligibilities eligibilities = 1;
  BitcoinDisplayUnits bitcoin_display_units = 2;
}
message Favorite {
  string favorite_customer_token = 1;
}
message SavingsAction {
  string client_route = 1;
}
message SavingsConfigNullState {
  string title = 1;
  string subtitle = 2;
  Image icon = 3;
  SavingsAction action = 4;
}
message SavingsConfig {
  SavingsConfigNullState no_folder_null_state = 1;
  google.protobuf.Any goal_celebration_animation = 2;
}
enum SavingsHomeSavingsOptionsSectionSavingsOptionRowRowImage {
  option allow_alias = true;
  AUTOMATION = 1;
  FLAG = 2;
}
message SavingsHomeSavingsOptionsSectionSavingsOptionRow {
  SavingsHomeSavingsOptionsSectionSavingsOptionRowRowImage image = 1;
  string title = 2;
  string subtitle = 3;
  SavingsAction action = 4;
  string accessibility_text = 5;
}
message SavingsHomeSavingsOptionsSection {
  repeated SavingsHomeSavingsOptionsSectionSavingsOptionRow rows = 1;
  string accessibility_text = 2;
}
message SavingsHomeActivitySection {
  string accessibility_text = 1;
}
message SplitButtonsButtonAction {
  string client_route = 1;
}
message SplitButtonsButton {
  string text = 1;
  SplitButtonsButtonAction action = 2;
}
message SplitButtons {
  SplitButtonsButton primary_button = 1;
  SplitButtonsButton secondary_button = 2;
}
message SavingsHomeTransfersSectionAddCashConfig {
  repeated Money quick_amounts = 1;
  Money initially_selected_amount = 2;
}
message SavingsHomeTransfersSection {
  SplitButtons buttons = 2;
  SavingsHomeTransfersSectionAddCashConfig add_cash_config = 3;
}
message SavingsHome {
  SavingsHomeSavingsOptionsSection options_section = 1;
  SavingsHomeActivitySection activity_section = 2;
  SavingsHomeTransfersSection transfers_section = 3;
}
message PortfolioState {
  bool has_holdings = 2;
}
enum TradingStateDividendSetting {
  option allow_alias = true;
  SAVE = 1;
  REINVEST = 2;
}
message TradingState {
  TradingStateDividendSetting dividend_setting = 2;
}
message SavingsGoal {
  string token = 1;
  bool met_goal = 2;
  Money goal_amount = 3;
  string icon_unicode = 4;
}
message SavingsFolder {
  string instrument_token = 1;
  SavingsGoal active_goal = 2;
}
message Tigers {
  int64 tiger_count = 1;
  int64 fetch_version = 2;
}
message WiresAccountInfoAction {
  string client_route_url = 1;
}
message WiresAccountInfo {
  string routing_number = 1;
  string account_number = 2;
  string customer_name = 3;
  GlobalAddress bank_address = 4;
  ClientScenario client_scenario = 5;
  WiresAccountInfoAction action = 6;
}
enum UpgradeStatus {
  option allow_alias = true;
  NOT_STARTED = 0;
  STARTED = 1;
  COMPLETE = 2;
}
message UiTaxUpgrade {
  string customer_token = 1;
  UpgradeStatus upgrade_status = 2;
}
message UiEfileInfo {
  string customer_token = 1;
}
message UiCashLimits {
  StaticLimitGroup cash_limit_group = 1;
}
message SyncValue {
  SyncValueType type = 1;
  Instrument instrument = 3;
  ATMPicker atm_picker = 12;
  BalanceSnapshot balance_snapshot = 13;
  UiDda dda = 14;
  UiAccess access = 15;
  UiAddress address = 16;
  UiStatusAndLimits status_and_limits = 17;
  UiAppMesssages app_messages = 18;
  UiCoreCustomer core_customer = 19;
  UiExperiments experiments = 20;
  UiIssuedCard issued_card = 21;
  UiMarketing marketing = 22;
  UiP2pSettings p2p_settings = 23;
  UiScheduledPayments scheduled_payments = 24;
  UiTax tax = 25;
  UiPublicProfile public_profile = 26;
  ProfileAlias profile_alias = 27;
  LoyaltyProfile loyalty_profile = 28;
  CheckDepositProfile check_deposit_profile = 29;
  NotificationsSettings investment_notification_settings = 30;
  ProfileDetails profile_details = 31;
  Wallet wallet = 32;
  BankingTab banking_tab = 33;
  UiJurisdictionConfig jurisdiction_config = 34;
  UiCryptoCurrency cryptocurrency = 35;
  UiExchangeData exchange_data = 36;
  UiNotificationPreference notification_preference = 37;
  DataPrivacySettings data_privacy_settings = 38;
  PasswordInfo password_info = 39;
  OTPInfo otp_info = 40;
  UiFamilyAccount family_account = 41;
  UiInvestingAutomation investing_automation = 42;
  LendingInfo lending_info = 43;
  SyncTrustedContact trusted_contact = 44;
  UiIdvState idv_state = 45;
  CryptocurrencyProfile cryptocurrencyProfile = 46;
  NotificationsSettings invest_automator_notification_settings = 47;
  Favorite favorite = 48;
  SavingsConfig savings_config = 49;
  SavingsHome savings_home = 50;
  PortfolioState invest_portfolio_state = 51;
  TradingState invest_trading_state = 52;
  SavingsFolder savings_folder = 53;
  Tigers tigers = 54;
  WiresAccountInfo wires_account_info = 55;
  UiTaxUpgrade tax_upgrade = 56;
  UiEfileInfo efile_info = 57;
  UiCashLimits cash_limits = 58;
}
message CreditLineFirstTimeBorrowDataPromoContent {
  string title = 1;
  string subtitle = 2;
  string button_title = 3;
  string button_support_node = 4;
  string button_url = 5;
}
message LocalizableStringLocalizableStringArgument {
  string name = 1;
  string string_value = 2;
  int64 long_value = 3;
  double double_value = 4;
  Money money_value = 5;
  Instant timestamp_value = 6;
}
enum LocalizableStringMoneyFormatter {
  option allow_alias = true;
  MONEY_FORMATTER_UNSPECIFIED = 0;
  STANDARD = 1;
  ACCOUNTING = 2;
  CODE = 3;
  COMPACT = 4;
  COMPACT_CODE = 5;
  COMPACT_POSITIVE_SIGN_ONLY = 6;
}
enum LocalizableStringDateTimeFormat {
  option allow_alias = true;
  DATE_TIME_FORMAT_UNSPECIFIED = 0;
  FULL = 1;
  LONG = 2;
  MEDIUM = 3;
  SHORT = 4;
  NONE = 5;
}
message LocalizableString {
  string key = 1;
  repeated LocalizableStringLocalizableStringArgument arguments = 2;
  LocalizableStringMoneyFormatter moneyFormatter = 3;
  string timezone = 4;
  LocalizableStringDateTimeFormat date_format = 5;
  LocalizableStringDateTimeFormat time_format = 6;
  string date_time_skeleton = 7;
}
message CreditLineFirstTimeBorrowData {
  string title = 1;
  string subtitle = 2;
  string button_title = 3;
  repeated string bullets = 4;
  string support_node = 5;
  string support_button_title = 6;
  CreditLineFirstTimeBorrowDataPromoContent promo_content = 7;
  string notice_title = 8;
  string notice_body = 9;
  LocalizableString localizable_title = 10;
}
message CreditLineUnlockBorrowData {
  string unlock_button_title = 1;
  ClientScenario client_scenario = 4;
}
enum CreditLineCreditLineStatusIcon {
  option allow_alias = true;
  EXCEPTION = 0;
}
enum LendingProduct {
  option allow_alias = true;
  BORROW = 1;
  BNPL = 2;
  CF_BNPL = 3;
}
enum CreditLineCreditLineStatusDataIcon {
  option allow_alias = true;
  CHECKMARK = 1;
  INFO = 2;
}
message CreditLineCreditLineStatusData {
  CreditLineCreditLineStatusDataIcon icon = 1;
  string title = 2;
  string subtitle = 3;
  bool badged = 4;
  ClientScenario client_scenario = 5;
  string client_route = 6;
}
enum CreditLineCreditLineLimitDataBulletIcon {
  option allow_alias = true;
  TIME = 1;
  DEPOSIT = 2;
  BANK = 3;
}
message CreditLineCreditLineLimitDataBullet {
  string text = 1;
  CreditLineCreditLineLimitDataBulletIcon icon = 2;
}
message CreditLineCreditLineLimitData {
  string title = 1;
  string subtitle = 2;
  string additionalInfoText = 3;
  repeated CreditLineCreditLineLimitDataBullet bullets = 4;
  string url = 5;
}
enum CreditLineAlertDisplayTime {
  option allow_alias = true;
  BORROW_ENTRY = 0;
}
message CreditLineAlert {
  string message = 1;
  string dismiss_button_title = 2;
  string title = 3;
  CreditLineAlertDisplayTime displayTime = 4;
}
message CreditLine {
  string token = 1;
  Money credit_limit = 2;
  Money available_amount = 3;
  Money outstanding_amount = 4;
  int32 setup_fee_bps = 5;
  repeated Money quick_amounts = 6;
  Money minimum_loan_amount = 7;
  CreditLineFirstTimeBorrowData first_time_borrow_data = 8;
  CreditLineUnlockBorrowData unlock_borrow_data = 9;
  string instrument_display_name = 10;
  CreditLineCreditLineStatusIcon credit_line_status_icon = 12;
  bool skip_loan_amount_selection = 13;
  string instrument_subtitle = 14;
  LendingProduct lending_product = 15;
  CreditLineCreditLineStatusData credit_line_status_data = 16;
  CreditLineCreditLineLimitData credit_line_limit_data = 17;
  CreditLineAlert alert = 18;
}
message LoanDetailRow {
  string label = 1;
  string value_ = 2;
}
enum LoanState {
  option allow_alias = true;
  OPEN = 1;
  COMPLETE = 2;
  OVERDUE = 3;
  WRITTEN_OFF = 4;
  LONG_OVERDUE = 5;
}
message LoanBnplData {
  string split_payment_description = 1;
  string loan_details_description = 2;
  string merchant_customer_token = 3;
}
message Loan {
  string token = 1;
  string credit_line_token = 2;
  Money principal_amount = 3;
  Money setup_fee_amount = 4;
  Money outstanding_amount = 5;
  int64 borrowed_at = 6;
  Money late_fee_amount = 7;
  Money interest_amount = 8;
  int32 setup_fee_bps = 9;
  repeated LoanDetailRow detail_rows = 10;
  LoanState state = 11;
  int64 due_at = 12;
  LendingProduct lending_product = 13;
  LoanBnplData bnpl_data = 14;
}
enum LoanTransactionType {
  option allow_alias = true;
  PAYMENT = 1;
  DRAWDOWN = 2;
  CHARGE = 3;
  REFUND = 4;
  ADJUSTMENT = 5;
  OVERDUE_PAYMENT_PLAN_PAYMENT = 6;
}
enum LoanTransactionLoanPaymentState {
  option allow_alias = true;
  SCHEDULED = 1;
  COMPLETED = 2;
  SKIPPED = 3;
  MISSED = 4;
  OVERDUE = 5;
  CANCELLED = 6;
}
message LoanTransactionLoanPayment {
  LoanTransactionLoanPaymentState state = 1;
  Money amount = 2;
}
message LoanTransactionLoanDrawdown {
  Money amount = 1;
}
enum LoanTransactionLoanChargeChargeType {
  option allow_alias = true;
  LATE_FEE = 1;
  INTEREST = 2;
}
message LoanTransactionLoanCharge {
  LoanTransactionLoanChargeChargeType charge_type = 1;
  Money amount = 2;
  Money missed_amount = 3;
}
message LoanTransactionLoanRefund {
  Money amount = 1;
}
message LoanTransactionLoanAdjustment {
  Money amount = 1;
}
message LoanTransaction {
  LoanTransactionType type = 1;
  string token = 2;
  string loan_token = 3;
  LoanTransactionLoanPayment loan_payment = 4;
  string credit_line_token = 5;
  int64 date = 6;
  LoanTransactionLoanDrawdown loan_drawdown = 7;
  LoanTransactionLoanCharge loan_charge = 8;
  string activity_token = 9;
  LoanTransactionLoanRefund loan_refund = 10;
  LoanTransactionLoanAdjustment loan_adjustment = 11;
  LendingProduct lending_product = 12;
  string transaction_detail_text = 13;
  string detailDescription = 14;
}
message UiInvitation {
  bytes hashed_alias = 1;
}
message SyncInvitation {
  UiInvitation invitation = 1;
}
message SyncRecurringPreference {
  ScheduledTransactionPreference preference = 1;
}
enum SyncInvestmentCategoryPrefixIcon {
  option allow_alias = true;
  UP_ARROW = 1;
  DOWN_ARROW = 2;
}
enum SyncInvestmentCategoryCategoryType {
  option allow_alias = true;
  CATEGORY = 1;
  SUBCATEGORY = 2;
  TOP_LEVEL_UI = 3;
  PERFORMANCE = 4;
  ADVANCED = 5;
}
message SyncInvestmentCategory {
  string token = 1;
  string name = 2;
  SyncInvestmentCategoryPrefixIcon prefix_icon = 3;
  string image_url = 4;
  string accent_color = 5;
  string parent_category_token = 6;
  repeated string investment_entity_tokens = 7;
  repeated string ui_filter_group_tokens = 8;
  SyncInvestmentCategoryCategoryType type = 9;
  string description = 10;
  string filter_description = 11;
  Color category_color = 12;
  int32 ui_ordering = 13;
  bool show_ipo_preview = 14;
}
enum SyncInvestmentFilterGroupSubfilterSubfilterType {
  option allow_alias = true;
  INCREMENTAL = 1;
  SELECTION = 2;
}
enum SyncInvestmentFilterGroupSubfilterOptionOptionGlyph {
  option allow_alias = true;
  UP_ARROW = 1;
  DOWN_ARROW = 2;
}
message SyncInvestmentFilterGroupSubfilterOption {
  string token = 1;
  string name = 2;
  SyncInvestmentFilterGroupSubfilterOptionOptionGlyph glyph = 3;
}
message SyncInvestmentFilterGroupSubfilter {
  string token = 1;
  SyncInvestmentFilterGroupSubfilterSubfilterType type = 2;
  string name = 3;
  int64 placeholder_index = 4;
  string placeholder_text = 5;
  repeated SyncInvestmentFilterGroupSubfilterOption options = 6;
}
message SyncInvestmentFilterGroupCategoryMapNode {
  string option_token = 1;
  string category_token = 2;
  repeated SyncInvestmentFilterGroupCategoryMapNode sub_nodes = 3;
}
enum SyncInvestmentFilterGroupJoinType {
  option allow_alias = true;
  INTERSECTION = 1;
  UNION = 2;
}
message SyncInvestmentFilterGroup {
  string token = 1;
  string name = 2;
  repeated string category_tokens = 3;
  repeated SyncInvestmentFilterGroupSubfilter subfilters = 5;
  repeated SyncInvestmentFilterGroupCategoryMapNode category_map = 6;
  bool can_select_multiple_categories = 7;
  string name_plural = 8;
  SyncInvestmentFilterGroupJoinType joinType = 9;
}
enum SyncInvestmentEntityRankingRankingType {
  option allow_alias = true;
  SEARCH_AND_CATEGORY_VIEWS = 0;
}
message SyncInvestmentEntityRanking {
  SyncInvestmentEntityRankingRankingType ranking_type = 1;
  repeated string investment_entity_tokens = 2;
}
enum SyncInvestmentIncentiveIncentiveState {
  option allow_alias = true;
  UNCLAIMED = 1;
  CLAIMED = 2;
  INELIGIBLE = 3;
}
message SyncInvestmentIncentive {
  string investment_incentive_token = 1;
  Money offer_amount = 2;
  SyncInvestmentIncentiveIncentiveState state = 3;
  Image incentive_icon = 4;
  string text = 5;
  int64 incentive_expiration_timestamp = 6;
}
message UiCheckDeposit {
  string transaction_token = 1;
  string state_reason = 2;
  string check_deposit_token = 3;
  string render_json = 4;
}
message SyncCheckDepositReceiptEntity {
  UiCheckDeposit receipt = 1;
}
message EncryptedSyncEntity {
  bytes encrypted_sync_entity = 1;
  SyncEntityType type = 2;
  SyncValueType sync_value_type = 3;
}
message NotificationSettingsMessageConfig {
  string settings_option_id = 1;
  string notification_channel_id = 2;
}
message InvestDefaultNotificationSettings {
  repeated NotificationSettingsOption settings = 1;
  repeated NotificationSettingsMessageConfig message_settings = 2;
}
message CashHouseScreen {
  string screen_json = 1;
}
enum DocumentCategoryEntityRenderStyle {
  option allow_alias = true;
  INVALID = 0;
  REVERSE_CHRONO_LIST = 1;
  CATEGORY_LIST_BY_PRIORITY = 2;
  REVERSE_CHRONO_LIST_BY_YEAR = 3;
}
message AppVersion {
  Platform platform = 1;
  int32 major_version = 2;
  int32 minor_version = 3;
  int32 patch_version = 4;
}
message VersionData {
  AppVersion min_android_version = 1;
  AppVersion max_android_version = 2;
}
message DocumentCategoryEntity {
  string category = 1;
  string parent_category = 2;
  string display_name = 3;
  int32 order = 4;
  DocumentCategoryEntityRenderStyle render_style = 5;
  VersionData version_data = 6;
}
message DocumentEntity {
  string category = 1;
  string token = 2;
  string title = 3;
  string client_route = 4;
  string url = 5;
  VersionData version_data = 6;
}
enum SyncBusinessGrantActionType {
  option allow_alias = true;
  ONE_TIME_PAYMENT = 1;
  ON_FILE_PAYMENT = 2;
  UNLINKED_REFUND = 3;
  LINK_ACCOUNT = 4;
}
message SyncBusinessGrant {
  string id = 1;
  string merchant_id = 2;
  int64 updated_at = 3;
  int64 created_at = 4;
  int64 expires_at = 5;
  string client_id = 6;
  SyncBusinessGrantActionType action_type = 7;
  string account_reference_id = 8;
}
message GiftCardDetails {
  string icon = 1;
  string note = 2;
}
message GiftCardGiftCardSender {
  string from_customer_token = 1;
  string note = 2;
  string amount_text = 3;
}
message GiftCardOptions {
  string label = 1;
  ClientScenario client_scenario = 2;
}
message GiftCard {
  string token = 1;
  string status = 2;
  string title = 3;
  string subtitle = 4;
  Color themed_color = 5;
  Image logo = 6;
  repeated GiftCardDetails details = 7;
  repeated GiftCardGiftCardSender senders = 8;
  string activation_text = 9;
  string original_amount_text = 10;
  string current_amount_text = 11;
  string stored_value_balance_token = 12;
  string gift_card_type_description = 13;
  string current_status_description_text = 14;
  Image card = 15;
  repeated GiftCardOptions options = 16;
}
message SyncGiftCardEntity {
  GiftCard gift_card = 1;
}
message CryptoPayrollPreference {
  int32 allocation_bps = 1;
  CurrencyCode source_currency = 2;
  CurrencyCode target_currency = 3;
}
message SyncCryptoPayrollPreference {
  CryptoPayrollPreference preference = 1;
}
enum AccountType {
  option allow_alias = true;
  CHECKING = 1;
  SAVINGS = 2;
  SPONSORED_CHECKING = 3;
  SPONSORED_SAVINGS = 4;
}
message Account {
  string customer_token = 1;
  AccountType account_type = 2;
  string account_token = 3;
  bool is_sponsored_account = 4;
  string display_name = 5;
}
message SyncAccountStatementEntity {
  Account account = 1;
}
enum DomainType {
  option allow_alias = true;
  DO_NOT_USE_DOMAIN_TYPE = 0;
  GLOBAL_INVEST_NOTIFICATION_SETTINGS = 1;
  AVAILABLE_CUSTOMER_ACCOUNT_STATEMENTS = 2;
  LIGHTNING_WITHDRAWAL = 3;
  CRYPTO_PAYMENT_CUSTOMER = 4;
  INVESTMENT_CORPORATE_ACTION = 5;
  CHECK_DEPOSIT = 6;
  INVEST_CRYPTO_ORDER = 7;
  INVESTMENT_DIVIDEND = 8;
  LIBRARIAN_DOCUMENT = 9;
  GIFT_CARD = 10;
  GIFT_CARD_PAYMENT = 11;
  GRANT = 12;
  HOLDING_ENTITY = 13;
  BTC_PAYMENT = 14;
  INVEST_P2P_PAYMENT = 15;
  INSTANT_PAY_SETTLEMENT = 16;
  LOAN_TRANSACTION_ACTIVITY = 17;
  NEW_DEVICE_LOGINS = 18;
  INVESTMENT_ORDER = 19;
  PENDING_REFERRAL = 20;
  PAPER_MONEY_DEPOSIT = 21;
  PAYMENT_SCHEDULE = 22;
  PAY_WITH_CASH_PAYMENT = 23;
  PAY_WITH_CASH_REFUND = 24;
  RECEIPT = 25;
  RECURRING_PREFERENCE = 26;
  SPONSORED_ACCOUNT_ACTIVITY = 27;
  CASH_HOUSE_SCREEN = 28;
  SELECTED_REWARD = 29;
  TRANSFER = 30;
  CRYPTO_PAYROLL_PREFERENCE = 31;
  INVESTMENT_CATEGORY = 32;
  INVESTMENT_ENTITY_RANKING = 33;
  INVESTMENT_FILTER_GROUP = 34;
  INVESTMENT_ENTITY = 35;
  INVESTMENT_INCENTIVE = 36;
  INVITATION = 37;
  LENDING_CREDIT_LINE = 38;
  LENDING_LOAN = 39;
  CREDIT_LINE = 40;
  LOAN_TRANSACTION_DATA = 41;
  LOYALTY_ACCOUNT = 42;
  LOYALTY_PROGRAM = 43;
  LOYALTY_ACTIVITY = 44;
  P2P_PAYMENT = 45;
  LEGACY_P2P_PAYMENT = 46;
  PEERMENTS_PAYMENT = 47;
  CUSTOMER = 48;
  MERCHANT = 49;
  UI_ACCESS = 50;
  ADDRESS = 51;
  PROFILE_ALIAS = 52;
  APP_MESSAGE = 53;
  BALANCE_SNAPSHOT = 54;
  ISSUED_CARD = 55;
  CORE_CUSTOMER = 56;
  CHECK_DEPOSIT_PROFILE = 57;
  UI_CRYPTO_CURRENCY = 58;
  DEMAND_DEPOSIT_ACCOUNT = 59;
  EXCHANGE_DATA = 60;
  EXPERIMENT = 61;
  FAMILY_ACCOUNT = 62;
  INSTRUMENT = 63;
  INVEST_NOTIFICATION_SETTINGS = 64;
  JURISDICTION_CONFIG = 65;
  LOYALTY_PROFILE = 66;
  UI_MARKETING = 67;
  NOTIFICATION_PREFERENCE = 68;
  P2P_SETTINGS = 69;
  PROFILE_DETAILS = 70;
  PUBLIC_PROFILE = 71;
  PASSWORD_INFO = 72;
  SCHEDULED_PAYMENT = 73;
  STATUS_AND_LIMITS = 74;
  TAX = 75;
  WALLET = 76;
  BANKING_TAB = 77;
  OTP_INFO = 78;
  BANKING_TRANSACTION = 79;
  CRYPTOCURRENCY_PROFILE = 80;
  BTC_RECURRING_BUY = 81;
  LIGHTNING_DEPOSIT = 82;
  ATM_PICKER = 83;
  AFTERPAY_SUMMARY = 84;
  SPECIAL_CUSTOMER = 85;
  CREDIT_LINE_INSTRUMENT = 86;
  LENDING_INFO = 87;
  CASH_INS = 88;
  CASH_OUTS = 89;
  TRUSTED_CONTACT = 90;
  IDV_STATE = 91;
  LIBRARIAN_DOCUMENT_CATEGORY = 92;
  INVESTING_AUTOMATION_CONFIGURATION = 93;
  INVESTING_AUTOMATION_EXECUTION = 94;
  LOAN = 95;
  FAVORITE = 96;
  INVEST_STATE = 97;
  SAVINGS_HOME = 98;
  SAVINGS_CONFIG = 99;
  SAVINGS_FOLDER = 100;
  TIGERS = 101;
  REMITTANCE_PAYMENT = 102;
  REMITTANCE_RECIPIENT = 103;
  TAXUPG = 104;
  TAXEFI = 105;
  SAVINGS_INTERNAL_TRANSFER = 106;
  CASH_LIMITS = 107;
}
message SyncEntity {
  SyncEntityType type = 1;
  string entity_id = 2;
  SyncPayment payment = 3;
  SyncCustomer customer = 4;
  SyncLoyaltyAccount loyalty_account = 5;
  SyncRewardSelection reward_selection = 6;
  SyncLoyaltyProgram loyalty_program = 7;
  SyncInvestmentHolding investment_holding = 8;
  SyncInvestmentEntity investment_entity = 9;
  int64 version = 10;
  SyncReceiptEntity receipt_entity = 12;
  SyncValue sync_value = 13;
  int64 display_date = 15;
  CreditLine credit_line = 16;
  Loan loan = 17;
  LoanTransaction loan_transaction = 18;
  SyncInvitation invitation = 19;
  SyncRecurringPreference recurring_preference = 20;
  SyncInvestmentCategory investment_category = 21;
  SyncInvestmentFilterGroup investment_filter_group = 22;
  SyncInvestmentEntityRanking investment_entity_ranking = 23;
  SyncInvestmentIncentive investment_incentive = 24;
  SyncCheckDepositReceiptEntity check_deposit_receipt_entity = 25;
  EncryptedSyncEntity encrypted_sync_entity = 26;
  InvestDefaultNotificationSettings invest_default_notification_settings = 27;
  bool is_unrendered = 28;
  CashHouseScreen cash_house_screen = 29;
  bool deleted = 30;
  DocumentCategoryEntity document_category_entity = 32;
  DocumentEntity document_entity = 33;
  SyncBusinessGrant business_grant = 34;
  SyncGiftCardEntity gift_card = 35;
  SyncCryptoPayrollPreference crypto_payroll_preference = 36;
  SyncAccountStatementEntity account_statement = 37;
  DomainType domain_type = 38;
  int64 client_sync_stored_at = 39;
}
message UiRewardAvatar {
  string url = 1;
  string color = 2;
  Image image = 3;
  Color themed_color = 4;
}
message UiRewardAvatars {
  repeated UiRewardAvatar reward_avatars = 1;
}
enum UiBoostAttributeType {
  option allow_alias = true;
  EXPIRATION = 1;
  LOCKED = 2;
  TRENDING = 3;
  ONLINE_ONLY = 4;
}
message UiBoostAttribute {
  UiBoostAttributeType type = 1;
}
message UiReward {
  string token = 1;
  string category = 2;
  UiRewardAvatars reward_avatars = 3;
  string title = 4;
  string main_text = 5;
  string full_title_text = 7;
  int64 expiration_date_time_ms = 8;
  repeated UiBoostAttribute boost_attributes = 9;
  int64 activation_date_time_ms = 10;
  string discount_text = 11;
  bool draggable = 12;
  string merchant_name = 13;
  string affiliate_link_url = 14;
  repeated string merchant_tokens = 15;
  string user_agent = 16;
}
enum RewardSlotState {
  option allow_alias = true;
  LOCKED = 1;
  EMPTY = 2;
  OCCUPIED = 3;
}
message UiSelectedReward {
  string token = 1;
  string reward_token = 2;
}
message UiRewardSlot {
  string token = 1;
  RewardSlotState state = 2;
  UiSelectedReward selected_reward = 3;
}
message UiRewardProgramDetailsDetailRowReadOnly {}
message UiRewardProgramDetailsDetailRowOpenUrl {
  string url = 1;
}
message UiRewardProgramDetailsDetailRow {
  string label = 1;
  string value_ = 2;
  UiRewardProgramDetailsDetailRowReadOnly read_only = 3;
  UiRewardProgramDetailsDetailRowOpenUrl open_url = 4;
}
enum Icon {
  option allow_alias = true;
  TRENDING_ARROW = 1;
  MAX_UP_ARROW = 2;
  CLOCK = 3;
  LOCK = 4;
  PRICE_TAG = 5;
  RECURRING_ARROW = 6;
  RATE_LIMITING_PAUSE = 7;
  UNLOCKED = 8;
  PLAY = 9;
  CARD = 10;
  GLOBE = 11;
}
message IconAsset {
  string name = 1;
  string url = 2;
  Image image = 3;
}
message UiRewardProgramDetailsBoostDetail {
  Icon icon = 1;
  string detail_text = 2;
  IconAsset icon_asset = 3;
}
message UiRewardProgramDetails {
  string reward_token = 1;
  repeated UiRewardProgramDetailsDetailRow detail_rows = 2;
  string footer_text = 3;
  repeated UiRewardProgramDetailsBoostDetail boost_details = 4;
  string styled_footer_text = 5;
}
message UiRewardSelectionStateLocked {
  string styled_progress_text = 1;
}
message UiRewardSelectionStateUnlocked {}
message UiRewardSelectionStateUnlockInProgressButton {
  string label = 1;
  string url = 2;
}
message UiRewardSelectionStateUnlockInProgress {
  string fallback_text = 1;
  string styled_progress_text = 2;
  UiRewardSelectionStateUnlockInProgressButton button = 3;
}
message UiRewardSelectionState {
  string reward_token = 1;
  UiRewardSelectionStateLocked locked = 2;
  UiRewardSelectionStateUnlocked unlocked = 3;
  UiRewardSelectionStateUnlockInProgress unlock_in_progress = 4;
}
message RewardsData {
  repeated UiReward rewards = 1;
  repeated UiRewardSlot slots = 2;
  repeated string selectable_rewards_tokens = 3;
  bool show_rewards = 4;
  bool show_boost_video = 5;
  repeated UiRewardProgramDetails program_details = 7;
  bool new_to_boost = 8;
  repeated UiRewardSelectionState reward_selection_states = 9;
  repeated RewardSelection reward_selections = 10;
  repeated string ordered_reward_tokens = 11;
}
message TransferInstrumentMap {
  string source_instrument_token = 1;
  repeated string target_instrument_tokens = 2;
  CashInstrumentType source_type = 3;
  repeated CashInstrumentType target_types = 4;
}
message BalanceData {
  repeated TransferInstrumentMap supported_transfer_instruments = 1;
  bool cash_balance_home_screen_button_enabled = 2;
  int32 cash_balance_home_screen_button_priority = 3;
  bool adding_cash_enabled = 4;
  EnableCryptocurrencyTransferOutStatus enable_cryptocurrency_transfer_out_status = 8;
  string enable_cryptocurrency_transfer_out_button_text = 9;
  repeated StaticLimitGroup balance_limit_groups = 10;
  ScheduledReloadData scheduled_reload_data = 11;
  bool scheduled_reload_enabled = 12;
  EnableCryptocurrencyTransferInStatus enable_cryptocurrency_transfer_in_status = 13;
  string enable_cryptocurrency_transfer_in_button_text = 14;
  ScheduledReloadData scheduled_btc_buy_data = 15;
  bool scheduled_btc_buy_enabled = 16;
  bool check_deposits_enabled = 17;
  BalanceDataButton direct_deposit = 18;
  BalanceDataButton deposit_check = 19;
  BalanceDataButton dda_form = 20;
  bool bitcoin_p2p_enabled = 21;
}
message InstrumentLinkingOption {
  repeated CashInstrumentType instrument_types = 1;
  string title = 2;
  string description = 3;
  int64 fee_bps = 8;
  bool show_in_instrument_selector = 9;
}
message Profile {
  string full_name = 1;
  string photo_url = 2;
  bool require_passcode_confirmation = 4;
  repeated ProfileAlias aliases = 5;
  repeated NotificationPreference notification_preferences = 6;
  NearbyVisibility nearby_visibility = 7;
  string cashtag = 9;
  string cashtag_url = 10;
  string cashtag_url_display_text = 11;
  string synopsis = 12;
  RatePlan rate_plan = 13;
  bool cashtag_url_enabled = 14;
  bool can_upgrade_to_business = 15;
  bool is_verified_account = 16;
  bool app_message_notifications_enabled = 18;
  repeated string app_message_tokens = 19;
  repeated Instrument instruments = 20;
  string verification_instrument_token = 21;
  DepositPreference deposit_preference = 22;
  ScenarioPlanMap scenario_plan_map = 24;
  bool show_tax_information_link = 25;
  BalanceData balance_data = 28;
  bool has_passcode = 29;
  int64 customer_since = 30;
  GlobalAddress postal_address = 31;
  IssuedCard issued_card = 32;
  DepositPreferenceData deposit_preference_data = 33;
  string customer_token = 34;
  bool suppress_review_prompt = 35;
  int32 require_minimum_initiator_notes_length_for_requests = 36;
  CashDrawerData cash_drawer_data = 40;
  bool has_passed_idv = 41;
  CurrencyCode default_currency = 43;
  Country country_code = 44;
  DirectDepositAccount direct_deposit_account = 45;
  repeated InstrumentLinkingOption instrument_linking_options = 46;
  IncomingRequestPolicy incoming_request_policy = 48;
  repeated Region available_p2p_target_regions = 50;
  string cashtag_qr_image_url = 52;
  string cashtag_with_currency_symbol = 53;
  Region region = 54;
  string printable_cashtag_qr_image_url = 55;
  string cashtag_qr_svg_url = 56;
  bool sca_required = 57;
  bool direct_deposit_account_enabled = 58;
  repeated Instrument pending_instruments = 59;
  BitcoinDisplayUnits bitcoin_display_units = 60;
  CardScheme card_scheme = 63;
}
enum SessionStatus {
  option allow_alias = true;
  PARTIAL = 1;
  FULL = 2;
}
message ResponseContext {
  ScenarioPlan scenario_plan = 1;
  StatusResult status_result = 2;
  repeated UiPayment payments = 3;
  repeated UiCustomer customers = 4;
  Transfer transfer = 5;
  IssuedCard issued_card = 6;
  Instrument balance_instrument = 7;
  string dialog_message = 8;
  Country country_code = 9;
  string failure_message = 10;
  SyncEntitiesResponse sync_entities_data = 11;
  Instrument btc_balance_instrument = 13;
  DirectDepositAccount direct_deposit_account = 14;
  RewardsData rewards_data = 15;
  Profile profile = 16;
  string profile_token = 17;
  string session_token = 18;
  SessionStatus session_status = 19;
  string dialog_title = 20;
}
message SetNotificationPreferenceResponse {
  SetNotificationPreferenceResponseStatus status = 1;
  ResponseContext response_context = 2;
}
message ActivateDigitalWalletResponse {
  ResponseContext response_context = 1;
}
message AddOrUpdateRewardResponse {
  ResponseContext response_context = 1;
}
message AddReactionResponse {
  ResponseContext response_context = 1;
}
enum RewardStatusExpiration {
  option allow_alias = true;
  VALID = 0;
  EXPIRING = 1;
}
message RewardStatus {
  bool code_entry_enabled = 1;
  bool reward_screen_enabled = 2;
  string reward_button_text = 3;
  string reward_header_text = 4;
  string reward_main_text = 5;
  int32 completed_reward_payments = 6;
  int32 available_reward_payments = 7;
  Money reward_payment_amount = 8;
  RewardStatusExpiration expiration = 9;
  int32 reward_button_priority = 10;
  int32 minimum_code_length = 11;
}
message ApplyRewardCodeResponse {
  bool valid = 1;
  RewardStatus reward_status = 4;
  ResponseContext response_context = 5;
}
message ApproveCashAppPayResponse {
  ResponseContext response_context = 1;
}
enum CancelPaymentResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
}
message CancelPaymentResponse {
  CancelPaymentResponseStatus status = 1;
  UiPayment payment = 3;
  ResponseContext response_context = 6;
}
message CheckDepositResponse {
  ResponseContext response_context = 1;
}
message CheckRewardCodeResponse {
  bool valid = 1;
  string reward_text = 2;
  string inviter_photo_url = 3;
  string inviter_full_name = 4;
  string inviter_customer_token = 5;
}
enum CheckVersionResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  VERSION_OK = 1;
  UPGRADE_SUGGESTED = 2;
  UPGRADE_REQUIRED = 3;
}
message CheckVersionResponse {
  CheckVersionResponseStatus status = 1;
  string message = 2;
  string title = 3;
}
enum ClaimByPaymentTokenResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  ALREADY_CLAIMED = 2;
  FAILED = 3;
}
message ClaimByPaymentTokenResponse {
  ClaimByPaymentTokenResponseStatus status = 1;
  ResponseContext response_context = 7;
}
enum ClearProfilePhotoResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message ClearProfilePhotoResponse {
  ClearProfilePhotoResponseStatus status = 1;
}
message CompleteDigitalWalletTokenProvisioningResponse {
  ResponseContext response_context = 1;
}
enum CompleteScenarioResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message CompleteScenarioResponse {
  CompleteScenarioResponseStatus status = 1;
  ResponseContext response_context = 8;
}
message ConfirmDisclosureResponse {
  ResponseContext response_context = 1;
}
enum ConfirmPasscodeResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
  INVALID_PASSCODE = 3;
  TOO_MANY_ATTEMPTS = 4;
  CARD_BLOCKED = 5;
  FAILURE = 6;
}
message ConfirmPasscodeResponse {
  ConfirmPasscodeResponseStatus status = 1;
  string passcode_token = 6;
  ResponseContext response_context = 11;
}
enum ConfirmPaymentResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
  FAILED = 3;
}
message ConfirmPaymentResponse {
  ConfirmPaymentResponseStatus status = 1;
  UiPayment payment = 3;
  ResponseContext response_context = 9;
}
message EndFlowResponse {
  ResponseContext response_context = 1;
}
message ExecuteContractResponse {
  StatusResult status_result = 1;
  string message = 2;
  Instrument source_balance_instrument = 3;
  Instrument balance_instrument = 4;
  ResponseContext response_context = 5;
}
enum FindCustomersResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
enum FindCustomersResponseSort {
  option allow_alias = true;
  EXACT_LOCAL_SERVER = 0;
  LOCAL_EXACT_SERVER = 1;
}
message FindCustomersResponse {
  FindCustomersResponseStatus status = 1;
  string search_text = 2;
  repeated UiCustomer matches = 3;
  UiCustomer exact_match = 4;
  FindCustomersResponseSort sort = 5;
}
message FinishInstantPayAutoAdvanceResponse {
  ResponseContext response_context = 1;
}
message FinishInstantPayDirectDepositSwitchResponse {
  ResponseContext response_context = 1;
}
message FinishPinwheelLinkResponse {
  ResponseContext response_context = 1;
}
message FinishTutorialResponse {
  ResponseContext response_context = 1;
}
enum GetAppConfigResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
enum RecipientGroup {
  option allow_alias = true;
  NEARBY = 1;
  RECENTS = 2;
  SUGGESTIONS = 3;
}
message SuggestedRecipientsData {
  repeated UiCustomer suggested_customers = 1;
  repeated RecipientGroup groups = 2;
}
message RecipientConfig {
  SuggestedRecipientsData pay_data = 1;
  SuggestedRecipientsData request_data = 2;
  bool confirm_cashtag_recipients = 3;
}
enum InstrumentLinkingConfigIssuedCardDisabledStyle {
  option allow_alias = true;
  WHITE = 1;
  GREY = 2;
}
message InstrumentLinkingConfig {
  MenuItem menu_item_card = 1;
  MenuItem menu_item_bank_account = 2;
  string instrument_header_no_instrument_linked = 3;
  string instrument_description_no_instrument_linked = 4;
  string instrument_header_bank_account_linked = 5;
  string instrument_description_bank_account_linked = 6;
  MenuItem menu_item_credit_card = 7;
  int64 credit_card_fee_bps = 8;
  string instrument_header_no_instrument_linked_personal = 9;
  string instrument_description_no_instrument_linked_personal = 10;
  bool credit_card_linking_enabled = 11;
  int32 max_credit_card_prompts = 12;
  MenuItem menu_item_cash_balance = 13;
  bool cash_balance_enabled = 14;
  string customer_passcode_instrument_token = 17;
  repeated TransferInstrumentMap supported_transfer_instruments = 18;
  bool issued_cards_enabled = 19;
  bool bankbook_enabled = 20;
  InstrumentLinkingConfigIssuedCardDisabledStyle issued_card_disabled_style = 21;
  bool physical_issued_cards_enabled = 22;
  bool nfc_card_linking_enabled = 24;
  BankAccountLinkingConfig bank_account_linking_config = 27;
}
message SharingConfig {
  bool enabled = 1;
  SharingContent sharing_content = 2;
}
message SupportConfig {
  string contact_support_url = 2;
  string privacy_policy_url = 4;
  string terms_of_service_url = 11;
}
message PaymentHistoryConfig {
  string script_url = 1;
  string search_script_url = 2;
  repeated string transfer_customer_ids = 3;
  repeated string banking_transaction_customer_ids = 4;
  repeated string bitcoin_transaction_customer_ids = 5;
  repeated string lending_transaction_customer_ids = 6;
  repeated string referral_customer_ids = 7;
  repeated string top_level_hidden_payment_types = 8;
  repeated string loyalty_merchant_payment_activity_hidden_payment_types = 9;
  repeated string automated_investment_payment_types = 10;
}
message ClientDisplayTheme {
  string base_color = 1;
  string accent_color = 2;
}
message InstitutionDisplayInformation {
  string display_name = 1;
  string icon_url = 2;
  string banner_logo_url = 3;
  ClientDisplayTheme theme = 4;
  string username_hint_text = 5;
  string password_hint_text = 6;
  string pin_hint_text = 7;
  string help_button_label = 8;
  string submit_button_label = 9;
}
message InstitutionBankbookMenuItem {
  string label = 1;
  string url = 2;
}
message Institution {
  string institution_token = 1;
  InstitutionDisplayInformation display_info = 2;
  repeated InstitutionBankbookMenuItem help_menu_items = 3;
}
message InstitutionsConfig {
  repeated Institution institutions = 1;
}
message WebLoginConfig {
  string token = 1;
  int64 expires_at = 2;
}
message BlockersConfig {
  bool address_typeahead_enabled = 1;
  string add_cash_header_text = 2;
  Money target_balance_amount = 3;
}
message OfflineConfig {
  string external_status_url = 1;
  bool enabled = 2;
  StatusResult attempted_payment_status_result = 3;
  StatusResult attempted_bill_status_result = 4;
  StatusResult attempted_cash_out_status_result = 5;
  StatusResult attempted_add_cash_status_result = 6;
  repeated int64 retry_intervals = 7;
  StatusResult offline_payment_status_result = 8;
  StatusResult offline_bill_status_result = 9;
  StatusResult offline_cash_out_status_result = 10;
  StatusResult offline_add_cash_status_result = 11;
}
message Stamp {
  string name = 1;
  string accessibility_text = 2;
  string svg = 3;
  int32 min_scale = 4;
}
message StampsConfig {
  repeated Stamp stamps = 3;
}
message CryptocurrencyConfig {
  string btc_welcome_message = 1;
  string learn_about_btc_button_text = 2;
  string learn_about_btc_url = 3;
  string dismiss_button_text = 4;
  int64 minimum_withdrawal_limit_sats = 5;
}
message CashDrawerConfigGetCardAsset {
  string video_url = 1;
  string image_url = 2;
  int32 width = 3;
  int32 height = 4;
}
message CashDrawerConfig {
  CashDrawerConfigGetCardAsset get_card_asset = 1;
}
message ReactionConfig {
  int32 max_emoji_per_reaction = 1;
  repeated Reaction extended_picker_reactions = 2;
}
message ScheduledPaymentsConfigSupportedSchedule {
  string description = 1;
  ScheduleRFC2445 schedule = 2;
}
message ScheduledPaymentsConfig {
  repeated ScheduledPaymentsConfigSupportedSchedule supported_schedules = 1;
}
message BankingConfigStrings {
  string main_screen_title = 1;
  string main_screen_balance_subtitle = 2;
  string balance_screen_title = 3;
}
message BankingConfigRecurringDepositsDdaUpsell {
  string title = 1;
  string body = 2;
  string cta = 3;
}
message BankingConfig {
  BankingConfigStrings strings = 1;
  BankingConfigRecurringDepositsDdaUpsell recurring_deposits_dda_upsell = 2;
}
message CheckDepositConfigImage {
  string light_image_url = 1;
  string dark_image_url = 2;
}
message CheckDepositConfig {
  CheckDepositConfigImage image = 1;
  string description = 2;
}
message TreehouseConfig {
  string activity_manifest_url = 1;
  string money_tab_manifest_url = 2;
}
message FeatureFlagOption {
  string value_ = 1;
  string label = 2;
}
message FeatureFlag {
  string name = 1;
  string label = 2;
  repeated FeatureFlagOption options = 3;
  string selected_option_value = 4;
  bool client_data_enabled = 5;
}
enum CapabilityName {
  option allow_alias = true;
  UNDEFINED = 0;
  CRYPTO_BITCOIN = 1;
  CRYPTO_BITCOIN_P2P = 2;
  CRYPTO_BITCOIN_BUY = 3;
  CRYPTO_BITCOIN_SELL = 4;
  CRYPTO_BITCOIN_DEPOSIT = 5;
  CRYPTO_BITCOIN_WITHDRAW = 6;
  CRYPTO_BITCOIN_LIGHTNING = 7;
  CARDS = 8;
  INVESTING = 9;
  BANKING = 10;
  FIAT_P2P = 11;
  FIAT_P2P_MULTI_CURRENCY_SELECTION = 12;
  ONBOARDING_IDV_INTERNATIONAL = 13;
  CRYPTO_BITCOIN_LIGHTNING_DEPOSIT = 14;
  CRYPTO_BITCOIN_LIGHTNING_WITHDRAW = 15;
}
enum CapabilityStatus {
  option allow_alias = true;
  AVAILABLE = 1;
  UNAVAILABLE = 2;
}
message MarketCapability {
  CapabilityName name = 1;
  CapabilityStatus status = 2;
  string reason = 3;
}
message MarketCapabilitiesConfig {
  repeated MarketCapability capabilities = 1;
}
message GetAppConfigResponse {
  GetAppConfigResponseStatus status = 1;
  InvitationConfig invitation_config = 2;
  RatePlanConfig rate_plan_config = 4;
  RecipientConfig recipient_config = 5;
  InstrumentLinkingConfig instrument_linking_config = 7;
  SharingConfig sharing_config = 8;
  SupportConfig support_config = 10;
  PaymentHistoryConfig payment_history_config = 11;
  InstitutionsConfig institutions_config = 12;
  WebLoginConfig web_login_config = 13;
  BlockersConfig blockers_config = 14;
  OfflineConfig offline_config = 15;
  StampsConfig stamps_config = 16;
  CryptocurrencyConfig cryptocurrency_config = 17;
  CashDrawerConfig cash_drawer_config = 18;
  ReactionConfig reaction_config = 20;
  ScheduledPaymentsConfig scheduled_payments_config = 21;
  BankingConfig banking_config = 22;
  CheckDepositConfig check_deposit_config = 23;
  TreehouseConfig treehouse_config = 24;
  repeated FeatureFlag feature_flags = 25;
  MarketCapabilitiesConfig market_capabilities_config = 26;
}
message GetBoostConfigResponseBtcBoostUpsellButton {
  string label_text = 1;
  string url = 2;
}
message GetBoostConfigResponseBtcBoostUpsell {
  string image_url = 1;
  string title_text = 2;
  string body_text = 3;
  GetBoostConfigResponseBtcBoostUpsellButton primary_button = 4;
  Image image = 5;
}
message GetBoostConfigResponse {
  int64 boost_expiration_hint_threshold_basis_points = 1;
  GetBoostConfigResponseBtcBoostUpsell btc_boost_upsell = 2;
}
enum GetCashtagStatusResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  TOO_MANY_REQUESTS = 2;
}
enum CashtagStatus {
  option allow_alias = true;
  AVAILABLE = 1;
  INVALID_CASHTAG = 2;
  UNAVAILABLE = 3;
}
message GetCashtagStatusResponse {
  GetCashtagStatusResponseStatus status = 1;
  CashtagStatus cashtag_status = 2;
  string cashtag_url_display_text = 3;
  string failure_message = 4;
  string confirm_message = 5;
  string cashtag_candidate = 6;
}
message GetEffectiveCustomerLimitsResponseLimitForAction {
  LimitedAction action = 1;
  Money limit = 2;
  string limit_exceeded_message = 3;
}
message GetEffectiveCustomerLimitsResponse {
  repeated GetEffectiveCustomerLimitsResponseLimitForAction limits = 1;
}
message ExchangeContract {
  string contract_token = 1;
  Money source_amount = 2;
  Money target_amount = 3;
  int64 expires_at = 4;
}
message GetExchangeContractResponse {
  StatusResult status_result = 1;
  ExchangeContract exchange_contract = 2;
  string message = 3;
}
message GetExchangeDataResponse {
  ExchangeData exchange_data = 1;
  repeated ExchangeData equity_data = 2;
}
message GetFeatureFlagsResponse {
  repeated FeatureFlag feature_flags = 1;
}
message GetFlowResponse {
  ResponseContext response_context = 1;
  ClientScenario client_scenario = 2;
  string token = 3;
}
message PriceTick {
  int64 price = 1;
  int64 time_sec = 2;
}
message PriceHistory {
  int64 start_time = 1;
  int64 end_time = 2;
  int64 tick_frequency_ms = 3;
  string base_currency_code = 4;
  string quote_currency_code = 5;
  repeated PriceTick price_ticks = 6;
}
message GetHistoricalExchangeDataResponse {
  PriceHistory price_history = 1;
}
enum GetIssuedCardResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
  FAILURE = 3;
}
message GetIssuedCardResponse {
  GetIssuedCardResponseStatus status = 1;
  IssuedCard issued_card = 2;
  string message = 3;
  ScenarioPlan scenario_plan = 4;
  bool evict_existing_issued_card = 5;
}
message GetLocationConfigResponse {
  int64 time_interval_ms = 1;
  int64 distance_filter_meters = 2;
}
message GetPaymentResponse {
  ResponseContext response_context = 6;
}
message PaymentRewardStatus {
  string main_text = 1;
  bool show_payments = 2;
}
message GetPaymentRewardStatusResponse {
  PaymentRewardStatus payment_reward_status = 1;
  RewardStatus reward_status = 2;
}
enum GetProfileResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message GetProfileResponse {
  GetProfileResponseStatus status = 1;
  Profile profile = 2;
  string profile_token = 3;
}
message GetRewardsResponse {
  RewardsData rewards_data = 1;
}
message GetRewardStatusResponse {
  RewardStatus reward_status = 1;
}
enum GetScenarioPlanResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message GetScenarioPlanResponse {
  GetScenarioPlanResponseStatus status = 1;
  ResponseContext response_context = 3;
}
message GetWebLoginConfigResponse {
  WebLoginConfig web_login_config = 1;
}
enum InitiateCryptocurrencyTransferResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message InitiateCryptocurrencyTransferResponse {
  ResponseContext response_context = 1;
  InitiateCryptocurrencyTransferResponseStatus status = 2;
}
enum InitiatePaymentResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message ClaimablePayment {
  string payment_token = 1;
  string claim_token = 2;
  string claim_url = 3;
}
message ClaimData {
  ClaimablePayment claimable_payment = 1;
}
message InitiatePaymentResponse {
  InitiatePaymentResponseStatus status = 1;
  ClaimData claim_data = 10;
  ResponseContext response_context = 11;
}
message AccountListConfigAccount {
  string title = 1;
  string subtitle = 2;
  Avatar avatar = 3;
  repeated UiAlias aliases = 4;
  UiAlias preferred_alias = 5;
  string account_id = 6;
}
message AccountListConfig {
  repeated AccountListConfigAccount accounts = 1;
  ClientScenario client_scenario = 2;
}
message InitiateSessionResponse {
  string session_token = 1;
  SessionStatus session_status = 2;
  string app_token = 3;
  repeated FeatureFlag login_feature_flags = 4;
  string backup_tag = 5;
  string safety_net_nonce = 6;
  string safety_net_api_key = 7;
  AccountListConfig account_list_config = 8;
}
message InviteContactsResponse {
  repeated string unsent_email_addresses = 2;
  ResponseContext response_context = 3;
}
message BankAccount {
  string display_text = 1;
  string icon_url = 2;
}
message LinkBankAccountResponse {
  BankAccount bank_account = 5;
  Instrument instrument = 6;
  ResponseContext response_context = 9;
}
enum LinkCardResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
  INSTRUMENT_TYPE_MISMATCH = 3;
}
enum FieldName {
  option allow_alias = true;
  CARD_NUMBER = 1;
  CARD_EXPIRATION = 2;
  CARD_POSTAL_CODE = 3;
  PASSWORD = 4;
  SMS_NUMBER = 5;
  SMS_VERIFICATION_CODE = 6;
  BANK_ROUTING_NUMBER = 7;
  BANK_ACCOUNT_NUMBER = 8;
  CARD_CVV = 9;
  EMAIL_VERIFICATION_CODE = 10;
}
message LinkCardResponse {
  LinkCardResponseStatus status = 1;
  FieldName failure_field = 2;
  string passcode_token = 7;
  string unencrypted_pan_ocr_result = 9;
  Instrument instrument = 11;
  string verification_instrument_token = 14;
  ResponseContext response_context = 15;
}
enum OAuthResolveFlowResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
  TOO_MANY_ATTEMPTS = 3;
  CONCURRENT_MODIFICATION = 4;
}
message OAuthResolveFlowResponse {
  ResponseContext response_context = 1;
  OAuthResolveFlowResponseStatus status = 2;
}
message OrderConfirmationResponse {
  ResponseContext response_context = 1;
}
message PlaidLinkTokenCreateResponse {
  string link_token = 1;
  string expiration = 2;
  string request_id = 3;
}
message DigitalWalletTokenProvisioningResponseDataGooglePayResponse {
  string opaque_payment_card = 1;
}
enum DigitalWalletTokenProvisioningResponseDataStatus {
  option allow_alias = true;
  SUCCESS = 1;
  FAILED = 2;
}
message DigitalWalletTokenProvisioningResponseData {
  DigitalWalletTokenIssuer digital_wallet_issuer = 1;
  DigitalWalletTokenProvisioningResponseDataApplePayResponse apple_pay_response = 2;
  DigitalWalletTokenProvisioningResponseDataGooglePayResponse google_pay_response = 3;
  DigitalWalletTokenProvisioningResponseDataStatus status = 4;
}
message ProvisionDigitalWalletTokenResponse {
  DigitalWalletTokenProvisioningResponseData provisioning_response = 1;
  ResponseContext response_context = 2;
}
enum RefreshSessionResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message RefreshSessionResponse {
  RefreshSessionResponseStatus status = 1;
  string session_token = 2;
  string backup_tag = 3;
  string safety_net_nonce = 4;
  string safety_net_api_key = 5;
}
message RefundPaymentResponse {
  UiPayment payment = 1;
  ResponseContext response_context = 3;
}
message RegisterAppMessageActionResponse {}
enum RegisterDeviceResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message RegisterDeviceResponse {
  RegisterDeviceResponseStatus status = 1;
}
enum RegisterEmailResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  INVALID_EMAIL_ADDRESS = 2;
  TOO_MANY_REQUESTS = 3;
  DUPLICATE_EMAIL_ADDRESS = 4;
  CUSTOMER_DOES_NOT_EXIST = 5;
  INVALID_ENROLLMENT_TOKEN = 6;
}
message RegisterEmailResponse {
  RegisterEmailResponseStatus status = 1;
  ResponseContext response_context = 7;
}
enum RegisterSmsResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  INVALID_SMS_NUMBER = 2;
  TOO_MANY_REQUESTS = 3;
  DUPLICATE_SMS_NUMBER = 4;
  CUSTOMER_DOES_NOT_EXIST = 5;
}
message RegisterSmsResponse {
  RegisterSmsResponseStatus status = 1;
  ResponseContext response_context = 7;
}
message ReportAbuseResponse {
  ResponseContext response_context = 1;
}
enum ResetBadgeResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message ResetBadgeResponse {
  ResetBadgeResponseStatus status = 1;
}
enum ResolveMergeResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
}
message ResolveMergeResponse {
  ResolveMergeResponseStatus status = 1;
  ResponseContext response_context = 3;
}
message SelectActivityResponse {
  ResponseContext response_context = 1;
}
enum SelectOptionResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
}
message SelectOptionResponse {
  SelectOptionResponseStatus status = 1;
  ResponseContext response_context = 8;
}
message SelectSponsorsResponse {
  ResponseContext response_context = 1;
}
message SendTaxFormEmailResponse {
  ResponseContext response_context = 1;
}
enum SetAddressResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
  FAILURE = 3;
}
message SetAddressResponse {
  SetAddressResponseStatus status = 1;
  GlobalAddress postal_address = 8;
  ResponseContext response_context = 10;
}
enum SetAmountResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
}
message SetAmountResponse {
  ResponseContext response_context = 1;
  SetAmountResponseStatus status = 2;
}
message SetAppMessagePreferenceResponse {
  ResponseContext response_context = 1;
}
message SetBitcoinDisplayPreferenceResponse {
  ResponseContext response_context = 1;
}
enum SetCardCustomizationResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
}
message SetCardCustomizationResponse {
  SetCardCustomizationResponseStatus status = 1;
  ResponseContext response_context = 6;
}
enum SetCashtagResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CASHTAG_STATUS_FAILURE = 2;
  FAILURE = 3;
}
message SetCashtagResponse {
  SetCashtagResponseStatus status = 1;
  string cashtag_url = 2;
  CashtagStatus cashtag_status = 3;
  string cashtag_url_display_text = 7;
  ResponseContext response_context = 8;
}
enum SetCashtagUrlEnabledResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message SetCashtagUrlEnabledResponse {
  SetCashtagUrlEnabledResponseStatus status = 1;
  ResponseContext response_context = 2;
}
enum SetCountryResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  TOO_LATE_TO_CHANGE = 2;
  COUNTRY_NOT_SUPPORTED = 3;
}
message SetCountryResponse {
  ResponseContext response_context = 1;
  SetCountryResponseStatus status = 2;
}
message SetFeatureFlagsResponse {
  repeated FeatureFlag feature_flags = 1;
}
enum SetFullNameResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  INVALID_NAME = 2;
}
message SetFullNameResponse {
  SetFullNameResponseStatus status = 1;
  ResponseContext response_context = 10;
}
enum SetIncomingRequestPolicyResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
}
message SetIncomingRequestPolicyResponse {
  ResponseContext response_context = 1;
  SetIncomingRequestPolicyResponseStatus status = 2;
}
message SetOnboardingContextResponse {}
enum SetProfilePhotoResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message SetProfilePhotoResponse {
  SetProfilePhotoResponseStatus status = 1;
  string image_url = 2;
}
enum SetRatePlanResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  NOT_ALLOWED = 2;
}
message SetRatePlanResponse {
  SetRatePlanResponseStatus status = 1;
  ResponseContext response_context = 7;
}
enum SetRequirePasscodeConfirmationResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  INVALID_PASSCODE = 2;
  TOO_MANY_ATTEMPTS = 3;
  CARD_BLOCKED = 4;
  OP_NOT_PERMITTED = 5;
}
message SetRequirePasscodeConfirmationResponse {
  SetRequirePasscodeConfirmationResponseStatus status = 1;
  string passcode_token = 2;
  ResponseContext response_context = 4;
}
message SetScheduledTransactionPreferenceResponse {
  ResponseContext response_context = 1;
}
enum SetSignatureResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
}
message SetSignatureResponse {
  ResponseContext response_context = 1;
  SetSignatureResponseStatus status = 2;
}
enum SkipBlockerResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
}
message SkipBlockerResponse {
  SkipBlockerResponseStatus status = 1;
  ResponseContext response_context = 4;
}
message SubmitFilesetResponse {
  ResponseContext response_context = 1;
}
message SubmitFormResponse {
  ResponseContext response_context = 1;
}
message SubmitPayrollProviderSelectionResponse {
  ResponseContext response_context = 1;
}
enum SyncContactsResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  TOO_MANY_ATTEMPTS = 2;
}
message SyncedContact {
  bytes hashed_alias = 1;
  string photo_url = 2;
  string cashtag = 3;
  string display_name = 4;
  bool can_accept_payments = 5;
  string customer_token = 6;
  bool is_business = 7;
  bool is_verified_account = 8;
  int64 credit_card_fee_bps = 9;
  Country country_code = 10;
  bool is_cash_customer = 12;
}
message SyncContactsResponse {
  SyncContactsResponseStatus status = 1;
  string sync_token = 2;
  repeated SyncedContact add_contacts = 3;
  repeated bytes remove_hashed_aliases = 4;
}
message UnlinkBusinessResponse {
  ResponseContext response_context = 1;
}
message UnlockRewardResponse {
  ResponseContext response_context = 1;
}
enum UnregisterAliasResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message UnregisterAliasResponse {
  UnregisterAliasResponseStatus status = 1;
  ResponseContext response_context = 3;
}
message UploadFileResponse {
  ResponseContext response_context = 8;
}
enum VerifyContactsResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
  TOO_MANY_ATTEMPTS = 3;
  CONCURRENT_MODIFICATION = 4;
}
message VerifyContactsResponse {
  ResponseContext response_context = 1;
  VerifyContactsResponseStatus status = 2;
}
enum VerifyEmailResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  INVALID_EMAIL_ADDRESS = 2;
  INVALID_VERIFICATION_CODE = 3;
  EXPIRED_VERIFICATION_CODE = 4;
  TOO_MANY_FAILED_ATTEMPTS = 5;
  NOT_ELIGIBLE = 6;
}
message VerifyEmailResponse {
  VerifyEmailResponseStatus status = 1;
  ResponseContext response_context = 12;
}
enum VerifyGovernmentIdResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
}
message VerifyGovernmentIdResponse {
  VerifyGovernmentIdResponseStatus status = 1;
  ResponseContext response_context = 9;
}
enum VerifyIdentityResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
  INVALID_IDENTITY = 3;
  FAILURE = 4;
}
message VerifyIdentityResponse {
  VerifyIdentityResponseStatus status = 1;
  ResponseContext response_context = 12;
}
enum VerifyInstrumentResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
  TOO_MANY_ATTEMPTS = 3;
  CONCURRENT_MODIFICATION = 4;
}
message VerifyInstrumentResponse {
  VerifyInstrumentResponseStatus status = 1;
  ResponseContext response_context = 5;
}
enum VerifyMagicLinkResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  INVALID_APP_TOKEN = 2;
  INVALID_VERIFICATION_TOKEN = 3;
  EXPIRED_VERIFICATION_TOKEN = 4;
  TOO_MANY_FAILED_ATTEMPTS = 5;
  NOT_ELIGIBLE = 6;
}
message VerifyMagicLinkResponse {
  ResponseContext response_context = 1;
  VerifyMagicLinkResponseStatus status = 2;
}
enum VerifyPasscodeAndExpirationResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
}
message VerifyPasscodeAndExpirationResponse {
  VerifyPasscodeAndExpirationResponseStatus status = 1;
  ResponseContext response_context = 6;
}
enum VerifyPasscodeResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  INVALID_PASSCODE = 2;
  TOO_MANY_ATTEMPTS = 3;
  CARD_BLOCKED = 4;
  FAILURE = 5;
}
message VerifyPasscodeResponse {
  VerifyPasscodeResponseStatus status = 1;
  string full_name = 2;
  string passcode_token = 3;
  Instrument instrument = 6;
  ResponseContext response_context = 10;
}
enum VerifyQrCodeResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  FAILURE = 2;
}
message VerifyQrCodeResponse {
  VerifyQrCodeResponseStatus status = 1;
  ResponseContext response_context = 6;
}
enum VerifySmsResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  INVALID_SMS_NUMBER = 2;
  INVALID_VERIFICATION_CODE = 3;
  EXPIRED_VERIFICATION_CODE = 4;
  TOO_MANY_FAILED_ATTEMPTS = 5;
  NOT_ELIGIBLE = 6;
}
message VerifySmsResponse {
  VerifySmsResponseStatus status = 1;
  ResponseContext response_context = 12;
}
message DigitalWalletTokenProvisioningResponseDataApplePayResponse {
  bytes encrypted_pass_data = 1;
  bytes activation_data = 2;
  bytes ephemeral_public_key = 3;
}
enum InitiatePasscodeResetResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
}
message InitiatePasscodeResetResponse {
  InitiatePasscodeResetResponseStatus status = 1;
  ResponseContext response_context = 3;
}
enum SetPasscodeResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
  CONCURRENT_MODIFICATION = 2;
  RETRYABLE_FAILURE = 3;
  NONRETRYABLE_FAILURE = 4;
}
message SetPasscodeResponse {
  SetPasscodeResponseStatus status = 1;
  string passcode_token = 3;
  ResponseContext response_context = 10;
}
message SyncEntitiesResponse {
  string newest_token = 1;
  string oldest_token = 2;
  SyncEntitiesRequest next_request = 3;
  repeated SyncEntity entities = 4;
  bool refresh_all_entities = 5;
  int64 delay_next_call_ms = 6;
  repeated bytes all_known_ranges = 7;
  bool ignore_all_known_ranges = 8;
}
message TransferFundsResponse {
  string passcode_token = 3;
  string status_text = 5;
  ResponseContext response_context = 7;
}
message UnlinkInstrumentResponse {
  string verification_instrument_token = 1;
  ResponseContext response_context = 2;
}
enum CancelInvestmentOrderResponseStatus {
  option allow_alias = true;
  INVALID = 0;
  SUCCESS = 1;
}
message CancelInvestmentOrderResponse {
  ResponseContext response_context = 1;
  CancelInvestmentOrderResponseStatus status = 2;
}
message LearnMoreConfiguration {
  string link_text = 1;
  string link_url = 2;
  string image_url = 3;
  string title_text = 4;
  string body_text = 5;
}
message EquityDiscoveryAnimationTile {
  string token = 1;
  string image_url = 2;
  string accent_color = 3;
  string name = 4;
}
message Period {
  string token = 1;
  string label = 2;
}
message CustomOrderConfiguration {
  repeated Period periods = 1;
}
message GetCustomerInvestmentSettingsResponse {
  Money purchase_limit = 1;
  Money sell_limit = 2;
  string equities_in_app_disclosure_url = 3;
  string equities_discovery_url = 4;
  string bitcoin_discovery_url = 5;
  string disclosures_web_url = 6;
  string my_watchlist_description = 7;
  ResponseContext response_context = 8;
  string crypto_in_app_disclosure_url = 9;
  LearnMoreConfiguration my_first_stock_configuration = 10;
  string first_time_congrats_equity_text = 11;
  string first_time_congrats_bitcoin_text = 12;
  repeated EquityDiscoveryAnimationTile equity_discovery_animation_tiles = 13;
  int64 portfolio_chart_polling_rate_ms = 14;
  int64 bitcoin_chart_polling_rate_ms = 15;
  int64 entity_detail_chart_polling_rate_ms = 16;
  LearnMoreConfiguration my_first_bitcoin_configuration = 17;
  bool scheduled_btc_buys_enabled = 18;
  bool scheduled_equity_buys_enabled = 19;
  Money min_scheduled_btc_buy_amt = 20;
  Money min_scheduled_equity_buy_amt = 21;
  string bitcoin_investment_entity_token = 22;
  CustomOrderConfiguration custom_order_configuration = 23;
  string first_time_congrats_equity_title = 24;
  string first_time_congrats_bitcoin_title = 25;
  string first_time_congrats_equity_detail_title = 26;
  string first_time_congrats_equity_detail_text = 27;
  bool is_trusted_contact_enabled = 28;
}
message Document {
  string name = 1;
  string key = 2;
  string url = 4;
  StatementType type = 5;
  int64 document_date = 6;
  bool email_forwardable = 7;
}
message GetInvestmentStatementsResponse {
  repeated Document documents = 1;
}
message InitiateInvestmentOrderResponse {
  ResponseContext response_context = 1;
  string order_token = 2;
}
message UpdateInvestmentHoldingResponse {
  ResponseContext response_context = 1;
  SyncInvestmentHolding investment_holding = 2;
}
message CheckCreditLimitResponse {
  ResponseContext response_context = 1;
}
message ClearCreditLineBadgeResponse {
  ResponseContext response_context = 1;
}
message ClearInstrumentBadgeResponse {
  ResponseContext response_context = 1;
}
message LendingConfigInstrumentData {
  bool badged = 1;
  string instrument_title = 2;
  string instrument_subtitle = 3;
}
message LendingConfigRouting {
  ClientScenario client_scenario = 1;
  string client_route = 2;
}
message LendingConfig {
  bool enabled = 1;
  ClientScenario instrument_client_scenario = 2;
  ClientScenario deep_link_client_scenario = 3;
  LendingConfigInstrumentData instrument_data = 4;
  LendingConfigRouting deep_link_routing = 5;
  LendingConfigRouting instrument_routing = 6;
}
message GetLendingConfigResponse {
  LendingConfig lending_config = 1;
}
message InitiateLoanPaymentResponse {
  ResponseContext response_context = 1;
}
message InitiateLoanResponse {
  ResponseContext response_context = 1;
}
message LendingConfigRoutingResolvedResponse {
  ResponseContext response_context = 1;
  LendingConfig lending_config = 2;
}
message SkipLoanPaymentResponse {
  ResponseContext response_context = 1;
}
message ResolvePersonaDidvBlockerResponse {
  ResponseContext response_context = 1;
}
message HandleThreeDomainSecureRedirectResponse {
  ResponseContext response_context = 1;
}
message HandleThreeDomainSecureV2ActionResponse {
  ResponseContext response_context = 1;
}
message SupportFlowNode {}
message AdvanceSupportFlowResponse {
  SupportFlowNode support_flow_node = 1;
}
message CreateSupportCaseResponse {
  string result_text = 2;
}
message ContactOption {
  SupportContactType contact_type = 1;
  bool available = 2;
  string summary_text = 4;
  string contact_header = 5;
  string time_estimate = 7;
  bool include_issue_description = 8;
  string contact_terms = 9;
}
message GetSupportContactStatusResponse {
  repeated ContactOption contact_options = 5;
  string title = 9;
  string text = 10;
  bool chat_enabled = 11;
}
message StartSupportFlowResponse {
  SupportFlowNode support_flow_node = 1;
}
message RecipientSelectorSearchRequest {
  string search_text = 1;
  string external_id = 2;
  bool should_exclude_blocked_customers = 3;
}
message ProfileDirectorySearchRequest {
  string search_text = 1;
  string external_id = 2;
  repeated string reward_tokens = 3;
  string discover_flow_token = 4;
}
message Cashtag {
  string prefix = 1;
  string name = 2;
}
message RecipientSelectorSearchResponseLocalAddressBookResults {}
message RecipientSelectorSearchResponseLocalSyncedCustomerResults {}
message RecipientSelectorCustomerMetadata {
  string model_version = 1;
  int32 match_length = 2;
  bool is_cash_customer = 3;
  repeated string match_fields = 4;
  string query_token = 5;
}

message UiAvatarInitials {
  string initials = 1;
  Color text_color = 2;
  Color background_color = 3;
}

message UiAvatar {
  UiAvatarInitials initials = 1;
  UiImage picture = 2;
  UiImage icon = 4;
  string action_url = 5;
}
message RecipientSelectorCustomer {
  string token = 1;
  UiAvatar avatar = 2;
  string full_name = 3;
  Cashtag cashtag = 4;
  Region region = 5;
  bool is_verified = 6;
  bool is_business = 7;
  int64 credit_card_fee_bps = 8;
  RecipientSelectorCustomerMetadata metadata = 9;
  bool can_accept_payments = 10;
  bool is_blocked = 11;
}
message RecipientSelectorSearchResponseServerResults {
  repeated RecipientSelectorCustomer results = 1;
}
message RecipientSelectorSearchResponseLocalFavoriteResults {}
message RecipientSelectorSearchResponseResultSource {
  RecipientSelectorSearchResponseLocalAddressBookResults local_address_book = 1;
  RecipientSelectorSearchResponseLocalSyncedCustomerResults local_synced_contact = 2;
  RecipientSelectorSearchResponseServerResults server_results = 3;
  RecipientSelectorSearchResponseLocalFavoriteResults local_favorite = 4;
}
message RecipientSelectorSearchResponseSection {
  string title = 1;
  repeated RecipientSelectorSearchResponseResultSource results = 2;
}
message RecipientSelectorSearchResponse {
  repeated RecipientSelectorSearchResponseSection sections = 1;
}
